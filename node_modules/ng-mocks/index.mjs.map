{"version":3,"file":"index.mjs","mappings":"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","sources":["webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.define-property-descriptor.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.extract-property-descriptor.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/ng-mocks-universe.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-global.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-ng-injection-token.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.define-property.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.directive-io-parse.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.stub.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-ng-type.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-ng-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.extract-forward-ref.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.config.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-type.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.extract-methods-from-prototype.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.create-clone.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/mock-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.directive-io-build.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.helpers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.use-factory.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.stub-member.ts","webpack://ng-mocks/external module \"@angular/core\"","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-ng-module-def-with-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.resolve-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/resolve/collect-declarations.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.parameters-resolve.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-instance/mock-instance-apply.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.tokens.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.extract-properties-from-prototype.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/check.is-func.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/mock-service.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/check.is-class.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/check.is-inst.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.mock-function.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.replace-with-mocks.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.mock-service.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.create-mock-from-prototype.ts","webpack://ng-mocks/external module \"@angular/core/testing\"","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-name.ts","webpack://ng-mocks/webpack/bootstrap","webpack://ng-mocks/webpack/runtime/define property getters","webpack://ng-mocks/webpack/runtime/global","webpack://ng-mocks/webpack/runtime/hasOwnProperty shorthand","webpack://ng-mocks/webpack/runtime/make namespace object","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/ng-mocks-stack.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/func.extract-tokens.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-ng-type.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-standalone.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.def-stack.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/mock-builder-stash.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.provided-in.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/add-requested-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/apply-platform-modules.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/error.empty-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-jest-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/error.jest-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/error.missing-decorators.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.body-catch.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.directive-resolve.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.module-resolve.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.meta.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-source-of-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/mark-exported.ts","webpack://ng-mocks/external module \"@angular/forms\"","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.form.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/mock-control-value-accessor-proxy.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/mock-control-value-accessor.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/decorate.inputs.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/decorate.mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/decorate.outputs.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/decorate.queries.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/to-existing-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/to-factory-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/clone-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/decorate-declaration.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.import-exists.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mock-ng-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-last-fixture.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/return-cached-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/get-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-component/render/generate-template.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-component/render/get-key.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-component/mock-component.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-directive/mock-directive.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.pipe-resolve.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-pipe/mock-pipe.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-module/mock-module.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-module/create-resolvers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-module/mark-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-module/mock-ng-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/get-override-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/skip-override.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/create-ng-mocks-overrides-token.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/create-ng-mocks-token.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/create-ng-mocks-touches-token.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/handle-entry-components.ts","webpack://ng-mocks/external module \"@angular/common\"","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/skip-dep.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/add-def-to-root-provider-parameters.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/check-root-provider-dependency.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/extract-dep.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/get-root-providers-data.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/handle-provided-in-dependency.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/skip-root-provider-dependency.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/get-root-provider-parameters.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/handle-root-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-module.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-ng-modules.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.extract-deps.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-exclude-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-keep-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/try-mock-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-mock-declarations.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/try-mock-declaration.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-modules.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-replace-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-universe.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/parse-mock-arguments.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/parse-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/mock-builder.promise.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/equal-variables.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/equal-render-defs.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/equal-render-configs.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/are-equal-config-params.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/are-equal-maps.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/are-equal-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/are-equal-sets.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/get-empty-config.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/required-metadata.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/mock-builder.performance.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/mock-builder.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/is-debug-node.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.parse-find-args-name.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/is-fixture.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find/func.parse-find-args.ts","webpack://ng-mocks/external module \"@angular/platform-browser\"","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find/func.parse-find-term.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find/mock-helper.find.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/detect-text-node.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/el-def-compare.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/el-def-get-node.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.injector.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/el-def-get-parent.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/nested-check-children.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/nested-check-parent.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/nested-check.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/mock-helper.crawl.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.parse-find-args.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/detect-attribute-in-selectors.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.parse-provider-tokens-directives.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/func.get-public-provider-keys.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/func.parse-inputs-and-requires-attributes.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/detect-selectors-from-node.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/crawl-by-attribute.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node-injector.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node-element.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node-scan.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node-ivy.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node-standard.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.get.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.attributes.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/crawl-by-attribute-value.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/crawl-by-declaration.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/crawl-by-id.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/detect-tag-name-in-selectors.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/crawl-by-tag-name.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/detect-crawler.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/func.is-valid-reveal-selector.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/mock-helper.reveal.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/mock-helper.reveal-all.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mock-control-value-accessor.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/is-html-element.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/events/mock-helper.event.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/events/mock-helper.trigger.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/cva/func.get-vca.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/cva/mock-helper.change.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/cva/mock-helper.touch.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/events/mock-helper.click.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find/mock-helper.find-all.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find-instance/func.is-valid-find-instance-selector.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find-instance/mock-helper.find-instance.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find-instance/mock-helper.find-instances.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/handle-array.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/format-handler.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/handle-text.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/is-text.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/mock-helper.format-html.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/mock-helper.format-text.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.auto-spy.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.console.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.console-ignore.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.console-throw.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.default-config.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.default-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.faster-install.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.flush-test-bed.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.faster.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.iterate-declaration.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.global-prepare.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.global-exclude.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.global-keep.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.global-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.global-replace.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.global-wipe.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.guts.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.input.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.output.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.reset.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/render/func.find-deep.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/render/func.parse-template.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/render/mock-helper.hide.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/render/mock-helper.render.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/template-ref/detect-crawler.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/template-ref/detect-template-ref.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/template-ref/func.is-valid-template-ref-selector.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/template-ref/mock-helper.find-template-ref.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/template-ref/mock-helper.find-template-refs.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.object.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-provider/mock-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/ng-mocks-global-overrides.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mocked-ng-def-of.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-mocked-ng-def-of.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mock-of.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mock-validator.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-instance/mock-instance-forgot-reset.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-instance/mock-instance.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-declaration/mock-declaration.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/func.generate-template.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/func.create-wrapper.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/func.install-prop-reader.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/func.reflect-template.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/mock-render-factory.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/mock-render.ts"],"sourcesContent":["import helperExtractPropertyDescriptor from './helper.extract-property-descriptor';\n\nexport default (instance: any, prop: keyof any, desc?: PropertyDescriptor): boolean => {\n  if (!desc || !instance) {\n    return false;\n  }\n\n  // istanbul ignore else\n  if (Object.defineProperty) {\n    const sourceDesc = helperExtractPropertyDescriptor(instance, prop);\n    if (sourceDesc?.configurable === false) {\n      return false;\n    }\n\n    Object.defineProperty(instance, prop, {\n      ...desc,\n      configurable: true,\n      ...((desc.get === undefined && desc.set === undefined) || desc.writable === false ? { writable: true } : {}),\n    });\n  } else {\n    instance[prop] = desc.value;\n  }\n\n  return true;\n};\n","export default <T>(service: T, prop: keyof any): PropertyDescriptor | undefined => {\n  let prototype = service;\n  while (prototype && Object.getPrototypeOf(prototype) !== null) {\n    const descriptor = Object.getOwnPropertyDescriptor(prototype, prop);\n    if (descriptor) {\n      return descriptor;\n    }\n    prototype = Object.getPrototypeOf(prototype);\n  }\n\n  return undefined;\n};\n","import { IMockBuilderConfig } from '../mock-builder/types';\n\nimport coreConfig from './core.config';\nimport { AnyDeclaration } from './core.types';\nimport funcGetGlobal from './func.get-global';\nimport funcGetName from './func.get-name';\n\nconst globalMap = (key: string) => () => {\n  if (!ngMocksUniverse.global.has(key)) {\n    ngMocksUniverse.global.set(key, new Map());\n  }\n\n  return ngMocksUniverse.global.get(key);\n};\n\ninterface NgMocksUniverse {\n  /**\n   * the value can be:\n   * - null - exclude\n   * - undefined - delayed initialization\n   * - value - the definition which should be used in tests: real value, replacement, mock.\n   */\n  builtDeclarations: Map<any, any>;\n  builtProviders: Map<any, any>;\n  cacheDeclarations: Map<any, any>;\n  cacheProviders: Map<any, any>;\n  config: Map<any, any>;\n  configInstance: Map<any, any>;\n  flags: Set<string>;\n  getBuildDeclaration: (def: any) => any | undefined;\n  getConfigMock: () => Map<any, IMockBuilderConfig>;\n  getDefaults: () => Map<any, ['mock' | 'keep' | 'replace' | 'exclude', any?]>;\n  getLocalMocks: () => Array<[any, any]>;\n  getOverrides: () => Map<any, any>;\n  getResolution: (def: any) => undefined | 'mock' | 'keep' | 'replace' | 'exclude';\n  global: Map<any, any>;\n  hasBuildDeclaration: (def: any) => boolean;\n  isExcludedDef: (def: any) => boolean;\n  isProvidedDef: (def: any) => boolean;\n  touches: Set<AnyDeclaration<any> | string>;\n  indexValue: number;\n  index: () => number;\n}\n\nfuncGetGlobal().ngMocksUniverse = funcGetGlobal().ngMocksUniverse || {};\nconst ngMocksUniverse: NgMocksUniverse = funcGetGlobal().ngMocksUniverse;\n\nngMocksUniverse.builtDeclarations = new Map();\nngMocksUniverse.builtProviders = new Map();\nngMocksUniverse.cacheDeclarations = new Map();\nngMocksUniverse.cacheProviders = new Map();\nngMocksUniverse.config = new Map();\nngMocksUniverse.configInstance = new Map();\nngMocksUniverse.flags = new Set(coreConfig.flags);\nngMocksUniverse.global = new Map();\nngMocksUniverse.touches = new Set();\n\nngMocksUniverse.global.set('flags', {\n  // @deprecated and will be changed in A13 to 'throw'\n  onMockBuilderMissingDependency: coreConfig.onMockBuilderMissingDependency,\n  // @deprecated and will be changed in A13 to 'throw'\n  onMockInstanceRestoreNeed: coreConfig.onMockInstanceRestoreNeed,\n  // @deprecated and will be changed in A13 to 'throw'\n  onTestBedFlushNeed: coreConfig.onTestBedFlushNeed,\n});\n\nngMocksUniverse.getOverrides = globalMap('overrides');\nngMocksUniverse.getDefaults = globalMap('defaults');\nngMocksUniverse.getConfigMock = globalMap('configMock');\n\nconst getDefaults = (def: any): [] | ['mock' | 'keep' | 'replace' | 'exclude', any?] => {\n  {\n    const defValue = ngMocksUniverse.getDefaults().get(def);\n    if (defValue) {\n      return defValue;\n    }\n  }\n\n  {\n    const defValue = typeof def === 'function' ? ngMocksUniverse.getDefaults().get(`@${funcGetName(def)}`) : undefined;\n    if (defValue) {\n      return defValue;\n    }\n  }\n\n  return [];\n};\n\nngMocksUniverse.getResolution = (def: any): undefined | 'mock' | 'keep' | 'replace' | 'exclude' => {\n  const set = ngMocksUniverse.config.get('ngMocksDepsResolution');\n  if (set?.has(def)) {\n    return set.get(def);\n  }\n  const [value] = getDefaults(def);\n\n  return value;\n};\n\nngMocksUniverse.getBuildDeclaration = (def: any): undefined | null | any => {\n  if (ngMocksUniverse.builtDeclarations.has(def)) {\n    return ngMocksUniverse.builtDeclarations.get(def);\n  }\n  const [mode, replacement] = getDefaults(def);\n\n  if (mode === 'exclude') {\n    return null;\n  }\n  if (!mode || mode === 'keep') {\n    return def;\n  }\n  if (mode === 'replace') {\n    return replacement;\n  }\n};\n\nngMocksUniverse.hasBuildDeclaration = (def: any): boolean => {\n  if (ngMocksUniverse.builtDeclarations.has(def)) {\n    // undefined means that we know about this declaration,\n    // but its initialization is postponed at the moment.\n    return ngMocksUniverse.builtDeclarations.get(def) !== undefined;\n  }\n  const [mode] = getDefaults(def);\n\n  return !!mode && mode !== 'mock';\n};\n\nconst hasBuildDeclaration = (def: any): boolean => ngMocksUniverse.hasBuildDeclaration(def);\nconst getBuildDeclaration = (def: any): any => ngMocksUniverse.getBuildDeclaration(def);\n\nngMocksUniverse.isExcludedDef = (def: any): boolean => {\n  const resolution = ngMocksUniverse.getResolution(def);\n  if (resolution && resolution !== 'exclude') {\n    return false;\n  }\n\n  return hasBuildDeclaration(def) && getBuildDeclaration(def) === null;\n};\n\nngMocksUniverse.isProvidedDef = (def: any): boolean => hasBuildDeclaration(def) && getBuildDeclaration(def) !== null;\n\n// excluding StoreDevtoolsModule by default\nngMocksUniverse.getDefaults().set('@StoreDevtoolsModule', ['exclude']);\n\nngMocksUniverse.indexValue = 0;\nngMocksUniverse.index = () => {\n  return ngMocksUniverse.indexValue++;\n};\n\nexport default ((): NgMocksUniverse => ngMocksUniverse)();\n","export default (): Record<keyof any, any> => {\n  // istanbul ignore if\n  if (typeof window === 'undefined') {\n    return global;\n  }\n\n  return window;\n};\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Checks whether a variable is an Angular token.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgInjectionToken\n *\n * ```ts\n * isNgInjectionToken(APP_ID); // returns true\n * isNgInjectionToken(arbitraryVariable); // returns false\n * ```\n */\nexport const isNgInjectionToken = (token: any): token is InjectionToken<any> =>\n  token && typeof token === 'object' && token.ngMetadataName === 'InjectionToken';\n","import helperMockService from '../mock-service/helper.mock-service';\n\nexport default (instance: any, property: keyof any, value: any, enumerable = false) => {\n  helperMockService.definePropertyDescriptor(instance, property, {\n    configurable: true,\n    enumerable,\n    value,\n    writable: true,\n  });\n};\n","import { DirectiveIo, DirectiveIoParsed } from './core.types';\n\nexport default function (param: DirectiveIo): DirectiveIoParsed {\n  if (typeof param === 'string') {\n    const [name, alias] = param.split(':').map(v => v.trim());\n\n    if (name === alias || !alias) {\n      return { name };\n    }\n\n    return { name, alias };\n  }\n\n  return param;\n}\n","import helperExtractMethodsFromPrototype from '../mock-service/helper.extract-methods-from-prototype';\nimport helperExtractPropertiesFromPrototype from '../mock-service/helper.extract-properties-from-prototype';\nimport helperExtractPropertyDescriptor from '../mock-service/helper.extract-property-descriptor';\nimport helperMockService from '../mock-service/helper.mock-service';\nimport { MockedFunction } from '../mock-service/types';\n\nexport default <T = MockedFunction>(instance: any, override: any, style?: 'get' | 'set'): T => {\n  if (typeof override === 'string') {\n    return helperMockService.mock(instance, override, style);\n  }\n\n  // if someone is giving us a function, then we should swap instance and overrides.\n  // so in the end the function can be called, but it also has all desired properties.\n  let correctInstance = instance;\n  let applyOverrides = override;\n  const skipProps = ['__zone_symbol__unconfigurables'];\n  if (typeof override === 'function') {\n    correctInstance = helperMockService.createClone(override);\n    applyOverrides = instance;\n    skipProps.push(...Object.getOwnPropertyNames(correctInstance));\n  }\n\n  const keys = [\n    ...helperExtractMethodsFromPrototype(applyOverrides),\n    ...helperExtractPropertiesFromPrototype(applyOverrides),\n  ];\n  for (const key of keys) {\n    const desc = skipProps.indexOf(key) === -1 ? helperExtractPropertyDescriptor(applyOverrides, key) : undefined;\n    if (desc && Object.prototype.hasOwnProperty.call(desc, 'value') && desc.value === undefined) {\n      continue;\n    }\n    helperMockService.definePropertyDescriptor(correctInstance, key, desc);\n  }\n\n  return correctInstance;\n};\n","import collectDeclarations from '../resolve/collect-declarations';\n\nimport { AnyType } from './core.types';\n\n/**\n * Checks whether a class has been decorated with a specific Angular decorator.\n * Due to the extension / multi decoration, we rely on the last used decorator.\n *\n * @internal\n *\n * ```ts\n * isNgType(MockModule, 'NgModule'); // returns true\n * isNgType(RealComponent, 'Component'); // returns true\n * isNgType(ArbitraryClass, 'Directive'); // returns false\n * isNgType(ArbitraryClass, 'Injectable'); // returns false\n * ```\n */\nexport const isNgType = (declaration: AnyType<any>, type: string): boolean => {\n  const { decorators } = collectDeclarations(declaration);\n  if (decorators.length === 0) {\n    return false;\n  }\n\n  let offset = 1;\n\n  // Injectable works well if the declaration is in providers.\n  if (type === 'Injectable' && decorators.indexOf('Injectable') !== -1) {\n    return true;\n  }\n\n  // Skipping Injectable.\n  while (decorators[decorators.length - offset] === 'Injectable') {\n    offset += 1;\n  }\n\n  return decorators[decorators.length - offset] === type;\n};\n","import { InjectionToken, PipeTransform } from '@angular/core';\n\nimport { Type } from './core.types';\nimport { isNgInjectionToken } from './func.is-ng-injection-token';\nimport { isNgType } from './func.is-ng-type';\n\nconst isModuleCheck = (def: any, ngType?: string): boolean => (!ngType || ngType === 'm') && isNgType(def, 'NgModule');\nconst isComponentCheck = (def: any, ngType?: string): boolean =>\n  (!ngType || ngType === 'c') && isNgType(def, 'Component');\nconst isDirectiveCheck = (def: any, ngType?: string): boolean =>\n  (!ngType || ngType === 'd') && isNgType(def, 'Directive');\nconst isPipeCheck = (def: any, ngType?: string): boolean => (!ngType || ngType === 'p') && isNgType(def, 'Pipe');\nconst isInjectableCheck = (def: any, ngType?: string): boolean =>\n  (!ngType || ngType === 'i') && isNgType(def, 'Injectable');\n\n/**\n * Checks whether a class has been decorated by @NgModule.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealModule, 'm'); // returns true\n * isNgDef(MockModule, 'm'); // returns true\n * isNgDef(ArbitraryModule, 'm'); // returns true\n * isNgDef(ArbitraryClass, 'm'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 'm'): declaration is Type<any>;\n\n/**\n * Checks whether a class has been decorated by @Component.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealComponent, 'c'); // returns true\n * isNgDef(MockComponent, 'c'); // returns true\n * isNgDef(ArbitraryComponent, 'c'); // returns true\n * isNgDef(ArbitraryClass, 'c'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 'c'): declaration is Type<any>;\n\n/**\n * Checks whether a class has been decorated by @Directive.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealDirective, 'd'); // returns true\n * isNgDef(MockDirective, 'd'); // returns true\n * isNgDef(ArbitraryDirective, 'd'); // returns true\n * isNgDef(ArbitraryClass, 'd'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 'd'): declaration is Type<any>;\n\n/**\n * Checks whether a class has been decorated by @Pipe.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealPipe, 'p'); // returns true\n * isNgDef(MockPipe, 'p'); // returns true\n * isNgDef(ArbitraryPipe, 'p'); // returns true\n * isNgDef(ArbitraryClass, 'p'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 'p'): declaration is Type<PipeTransform>;\n\n/**\n * Checks whether a class has been decorated by @Injectable.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealService, 'i'); // returns true\n * isNgDef(MockService, 'i'); // returns true\n * isNgDef(ArbitraryService, 'i'); // returns true\n * isNgDef(ArbitraryClass, 'i'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 'i'): declaration is Type<any>;\n\n/**\n * Checks whether a variable is a token.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(realToken, 't'); // returns true\n * isNgDef(mockToken, 't'); // returns true\n * isNgDef(arbitraryToken, 't'); // returns true\n * isNgDef(arbitraryObject, 't'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 't'): declaration is InjectionToken<any>;\n\n/**\n * Checks whether a class or variable has been decorated by a ng type.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealModule); // returns true\n * isNgDef(MockComponent); // returns true\n * isNgDef(ArbitraryDirective); // returns true\n * isNgDef(token); // returns true\n * isNgDef(ArbitraryClass); // returns false\n * ```\n */\nexport function isNgDef(declaration: any): declaration is Type<any>;\n\nexport function isNgDef(declaration: any, ngType?: string): declaration is Type<any> {\n  if (ngType === 't') {\n    return isNgInjectionToken(declaration);\n  }\n  if (typeof declaration !== 'function') {\n    return false;\n  }\n\n  const isModule = isModuleCheck(declaration, ngType);\n  const isComponent = isComponentCheck(declaration, ngType);\n  const isDirective = isDirectiveCheck(declaration, ngType);\n  const isPipe = isPipeCheck(declaration, ngType);\n  const isInjectable = isInjectableCheck(declaration, ngType);\n\n  return isModule || isComponent || isDirective || isPipe || isInjectable;\n}\n","// handles forwardRef on useExisting\nexport default (provide: any): any => {\n  if (typeof provide === 'function' && provide.__forward_ref__) {\n    return provide();\n  }\n\n  return provide;\n};\n","export default {\n  flags: ['cacheModule', 'cacheComponent', 'cacheDirective', 'cacheProvider', 'correctModuleExports'],\n  mockRenderCacheSize: 25,\n  neverMockModule: [\n    'ApplicationModule',\n    'CommonModule',\n    'BrowserModule',\n\n    // Angular 16 adds underscores\n    '_ApplicationModule',\n    '_CommonModule',\n    '_BrowserModule',\n  ],\n  neverMockProvidedFunction: [\n    'DomRendererFactory2',\n    'EventManager',\n    'Injector', // ivy only\n    'RendererFactory2',\n\n    // https://github.com/help-me-mom/ng-mocks/issues/538\n    'Sanitizer',\n    'DomSanitizer',\n    'DomSanitizerImpl',\n\n    // ApplicationModule, A14 made them global at root level\n    'ApplicationInitStatus',\n    'ApplicationRef',\n    'Compiler',\n    'IterableDiffers',\n    'KeyValueDiffers',\n\n    // Angular 16 adds underscores\n    '_DomRendererFactory2',\n    '_EventManager',\n    '_Injector',\n    '_Sanitizer',\n    '_DomSanitizer',\n    '_DomSanitizerImpl',\n    '_ApplicationInitStatus',\n    '_ApplicationRef',\n    '_Compiler',\n    '_IterableDiffers',\n    '_KeyValueDiffers',\n  ],\n  neverMockToken: [\n    'InjectionToken Set Injector scope.', // INJECTOR_SCOPE // ivy only\n    'InjectionToken EventManagerPlugins', // EVENT_MANAGER_PLUGINS\n    'InjectionToken HammerGestureConfig', // HAMMER_GESTURE_CONFIG\n\n    // ApplicationModule, A14 made them global at root level\n    'InjectionToken AppId', // APP_ID\n    'InjectionToken DefaultCurrencyCode', // DEFAULT_CURRENCY_CODE\n    'InjectionToken LocaleId', // LOCALE_ID\n    'InjectionToken SCHEDULER_TOKEN', // SCHEDULER\n  ],\n  onMockBuilderMissingDependency: 'throw',\n  onMockInstanceRestoreNeed: 'warn',\n  onTestBedFlushNeed: 'warn',\n\n  dependencies: [\n    'declarations',\n    'hostDirectives',\n    'entryComponents',\n    'bootstrap',\n    'providers',\n    'viewProviders',\n    'imports',\n    'exports',\n  ] as const,\n};\n","import { isNgModuleDefWithProviders } from './func.is-ng-module-def-with-providers';\n\nexport default (provider: any): any => {\n  return provider && typeof provider === 'object' && provider.provide\n    ? provider.provide\n    : isNgModuleDefWithProviders(provider)\n      ? provider.ngModule\n      : provider && typeof provider === 'object' && provider.directive\n        ? provider.directive\n        : provider;\n};\n","import funcGetName from '../common/func.get-name';\n\nconst sanitizerMethods = [\n  'sanitize',\n  'bypassSecurityTrustHtml',\n  'bypassSecurityTrustStyle',\n  'bypassSecurityTrustScript',\n  'bypassSecurityTrustUrl',\n  'bypassSecurityTrustResourceUrl',\n];\n\nconst extraMethods: Record<string, undefined | string[]> = {\n  DomSanitizer: sanitizerMethods,\n  Sanitizer: sanitizerMethods,\n};\n\nconst getOwnPropertyNames = (prototype: any): string[] => {\n  const result: string[] = Object.getOwnPropertyNames(prototype);\n  for (const method of extraMethods[funcGetName(prototype)] ?? []) {\n    result.push(method);\n  }\n\n  return result;\n};\n\nexport default <T>(service: T): string[] => {\n  const result: string[] = [];\n\n  let prototype = service;\n  while (prototype && Object.getPrototypeOf(prototype) !== null) {\n    for (const method of getOwnPropertyNames(prototype)) {\n      if ((method as any) === 'constructor') {\n        continue;\n      }\n\n      const descriptor = Object.getOwnPropertyDescriptor(prototype, method);\n      const isGetterSetter = descriptor && (descriptor.get || descriptor.set);\n      if (isGetterSetter || result.indexOf(method) !== -1) {\n        continue;\n      }\n      result.push(method);\n    }\n    prototype = Object.getPrototypeOf(prototype);\n  }\n\n  return result;\n};\n","import helperDefinePropertyDescriptor from './helper.define-property-descriptor';\nimport helperExtractMethodsFromPrototype from './helper.extract-methods-from-prototype';\nimport helperExtractPropertiesFromPrototype from './helper.extract-properties-from-prototype';\nimport helperExtractPropertyDescriptor from './helper.extract-property-descriptor';\n\nexport default (service: any, bindFrom?: object, bindTo?: object, mock?: any): any => {\n  const instance = function (...args: any[]) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return (mock || service).apply(bindFrom === this ? bindTo : this, args);\n  };\n\n  for (const prop of [\n    ...helperExtractMethodsFromPrototype(service),\n    ...helperExtractPropertiesFromPrototype(service),\n  ]) {\n    const desc = helperExtractPropertyDescriptor(service, prop);\n    helperDefinePropertyDescriptor(instance, prop, desc);\n  }\n\n  return instance;\n};\n","import { Provider } from '@angular/core';\n\nimport coreConfig from '../common/core.config';\nimport { Type } from '../common/core.types';\nimport funcGetType from '../common/func.get-type';\nimport { isNgInjectionToken } from '../common/func.is-ng-injection-token';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport helperDefinePropertyDescriptor from './helper.define-property-descriptor';\nimport helperExtractPropertyDescriptor from './helper.extract-property-descriptor';\nimport helperUseFactory from './helper.use-factory';\nimport { MockService } from './mock-service';\n\nconst { neverMockProvidedFunction, neverMockToken } = coreConfig;\n\nconst applyMissingClassProperties = (instance: any, useClass: Type<any>) => {\n  const existing = Object.getOwnPropertyNames(instance);\n  const child = MockService(useClass);\n\n  for (const name of Object.getOwnPropertyNames(child)) {\n    if (existing.indexOf(name) !== -1) {\n      continue;\n    }\n    const def = helperExtractPropertyDescriptor(child, name);\n    helperDefinePropertyDescriptor(instance, name, def);\n  }\n};\n\nconst createFactoryProvider = (provider: any, provide: any) =>\n  helperUseFactory(provide, () => {\n    const instance = MockService(provide);\n    // Magic below adds missed properties to the instance to\n    // fulfill missed abstract methods.\n    if (provide !== provider && Object.keys(provider).indexOf('useClass') !== -1) {\n      applyMissingClassProperties(instance, provider.useClass);\n    }\n\n    return instance;\n  });\n\nconst normalizePrimitivesMap: Array<[(value: any) => boolean, any]> = [\n  [value => typeof value === 'boolean', false],\n  [value => typeof value === 'number', 0],\n  [value => typeof value === 'string', ''],\n  [value => value === null, null],\n];\n\nconst normalizePrimitives = (value: any): any => {\n  for (const [check, result] of normalizePrimitivesMap) {\n    if (check(value)) {\n      return result;\n    }\n  }\n\n  return undefined;\n};\n\nconst createValueProvider = (provider: any, provide: any) =>\n  helperUseFactory(provide, () =>\n    provider.useValue && typeof provider.useValue === 'object'\n      ? MockService(provider.useValue)\n      : normalizePrimitives(provider.useValue),\n  );\n\nconst createClassProvider = (provider: any, provide: any) =>\n  ngMocksUniverse.builtProviders.has(provider.useClass) &&\n  ngMocksUniverse.builtProviders.get(provider.useClass) === provider.useClass\n    ? provider\n    : helperUseFactory(provide, () => MockService(provider.useClass));\n\nconst createMockProvider = (provider: any, provide: any, cacheProviders?: Map<any, any>): Provider | undefined => {\n  let mockProvider: Provider | undefined;\n  if (typeof provide === 'function') {\n    mockProvider = createFactoryProvider(provider, provide);\n  }\n  if (provide === provider && mockProvider && cacheProviders) {\n    cacheProviders.set(provide, mockProvider);\n  }\n\n  return mockProvider;\n};\n\n// Tokens are special subject, we can skip adding them because in a mock module they are useless.\n// The main problem is that providing undefined to HTTP_INTERCEPTORS and others breaks their code.\n// If a testing module / component requires omitted tokens then they should be provided manually\n// during creation of TestBed module.\nconst handleProvider = (provider: any, provide: any, useFactory: boolean) => {\n  if (provide === provider) {\n    return useFactory ? helperUseFactory(provider, () => undefined) : undefined;\n  }\n  if (provider.multi) {\n    ngMocksUniverse.config.get('ngMocksMulti')?.add(provide);\n\n    return undefined;\n  }\n\n  let mockProvider: any;\n  // istanbul ignore else\n  if (Object.keys(provider).indexOf('useValue') !== -1) {\n    mockProvider = createValueProvider(provider, provide);\n  } else if (Object.keys(provider).indexOf('useExisting') !== -1) {\n    mockProvider = provider;\n  } else if (Object.keys(provider).indexOf('useClass') !== -1) {\n    mockProvider = createClassProvider(provider, provide);\n  } else if (Object.keys(provider).indexOf('useFactory') !== -1) {\n    mockProvider = helperUseFactory(provide, () => ({}));\n  }\n\n  return mockProvider;\n};\n\nconst isNeverMockFunction = (provide: any): boolean =>\n  typeof provide === 'function' && neverMockProvidedFunction.indexOf(provide.name) !== -1;\n\nconst isNeverMockToken = (provide: any): boolean =>\n  isNgInjectionToken(provide) && neverMockToken.indexOf(provide.toString()) !== -1;\n\nexport default (provider: any, useFactory = false): Provider | undefined => {\n  const provide = funcGetType(provider);\n\n  if (ngMocksUniverse.getResolution(provide) === 'mock') {\n    // nothing to do\n  } else if (isNeverMockFunction(provide)) {\n    return provider;\n  } else if (isNeverMockToken(provide)) {\n    return undefined;\n  }\n\n  // Only pure provides should be cached to avoid their influence on\n  // another different declarations.\n  const cacheProviders = ngMocksUniverse.flags.has('cacheProvider')\n    ? ngMocksUniverse.cacheProviders\n    : /* istanbul ignore next */ undefined;\n  if (provide === provider && cacheProviders && cacheProviders.has(provide)) {\n    return cacheProviders.get(provide);\n  }\n\n  return createMockProvider(provider, provide, cacheProviders) || handleProvider(provider, provide, useFactory);\n};\n","import { DirectiveIo, DirectiveIoParsed } from './core.types';\n\nexport default function ({ name, alias, required }: DirectiveIoParsed, skipName = false): DirectiveIo {\n  if (required) {\n    return { name, alias, required };\n  }\n  if (!alias || name === alias) {\n    return skipName ? '' : name;\n  }\n\n  return skipName ? alias : `${name}:${alias}`;\n}\n","import { getTestBed } from '@angular/core/testing';\n\nimport coreDefineProperty from './core.define-property';\nimport coreReflectParametersResolve from './core.reflect.parameters-resolve';\nimport { AnyDeclaration, AnyType, Type } from './core.types';\nimport funcGetGlobal from './func.get-global';\nimport funcGetName from './func.get-name';\nimport ngMocksUniverse from './ng-mocks-universe';\n\n/**\n * It will be removed from public interface with the next release: A14\n * Use ngMocks.get(token) instead.\n *\n * @deprecated\n * @internal\n */\nexport const getTestBedInjection = <I>(token: AnyDeclaration<I>): I | undefined => {\n  try {\n    // istanbul ignore next\n    return getInjection(token);\n  } catch {\n    return undefined;\n  }\n};\n\n/**\n * It will be removed from public interface with the next release: A14\n *\n * @deprecated\n * @internal\n */\nexport const getInjection = <I>(token: AnyDeclaration<I>): I => {\n  const testBed: any = getTestBed();\n\n  // istanbul ignore next\n  return testBed.inject ? testBed.inject(token) : (testBed as any).get(token);\n};\n\nexport const flatten = <T>(values: T | T[] | { ɵproviders: T[] }, result: T[] = []): T[] => {\n  if (Array.isArray(values)) {\n    for (const value of values) {\n      flatten(value, result);\n    }\n  } else if (values !== null && typeof values === 'object' && Array.isArray((values as any).ɵproviders)) {\n    for (const value of (values as any).ɵproviders) {\n      flatten(value, result);\n    }\n  } else {\n    // any is needed to cover ɵproviders\n    result.push(values as any);\n  }\n\n  return result;\n};\n\nexport const mapKeys = <T>(set: Map<T, any>): T[] => {\n  const result: T[] = [];\n  // eslint-disable-next-line unicorn/no-array-for-each\n  set.forEach((_, value: T) => result.push(value));\n\n  return result;\n};\n\nexport const mapValues = <T>(set: { forEach(a1: (value: T) => void): void }, destination?: Set<T>): T[] => {\n  const result: T[] = [];\n  if (destination) {\n    // eslint-disable-next-line unicorn/no-array-for-each\n    set.forEach((value: T) => {\n      destination.add(value);\n    });\n  } else {\n    // eslint-disable-next-line unicorn/no-array-for-each\n    set.forEach((value: T) => {\n      result.push(value);\n    });\n  }\n\n  return result;\n};\n\nexport const mapEntries = <K, T>(set: Map<K, T>, destination?: Map<K, T>): Array<[K, T]> => {\n  const result: Array<[K, T]> = [];\n\n  if (destination) {\n    // eslint-disable-next-line unicorn/no-array-for-each\n    set.forEach((value: T, key: K) => destination.set(key, value));\n  } else {\n    // eslint-disable-next-line unicorn/no-array-for-each\n    set.forEach((value: T, key: K) => result.push([key, value]));\n  }\n\n  return result;\n};\n\nconst extractDependencyArray = (deps: any[], set: Set<any>): void => {\n  for (const flag of deps) {\n    const name = flag && typeof flag === 'object' ? flag.ngMetadataName : undefined;\n    if (name === 'Optional' || name === 'SkipSelf' || name === 'Self') {\n      continue;\n    }\n    set.add(flag);\n  }\n};\n\n// Accepts an array of dependencies from providers, skips injections flags,\n// and adds the providers to the set.\nexport const extractDependency = (deps: any[], set?: Set<any>): void => {\n  if (!set) {\n    return;\n  }\n  for (const dep of deps) {\n    if (!Array.isArray(dep)) {\n      set.add(dep);\n      continue;\n    }\n    extractDependencyArray(dep, set);\n  }\n};\n\nexport const extendClassicClass = <I>(base: AnyType<I>): Type<I> => {\n  let child: any;\n  const index = ngMocksUniverse.index();\n\n  const glb = funcGetGlobal();\n  glb.ngMocksParent = base;\n\n  // First we try to eval es2015 style and if it fails to use es5 transpilation in the catch block.\n  // The next step is to respect constructor parameters as the parent class via jitReflector.\n  // istanbul ignore next\n  try {\n    eval(`\n      var glb = typeof window === 'undefined' ? global : window;\n      class MockMiddleware${index} extends glb.ngMocksParent {};\n      glb.ngMocksResult = MockMiddleware${index};\n    `);\n    child = glb.ngMocksResult;\n  } catch {\n    class MockMiddleware extends glb.ngMocksParent {}\n    child = MockMiddleware;\n  } finally {\n    glb.ngMocksResult = undefined;\n    glb.ngMocksParent = undefined;\n  }\n\n  // A16: adding unique property.\n  coreDefineProperty(child.prototype, `__ngMocks_index_${index}`, undefined, false);\n\n  return child;\n};\n\nexport const extendClass = <I>(base: AnyType<I>): Type<I> => {\n  const child: Type<I> = extendClassicClass(base);\n  coreDefineProperty(child, 'name', `MockMiddleware${funcGetName(base)}`, true);\n\n  const parameters = coreReflectParametersResolve(base);\n  if (parameters.length > 0) {\n    coreDefineProperty(child, 'parameters', [...parameters]);\n  }\n\n  return child;\n};\n","import { FactoryProvider, Injector } from '@angular/core';\n\nimport { mapValues } from '../common/core.helpers';\nimport { isNgInjectionToken } from '../common/func.is-ng-injection-token';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport mockHelperStub from '../mock-helper/mock-helper.stub';\nimport mockInstanceApply from '../mock-instance/mock-instance-apply';\n\nimport { MockService } from './mock-service';\n\nconst applyCallbackToken = (def: any): boolean => isNgInjectionToken(def) || typeof def === 'string';\n\nconst applyCallback = (def: any, inst: any, callbacks: any[], injector?: Injector, overrides?: any): void => {\n  let instance: any = inst;\n\n  for (const callback of callbacks) {\n    const override = callback(instance, injector);\n    if (applyCallbackToken(def)) {\n      instance = override;\n      continue;\n    }\n\n    // overrides return real value.\n    if (callback === overrides) {\n      instance = override;\n      continue;\n    }\n\n    if (!override) {\n      continue;\n    }\n\n    instance = mockHelperStub(instance, override);\n  }\n\n  return instance;\n};\n\nexport default <D, I>(\n  def: D,\n  init?: () => I,\n  overrides?: (instance: I, injector: Injector) => I | Partial<I>,\n): FactoryProvider => ({\n  deps: [Injector],\n  provide: def,\n  useFactory: (injector?: Injector) => {\n    const instance = init ? init() : MockService(def as any);\n\n    const configGlobal: Set<any> | undefined = ngMocksUniverse.getOverrides().get(def);\n    const callbacks = configGlobal ? mapValues(configGlobal) : [];\n    if (overrides) {\n      callbacks.push(overrides);\n    }\n    callbacks.push(...mockInstanceApply(def));\n\n    return applyCallback(def, instance, callbacks, injector, overrides);\n  },\n});\n","import helperExtractPropertyDescriptor from '../mock-service/helper.extract-property-descriptor';\n\nexport default <T extends object>(\n  instance: T & { __ngMocks__source?: object },\n  key: any,\n  value: any,\n  encapsulation?: 'get' | 'set',\n): any => {\n  const def = helperExtractPropertyDescriptor(instance, key) ?? {};\n\n  if (!encapsulation && def.set && (def.set as any).__ngMocksProxy) {\n    def.set(value);\n\n    return value;\n  }\n\n  const descriptor: PropertyDescriptor = {\n    configurable: true,\n    enumerable: true,\n  };\n  if (encapsulation === 'get' && def.set) {\n    descriptor.set = def.set;\n  } else if (encapsulation === 'set' && def.get) {\n    descriptor.get = def.get;\n  }\n  if (encapsulation) {\n    descriptor[encapsulation] = value;\n  } else {\n    descriptor.writable = true;\n    descriptor.value = value;\n  }\n\n  Object.defineProperty(instance, key, descriptor);\n\n  return value;\n};\n","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nmodule.exports = x({ [\"ChangeDetectorRef\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ChangeDetectorRef), [\"Component\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Component), [\"ComponentFactoryResolver\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ComponentFactoryResolver), [\"ContentChild\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ContentChild), [\"ContentChildren\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ContentChildren), [\"DebugElement\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.DebugElement), [\"Directive\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Directive), [\"ElementRef\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ElementRef), [\"EventEmitter\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.EventEmitter), [\"InjectionToken\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.InjectionToken), [\"Injector\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Injector), [\"Input\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Input), [\"NgModule\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.NgModule), [\"Optional\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Optional), [\"Output\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Output), [\"Pipe\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Pipe), [\"QueryList\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.QueryList), [\"Self\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Self), [\"TemplateRef\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.TemplateRef), [\"ViewChild\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ViewChild), [\"ViewChildren\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ViewChildren), [\"ViewContainerRef\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ViewContainerRef), [\"ɵReflectionCapabilities\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__[\"ɵReflectionCapabilities\"]) });","import { NgModule } from '@angular/core';\n\nimport { Type } from './core.types';\n\n/**\n * NgModuleWithProviders helps to support ModuleWithProviders in all angular versions.\n * In A5 it was without the generic type.\n *\n * @internal remove after removal of A5 support\n */\nexport interface NgModuleWithProviders<T = any> {\n  ngModule: Type<T>;\n  providers?: NgModule['providers'];\n}\n\n/**\n * isNgModuleDefWithProviders checks if an object implements ModuleWithProviders.\n *\n * @internal\n */\nexport const isNgModuleDefWithProviders = (declaration: any): declaration is NgModuleWithProviders =>\n  declaration && typeof declaration === 'object' && typeof declaration.ngModule === 'function';\n","import CoreDefStack from '../common/core.def-stack';\nimport { extractDependency } from '../common/core.helpers';\nimport { NG_MOCKS_INTERCEPTORS } from '../common/core.tokens';\nimport funcExtractForwardRef from '../common/func.extract-forward-ref';\nimport funcGetType from '../common/func.get-type';\nimport { isNgInjectionToken } from '../common/func.is-ng-injection-token';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport helperMockService from './helper.mock-service';\nimport mockProvider from './mock-provider';\n\nconst anyDiffers = (a: any, b: any, ...keys: string[]): boolean => {\n  for (const key of keys) {\n    if (a[key] !== b[key]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst createFromResolution = (provide: any, resolution: any) => {\n  let mockDef = resolution;\n\n  const existingMock = ngMocksUniverse.builtProviders.get(provide);\n  if (existingMock) {\n    mockDef = existingMock;\n  }\n\n  // A case when a provider is actually a component, directive, pipe.\n  if (typeof mockDef === 'function') {\n    mockDef = {\n      provide,\n      useClass: mockDef,\n    };\n  }\n\n  return mockDef;\n};\n\nconst isSuitableProvider = (provider: any, provide: any): boolean =>\n  ngMocksUniverse.builtProviders.has(NG_MOCKS_INTERCEPTORS) &&\n  ngMocksUniverse.builtProviders.get(NG_MOCKS_INTERCEPTORS) === null &&\n  isNgInjectionToken(provide) &&\n  provide.toString() === 'InjectionToken HTTP_INTERCEPTORS' &&\n  provide !== provider;\n\nconst excludeInterceptors = (provider: any, provide: any): boolean => {\n  if (isSuitableProvider(provider, provide)) {\n    if (provider.useFactory || provider.useValue) {\n      return true;\n    }\n    const interceptor = funcExtractForwardRef(provider.useExisting) || provider.useClass;\n    if (!ngMocksUniverse.builtProviders.has(interceptor) || ngMocksUniverse.builtProviders.get(interceptor) === null) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst parseProvider = (\n  provider: any,\n  callback: any,\n): {\n  change: () => void;\n  multi: boolean;\n  provide: any;\n} => {\n  const provide = funcGetType(provider);\n  const multi = provider !== provide && !!provider.multi;\n\n  return {\n    change: () => {\n      if (callback) {\n        callback();\n      }\n    },\n    multi,\n    provide,\n  };\n};\n\n// if the provider is a value, we need to go through the value and to replace all mock instances.\nconst replaceWithMocks = (provider: any, provide: any, mockDef: any) => {\n  if (provide !== provider && mockDef && mockDef.useValue) {\n    const useValue = helperMockService.replaceWithMocks(mockDef.useValue);\n\n    return useValue === mockDef.useValue\n      ? mockDef\n      : {\n          ...mockDef,\n          useValue,\n        };\n  }\n\n  return mockDef;\n};\n\nconst createPredefinedMockProvider = (provider: any, provide: any): any => {\n  // Then we check decisions whether we should keep or replace a provider.\n  if (ngMocksUniverse.builtProviders.has(provide)) {\n    const mockDef = ngMocksUniverse.builtProviders.get(provide);\n    if (mockDef === provide) {\n      return provider;\n    }\n\n    return mockDef;\n  }\n\n  return undefined;\n};\n\nconst createMockProvider = (provider: any, provide: any, change: () => void) => {\n  let mockDef = createPredefinedMockProvider(provider, provide);\n\n  if (!mockDef && ngMocksUniverse.flags.has('skipMock') && ngMocksUniverse.getResolution(provide) !== 'mock') {\n    ngMocksUniverse.config.get('ngMocksDepsSkip')?.add(provide);\n    mockDef = provider;\n  }\n  if (!mockDef) {\n    mockDef = mockProvider(provider);\n  }\n\n  mockDef = replaceWithMocks(provider, provide, mockDef);\n  if (!areEqualDefs(mockDef, provider, provide)) {\n    change();\n  }\n  // Touching only when we really provide a value.\n  if (mockDef) {\n    ngMocksUniverse.touches.add(provide);\n  }\n\n  return mockDef;\n};\n\nconst areEqualDefs = (mockDef: any, provider: any, provide: any): boolean => {\n  let providerDiffers = false;\n  let defDiffers = !mockDef;\n  if (provider && mockDef && !defDiffers) {\n    defDiffers = anyDiffers(provider, mockDef, 'provide', 'useValue', 'useClass', 'useExisting', 'useFactory', 'deps');\n  }\n  if (provider === provide && mockDef !== provider) {\n    providerDiffers = true;\n  } else if (provider !== provide && defDiffers) {\n    providerDiffers = true;\n  }\n\n  return !providerDiffers;\n};\n\nconst isPreconfiguredDependency = (provider: any, provide: any): boolean => {\n  //  we should not touch excluded providers.\n  if (ngMocksUniverse.builtProviders.get(provide) === null) {\n    return true;\n  }\n\n  if (provide !== provider && provider.deps) {\n    extractDependency(provider.deps, ngMocksUniverse.config.get('ngMocksDeps'));\n  }\n\n  return excludeInterceptors(provider, provide);\n};\n\nconst isPreconfiguredUseExisting = (provider: any, provide: any): boolean => {\n  //  we should not touch non-useExisting providers.\n  if (!provider || typeof provider !== 'object' || !provider.useExisting) {\n    return false;\n  }\n  if (provider.useExisting.mockOf) {\n    return true;\n  }\n\n  // skipping explicit declarations (not internally processed)\n  if (ngMocksUniverse.getResolution(provide) && !ngMocksUniverse.config.get(provide)?.__internal) {\n    return false;\n  }\n\n  return ngMocksUniverse.getResolution(funcExtractForwardRef(provider.useExisting)) === 'keep';\n};\n\n// tries to resolve a provider based on current universe state.\nexport default (provider: any, resolutions: CoreDefStack<any, any>, changed?: () => void) => {\n  const { provide, multi, change } = parseProvider(provider, changed);\n  if (isPreconfiguredDependency(provider, provide)) {\n    return change();\n  }\n  if (isPreconfiguredUseExisting(provider, provide)) {\n    ngMocksUniverse.touches.add(provide);\n\n    return provider;\n  }\n  if (resolutions.has(provide)) {\n    return createFromResolution(provide, resolutions.get(provide));\n  }\n\n  const mockDef = createMockProvider(provider, provide, change);\n\n  return multi && typeof mockDef === 'object' ? { ...mockDef, multi } : mockDef;\n};\n","import { ɵReflectionCapabilities as ReflectionCapabilities } from '@angular/core';\n\nimport coreDefineProperty from '../common/core.define-property';\nimport { AnyDeclaration, DirectiveIo } from '../common/core.types';\nimport funcDirectiveIoBuild from '../common/func.directive-io-build';\nimport funcDirectiveIoParse from '../common/func.directive-io-parse';\n\ninterface Declaration {\n  host: Record<string, string | undefined>;\n  hostBindings: Array<[string, string?, ...any[]]>;\n  hostListeners: Array<[string, string?, ...any[]]>;\n  attributes: string[];\n  inputs: Array<DirectiveIo>;\n  outputs: Array<DirectiveIo>;\n  propDecorators: Record<string, any[]>;\n  queries: Record<string, any>;\n  decorators: Array<'Injectable' | 'Pipe' | 'Directive' | 'Component' | 'NgModule'>;\n  standalone?: boolean;\n  [key: string]: any;\n}\n\nconst pushDecorator = (decorators: string[], decorator: string): void => {\n  const deleteIndex = decorators.indexOf(decorator);\n  if (deleteIndex !== -1) {\n    decorators.splice(deleteIndex, 1);\n  }\n  if (\n    decorator === 'Injectable' ||\n    decorator === 'Pipe' ||\n    decorator === 'Directive' ||\n    decorator === 'Component' ||\n    decorator === 'NgModule'\n  ) {\n    decorators.push(decorator);\n  }\n};\n\nconst getAllKeys = <T extends Record<keyof any, any>>(instance: T): Array<keyof T> => {\n  const props: string[] = [];\n  for (const key of Object.keys(instance)) {\n    props.push(key);\n  }\n\n  return props as never;\n};\n\nconst createDeclarations = (parent: Partial<Declaration>): Declaration => ({\n  host: parent.host ? { ...parent.host } : {},\n  hostBindings: parent.hostBindings ? [...parent.hostBindings] : [],\n  hostListeners: parent.hostListeners ? [...parent.hostListeners] : [],\n  attributes: parent.attributes ? [...parent.attributes] : [],\n  inputs: parent.inputs ? [...parent.inputs] : [],\n  outputs: parent.outputs ? [...parent.outputs] : [],\n  propDecorators: parent.propDecorators ? { ...parent.propDecorators } : {},\n  queries: parent.queries ? { ...parent.queries } : {},\n  decorators: parent.decorators ? [...parent.decorators] : [],\n});\n\nconst parseParameters = (\n  def: {\n    __parameters__?: Array<null | Array<\n      | {\n          attributeName: string;\n          ngMetadataName: 'Attribute';\n        }\n      | {\n          token: AnyDeclaration<any>;\n          ngMetadataName: 'Inject';\n        }\n      | {\n          ngMetadataName: 'Optional';\n        }\n    >>;\n  },\n  declaration: Declaration,\n): void => {\n  if (Object.prototype.hasOwnProperty.call(def, '__parameters__') && def.__parameters__) {\n    for (const decorators of def.__parameters__) {\n      for (const decorator of decorators || []) {\n        if (\n          decorator.ngMetadataName === 'Attribute' &&\n          declaration.attributes.indexOf(decorator.attributeName) === -1\n        ) {\n          declaration.attributes.push(decorator.attributeName);\n        }\n      }\n    }\n  }\n};\n\nconst parseAnnotations = (\n  def: {\n    __annotations__?: Array<{\n      ngMetadataName?: string;\n    }>;\n  },\n  declaration: Declaration,\n): void => {\n  if (Object.prototype.hasOwnProperty.call(def, '__annotations__') && def.__annotations__) {\n    for (const annotation of def.__annotations__) {\n      const ngMetadataName = annotation?.ngMetadataName;\n      if (!ngMetadataName) {\n        continue;\n      }\n      declaration[ngMetadataName] = { ...annotation, attributes: declaration.attributes };\n      pushDecorator(declaration.decorators, ngMetadataName);\n    }\n  }\n};\n\nconst parseDecorators = (\n  def: {\n    decorators?: Array<{\n      args?: [any];\n      type?: {\n        prototype?: {\n          ngMetadataName?: string;\n        };\n      };\n    }>;\n  },\n  declaration: Declaration,\n): void => {\n  if (Object.prototype.hasOwnProperty.call(def, 'decorators') && def.decorators) {\n    for (const decorator of def.decorators) {\n      const ngMetadataName = decorator?.type?.prototype?.ngMetadataName;\n      if (!ngMetadataName) {\n        continue;\n      }\n      declaration[ngMetadataName] = decorator.args ? { ...decorator.args[0] } : {};\n      pushDecorator(declaration.decorators, ngMetadataName);\n    }\n  }\n};\n\nconst parsePropMetadataParserFactoryProp =\n  (key: 'inputs' | 'outputs') =>\n  (\n    _: string,\n    name: string,\n    decorator: {\n      alias?: string;\n      required?: boolean;\n      bindingPropertyName?: string;\n    },\n    declaration: Declaration,\n  ): void => {\n    const { alias, required } = funcDirectiveIoParse({\n      name,\n      alias: decorator.alias ?? decorator.bindingPropertyName,\n      required: decorator.required,\n    });\n\n    const normalizedDef = funcDirectiveIoBuild({ name, alias, required });\n\n    let add = true;\n    for (const def of declaration[key]) {\n      if (def === normalizedDef) {\n        add = false;\n        break;\n      }\n\n      const { name: defName, alias: defAlias, required: defRequired } = funcDirectiveIoParse(def);\n      if (defName === name && defAlias === alias && defRequired === required) {\n        add = false;\n        break;\n      }\n    }\n\n    if (add) {\n      declaration[key].unshift(normalizedDef);\n    }\n  };\nconst parsePropMetadataParserInput = parsePropMetadataParserFactoryProp('inputs');\nconst parsePropMetadataParserOutput = parsePropMetadataParserFactoryProp('outputs');\n\nconst parsePropMetadataParserFactoryQueryChild =\n  (isViewQuery: boolean) =>\n  (\n    ngMetadataName: string,\n    prop: string,\n    decorator: {\n      read?: any;\n      selector: string;\n      static?: boolean;\n    },\n    declaration: Declaration,\n  ): void => {\n    if (!declaration.queries[prop]) {\n      declaration.queries[prop] = {\n        isViewQuery,\n        ngMetadataName,\n        selector: decorator.selector,\n        ...(decorator.read === undefined ? {} : { read: decorator.read }),\n        ...(decorator.static === undefined ? {} : { static: decorator.static }),\n      };\n    }\n  };\nconst parsePropMetadataParserContentChild = parsePropMetadataParserFactoryQueryChild(false);\nconst parsePropMetadataParserViewChild = parsePropMetadataParserFactoryQueryChild(true);\n\nconst parsePropMetadataParserFactoryQueryChildren =\n  (isViewQuery: boolean) =>\n  (\n    ngMetadataName: string,\n    prop: string,\n    decorator: {\n      descendants?: any;\n      emitDistinctChangesOnly?: boolean;\n      read?: any;\n      selector: string;\n    },\n    declaration: Declaration,\n  ): void => {\n    if (!declaration.queries[prop]) {\n      declaration.queries[prop] = {\n        isViewQuery,\n        ngMetadataName,\n        selector: decorator.selector,\n        ...(decorator.descendants === undefined ? {} : { descendants: decorator.descendants }),\n        ...(decorator.emitDistinctChangesOnly === undefined\n          ? {}\n          : { emitDistinctChangesOnly: decorator.emitDistinctChangesOnly }),\n        ...(decorator.read === undefined ? {} : { read: decorator.read }),\n      };\n    }\n  };\nconst parsePropMetadataParserContentChildren = parsePropMetadataParserFactoryQueryChildren(false);\nconst parsePropMetadataParserViewChildren = parsePropMetadataParserFactoryQueryChildren(true);\n\nconst parsePropMetadataParserHostBinding = (\n  _: string,\n  prop: string,\n  decorator: {\n    args?: any;\n    hostPropertyName?: string;\n  },\n  declaration: Declaration,\n): void => {\n  const key = `[${decorator.hostPropertyName || prop}]`;\n  if (!declaration.host[key]) {\n    declaration.host[key] = prop;\n  }\n  declaration.hostBindings.push([\n    prop,\n    decorator.hostPropertyName || prop,\n    ...(decorator.args ? [decorator.args] : []),\n  ]);\n};\n\nconst parsePropMetadataParserHostListener = (\n  _: string,\n  prop: string,\n  decorator: {\n    args?: any;\n    eventName?: string;\n  },\n  declaration: Declaration,\n): void => {\n  const key = `(${decorator.eventName || prop})`;\n  if (!declaration.host[key]) {\n    declaration.host[key] = `${prop}($event)`;\n  }\n  declaration.hostListeners.push([prop, decorator.eventName || prop, ...(decorator.args ? [decorator.args] : [])]);\n};\n\nconst parsePropMetadataMap: any = {\n  ContentChild: parsePropMetadataParserContentChild,\n  ContentChildren: parsePropMetadataParserContentChildren,\n  HostBinding: parsePropMetadataParserHostBinding,\n  HostListener: parsePropMetadataParserHostListener,\n  Input: parsePropMetadataParserInput,\n  Output: parsePropMetadataParserOutput,\n  ViewChild: parsePropMetadataParserViewChild,\n  ViewChildren: parsePropMetadataParserViewChildren,\n};\n\nconst parsePropMetadata = (\n  def: {\n    __prop__metadata__?: Record<keyof any, any[]>;\n  },\n  declaration: Declaration,\n): void => {\n  if (Object.prototype.hasOwnProperty.call(def, '__prop__metadata__') && def.__prop__metadata__) {\n    for (const prop of getAllKeys(def.__prop__metadata__)) {\n      const decorators: Array<{\n        ngMetadataName?: string;\n      }> = def.__prop__metadata__[prop];\n      for (const decorator of decorators) {\n        const ngMetadataName = decorator?.ngMetadataName;\n        if (!ngMetadataName) {\n          continue;\n        }\n        parsePropMetadataMap[ngMetadataName]?.(ngMetadataName, prop, decorator, declaration);\n      }\n    }\n  }\n};\n\nconst parseNgDef = (\n  def: {\n    ɵcmp?: any;\n    ɵdir?: any;\n    ɵpipe?: any;\n  },\n  declaration: Declaration,\n): void => {\n  if (declaration.standalone === undefined && def.ɵcmp?.standalone !== undefined) {\n    declaration.standalone = def.ɵcmp.standalone;\n  }\n  if (declaration.standalone === undefined && def.ɵdir?.standalone !== undefined) {\n    declaration.standalone = def.ɵdir.standalone;\n  }\n  if (declaration.standalone === undefined && def.ɵpipe?.standalone !== undefined) {\n    declaration.standalone = def.ɵpipe.standalone;\n  }\n};\n\nconst parsePropDecoratorsParserFactoryProp = (key: 'inputs' | 'outputs') => {\n  const callback = parsePropMetadataParserFactoryProp(key);\n  return (\n    _: string,\n    name: string,\n    decorator: {\n      args?: [DirectiveIo];\n    },\n    declaration: Declaration,\n  ): void => {\n    const { alias = undefined, required = undefined } =\n      typeof decorator.args?.[0] === 'undefined'\n        ? {}\n        : typeof decorator.args[0] === 'string'\n          ? { alias: decorator.args[0] }\n          : decorator.args[0];\n    callback(_, name, { alias, required, bindingPropertyName: alias }, declaration);\n  };\n};\nconst parsePropDecoratorsParserInput = parsePropDecoratorsParserFactoryProp('inputs');\nconst parsePropDecoratorsParserOutput = parsePropDecoratorsParserFactoryProp('outputs');\n\nconst parsePropDecoratorsParserFactoryQuery =\n  (isViewQuery: boolean) =>\n  (\n    ngMetadataName: string,\n    prop: string,\n    decorator: {\n      args: [string] | [string, any];\n    },\n    declaration: Declaration,\n  ): void => {\n    if (!declaration.queries[prop]) {\n      declaration.queries[prop] = {\n        isViewQuery,\n        ngMetadataName,\n        selector: decorator.args[0],\n        ...decorator.args[1],\n      };\n    }\n  };\nconst parsePropDecoratorsParserContent = parsePropDecoratorsParserFactoryQuery(false);\nconst parsePropDecoratorsParserView = parsePropDecoratorsParserFactoryQuery(true);\n\nconst parsePropDecoratorsParserHostBinding = (\n  _: string,\n  prop: string,\n  decorator: {\n    args?: [string] | [string, any[]];\n  },\n  declaration: Declaration,\n): void => {\n  const key = `[${decorator.args?.[0] || prop}]`;\n  if (!declaration.host[key]) {\n    declaration.host[key] = prop;\n  }\n  declaration.hostBindings.push([prop, ...(decorator.args || [])]);\n};\n\nconst parsePropDecoratorsParserHostListener = (\n  _: string,\n  prop: string,\n  decorator: {\n    args?: any[];\n  },\n  declaration: Declaration,\n): void => {\n  const key = `(${decorator.args?.[0] || prop})`;\n  if (!declaration.host[key]) {\n    declaration.host[key] = `${prop}($event)`;\n  }\n  declaration.hostListeners.push([prop, ...(decorator.args || [])]);\n};\n\nconst parsePropDecoratorsMap: any = {\n  ContentChild: parsePropDecoratorsParserContent,\n  ContentChildren: parsePropDecoratorsParserContent,\n  HostBinding: parsePropDecoratorsParserHostBinding,\n  HostListener: parsePropDecoratorsParserHostListener,\n  Input: parsePropDecoratorsParserInput,\n  Output: parsePropDecoratorsParserOutput,\n  ViewChild: parsePropDecoratorsParserView,\n  ViewChildren: parsePropDecoratorsParserView,\n};\n\nconst parsePropDecorators = (\n  def: {\n    propDecorators?: Record<\n      string,\n      Array<{\n        args: any;\n        type?: {\n          prototype?: {\n            ngMetadataName?: string;\n          };\n        };\n      }>\n    >;\n  },\n  declaration: Declaration,\n): void => {\n  if (Object.prototype.hasOwnProperty.call(def, 'propDecorators') && def.propDecorators) {\n    for (const prop of getAllKeys(def.propDecorators)) {\n      declaration.propDecorators[prop] = [...(declaration.propDecorators[prop] || []), ...def.propDecorators[prop]];\n      for (const decorator of def.propDecorators[prop]) {\n        const ngMetadataName = decorator?.type?.prototype?.ngMetadataName;\n        if (!ngMetadataName) {\n          continue;\n        }\n        parsePropDecoratorsMap[ngMetadataName]?.(ngMetadataName, prop, decorator, declaration);\n      }\n    }\n  }\n};\n\nconst buildDeclaration = (def: any | undefined, declaration: Declaration): void => {\n  if (def) {\n    def.inputs = def.inputs || [];\n    for (const input of declaration.inputs) {\n      if (def.inputs.indexOf(input) === -1) {\n        def.inputs.push(input);\n      }\n    }\n\n    def.outputs = def.outputs || [];\n    for (const output of declaration.outputs) {\n      if (def.outputs.indexOf(output) === -1) {\n        def.outputs.push(output);\n      }\n    }\n\n    def.queries = {\n      ...(def.queries || []),\n      ...declaration.queries,\n    };\n\n    def.hostBindings = declaration.hostBindings;\n    def.hostListeners = declaration.hostListeners;\n    if (def.standalone === undefined) {\n      def.standalone = declaration.standalone;\n    }\n  }\n};\n\nconst reflectionCapabilities = new ReflectionCapabilities();\n\nconst parse = (def: any): any => {\n  if (typeof def !== 'function' && typeof def !== 'object') {\n    return {};\n  }\n\n  if (Object.prototype.hasOwnProperty.call(def, '__ngMocksParsed')) {\n    return def.__ngMocksDeclarations;\n  }\n\n  const parent = Object.getPrototypeOf(def);\n  const parentDeclarations = parent ? parse(parent) : {};\n  const declaration = createDeclarations(parentDeclarations);\n  coreDefineProperty(def, '__ngMocksParsed', true);\n  parseParameters(def, declaration);\n  parseAnnotations(def, declaration);\n  parseDecorators(def, declaration);\n  parsePropDecorators(def, declaration);\n  parsePropMetadata(def, declaration);\n  parseNgDef(def, declaration);\n  buildDeclaration(declaration.Directive, declaration);\n  buildDeclaration(declaration.Component, declaration);\n  buildDeclaration(declaration.Pipe, declaration);\n\n  coreDefineProperty(def, '__ngMocksDeclarations', {\n    ...parentDeclarations,\n    ...declaration,\n    parameters: reflectionCapabilities.parameters(def),\n  });\n\n  return def.__ngMocksDeclarations;\n};\n\nexport default ((): ((def: any) => Declaration) => parse)();\n","import collectDeclarations from '../resolve/collect-declarations';\n\nexport default (def: any): any[] => {\n  const declaration = collectDeclarations(def);\n\n  return declaration.parameters ?? [];\n};\n","import ngMocksUniverse from '../common/ng-mocks-universe';\nimport mockHelperStubMember from '../mock-helper/mock-helper.stub-member';\n\nexport default (def: any): any[] => {\n  const callbacks = [];\n\n  const config = ngMocksUniverse.configInstance.get(def);\n  if (config?.overloads) {\n    for (const [name, stub, encapsulation] of config.overloads) {\n      if (name) {\n        callbacks.push((instance: any) => {\n          mockHelperStubMember(instance, name, stub, encapsulation);\n        });\n      } else {\n        callbacks.push(stub);\n      }\n    }\n  }\n\n  return callbacks;\n};\n","import { InjectionToken } from '@angular/core';\nimport { MetadataOverride } from '@angular/core/testing';\n\nimport { AnyType } from './core.types';\n\n/**\n * NG_MOCKS token is a map from a declaration to its mock copy.\n *\n * @internal\n *\n * ```ts\n * const MockClass = TestBed.inject(NG_MOCKS).get(RealClass);\n * ```\n */\nexport const NG_MOCKS = new InjectionToken<Map<any, any>>('NG_MOCKS');\n(NG_MOCKS as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_TOUCHES token is a set of all touched declarations during mock process.\n *\n * @internal\n *\n * ```ts\n * const touched = TestBed.inject(NG_MOCKS_TOUCHES).has(RealClass);\n * ```\n */\nexport const NG_MOCKS_TOUCHES = new InjectionToken<Set<any>>('NG_MOCKS_TOUCHES');\n(NG_MOCKS_TOUCHES as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_OVERRIDES token contains overrides for:\n * - TestBed.overrideModule\n * - TestBed.overrideComponent\n * - TestBed.overrideDirective\n * - TestBed.overrideProvider\n *\n * It is used when there is no way to provide a mock copy and an override is required.\n * For example, if we want to keep a component, but to override one of its local providers.\n *\n * @internal\n */\nexport const NG_MOCKS_OVERRIDES = new InjectionToken<Map<AnyType<any>, MetadataOverride<any>>>('NG_MOCKS_OVERRIDES');\n(NG_MOCKS_OVERRIDES as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_GUARDS token influences on provided guards in MockBuilder.\n * More info by the links below.\n *\n * @see https://ng-mocks.sudo.eu/api/MockBuilder#ng_mocks_guards-token\n * @see https://ng-mocks.sudo.eu/guides/routing-guard\n */\nexport const NG_MOCKS_GUARDS = new InjectionToken<void>('NG_MOCKS_GUARDS');\n(NG_MOCKS_GUARDS as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_RESOLVERS token influences on provided resolvers in MockBuilder.\n * More info by the links below.\n *\n * @see https://ng-mocks.sudo.eu/api/MockBuilder#ng_mocks_resolvers-token\n * @see https://ng-mocks.sudo.eu/guides/routing-resolver\n */\nexport const NG_MOCKS_RESOLVERS = new InjectionToken<void>('NG_MOCKS_RESOLVERS');\n(NG_MOCKS_RESOLVERS as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_INTERCEPTORS token influences on provided interceptors in MockBuilder.\n * More info by the links below.\n *\n * @see https://ng-mocks.sudo.eu/api/MockBuilder#ng_mocks_interceptors-token\n * @see https://ng-mocks.sudo.eu/guides/http-interceptor\n */\nexport const NG_MOCKS_INTERCEPTORS = new InjectionToken<void>('NG_MOCKS_INTERCEPTORS');\n(NG_MOCKS_INTERCEPTORS as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_ROOT_PROVIDERS token influences on root providers in MockBuilder,\n * which aren't provided in specified modules.\n * It helps to mock or keep them automatically.\n *\n * @see https://ng-mocks.sudo.eu/api/MockBuilder#ng_mocks_root_providers-token\n */\nexport const NG_MOCKS_ROOT_PROVIDERS = new InjectionToken<void>('NG_MOCKS_ROOT_PROVIDERS');\n(NG_MOCKS_ROOT_PROVIDERS as any).__ngMocksSkip = true;\n","export default <T>(service: T): string[] => {\n  const result: string[] = [];\n  let prototype = service;\n  while (prototype && Object.getPrototypeOf(prototype) !== null) {\n    for (const prop of Object.getOwnPropertyNames(prototype)) {\n      if ((prop as any) === 'constructor') {\n        continue;\n      }\n\n      const descriptor = Object.getOwnPropertyDescriptor(prototype, prop);\n      const isGetterSetter = descriptor && (descriptor.get || descriptor.set);\n      if (!isGetterSetter || result.indexOf(prop) !== -1) {\n        continue;\n      }\n      result.push(prop);\n    }\n    prototype = Object.getPrototypeOf(prototype);\n  }\n\n  return result;\n};\n","const isAngularClass = (value: Record<keyof any, unknown>): boolean => {\n  if (value.ɵprov) {\n    return true;\n  }\n  if (value.__annotations__) {\n    return true;\n  }\n  if (value.__parameters__) {\n    return true;\n  }\n  if (value.parameters) {\n    return true;\n  }\n\n  return false;\n};\n\nconst guessClass = (name: string, proto: string, value: any): boolean => {\n  // unnamed classes can be class_N\n  if (name.match(/^class/) !== null) {\n    return true;\n  }\n\n  // let's consider an existing 'prototype' as a class\n  if (Object.keys(value.prototype).length > 0) {\n    return true;\n  }\n\n  // let's consider a capital name and 'this' usage as a class\n  const clsCode = name.codePointAt(0);\n  if (clsCode && clsCode >= 65 && clsCode <= 90 && proto.match(/\\bthis\\./gm) !== null) {\n    return true;\n  }\n\n  // webpack es5 class\n  const regEx = new RegExp(`\\\\(this,\\\\s*${name}\\\\)`, 'mg');\n  // istanbul ignore if\n  if (proto.match(regEx) !== null) {\n    return true;\n  }\n\n  return false;\n};\n\nexport default (value: any): boolean => {\n  if (typeof value !== 'function') {\n    return false;\n  }\n  if (!value.prototype) {\n    return true;\n  }\n  if (isAngularClass(value)) {\n    return false;\n  }\n\n  const proto = value.toString();\n\n  // es2015 class\n  // istanbul ignore if\n  if (proto.match(/^class\\b/) !== null) {\n    return false;\n  }\n\n  const cls = proto.match(/^function\\s+([^\\s(]+)\\(/);\n  if (cls === null) {\n    return true;\n  }\n  if (guessClass(cls[1], proto, value)) {\n    return false;\n  }\n\n  return true;\n};\n","import { AnyType } from '../common/core.types';\nimport funcGetName from '../common/func.get-name';\nimport mockHelperStub from '../mock-helper/mock-helper.stub';\n\nimport checkIsClass from './check.is-class';\nimport checkIsFunc from './check.is-func';\nimport checkIsInst from './check.is-inst';\nimport helperMockService from './helper.mock-service';\n\ntype MockServiceHandler = (cache: Map<any, any>, service: any, prefix?: string, overrides?: any) => any;\n\nconst mockVariableMap: Array<[(def: any) => boolean, MockServiceHandler]> = [\n  [\n    checkIsClass,\n    (cache, service) => {\n      const value = helperMockService.createMockFromPrototype(service.prototype);\n      cache.set(service, value);\n\n      return value;\n    },\n  ],\n  [\n    checkIsFunc,\n    (cache, service, prefix) => {\n      const value = helperMockService.mockFunction(`func:${prefix || funcGetName(service)}`);\n      cache.set(service, value());\n\n      return value;\n    },\n  ],\n  [def => Array.isArray(def), () => []],\n  [\n    checkIsInst,\n    (cache, service, prefix, callback) => {\n      const value = helperMockService.createMockFromPrototype(service.constructor.prototype);\n      cache.set(service, value);\n      for (const property of Object.keys(service)) {\n        const mock: any = callback(cache, service[property], `${prefix || 'instance'}.${property}`);\n        if (mock !== undefined) {\n          value[property] = mock;\n        }\n      }\n      Object.setPrototypeOf(value, Object.getPrototypeOf(service));\n\n      return value;\n    },\n  ],\n];\n\nconst mockVariable = (cache: Map<any, any>, service: any, prefix: string, callback: MockServiceHandler) => {\n  for (const [check, createMock] of mockVariableMap) {\n    if (!check(service)) {\n      continue;\n    }\n\n    return cache.get(service) ?? createMock(cache, service, prefix, callback);\n  }\n};\n\n/**\n * Mocking all methods / properties of a class / object.\n */\nconst mockService: MockServiceHandler = (cache, service, prefix = '', overrides): any => {\n  const value: any = mockVariable(cache, service, prefix, mockService);\n\n  if (overrides) {\n    mockHelperStub(value, overrides);\n  }\n\n  return value;\n};\n\n/**\n * MockService creates a mock instance out of an object or a class.\n * Primitives are converted to undefined.\n *\n * @see https://ng-mocks.sudo.eu/api/MockService\n */\nexport function MockService(service: boolean | number | string | null | undefined): undefined;\n\n/**\n * MockService creates a mock instance out of an object or a class.\n *\n * @see https://ng-mocks.sudo.eu/api/MockService\n *\n * ```ts\n * const service = MockService(AuthService);\n * service.login(); // does nothing, it's dummy.\n */\nexport function MockService<T>(service: AnyType<T>, spyNamePrefix?: string): T;\n\n/**\n * MockService creates a mock instance out of an object or a class.\n *\n * @see https://ng-mocks.sudo.eu/api/MockService\n *\n * ```ts\n * const mockUser = MockService(currentUser);\n * mockUser.save(); // does nothing, it's dummy.\n */\nexport function MockService<T = any>(service: object, spyNamePrefix?: string): T;\n\n/**\n * MockService creates a mock instance out of an object or a class.\n * The second parameter can be used as overrides.\n *\n * @see https://ng-mocks.sudo.eu/api/MockService\n *\n * ```ts\n * const service = MockService(AuthService, {\n *   loggedIn: true,\n * });\n * service.login(); // does nothing, it's dummy.\n * ```\n */\nexport function MockService<T>(service: AnyType<T>, overrides?: Partial<T>, spyNamePrefix?: string): T;\n\nexport function MockService(service: any, ...args: any[]): any {\n  const prefix = args.length > 0 && typeof args[0] === 'string' ? args[0] : args[1];\n  const overrides = args.length > 0 && args[0] && typeof args[0] === 'object' ? args[0] : undefined;\n\n  const cache = new Map();\n  const result = mockService(cache, service, prefix, overrides);\n  cache.clear();\n\n  return result;\n}\n","import checkIsFunc from './check.is-func';\n\nexport default (value: any): boolean => {\n  if (typeof value !== 'function') {\n    return false;\n  }\n\n  return !checkIsFunc(value);\n};\n","export default (value: any): boolean => {\n  if (value === null) {\n    return false;\n  }\n  if (typeof value !== 'object') {\n    return false;\n  }\n  if (value.ngMetadataName === 'InjectionToken') {\n    return false;\n  }\n\n  return typeof Object.getPrototypeOf(value) === 'object';\n};\n","import funcGetName from '../common/func.get-name';\n\nimport helperMockService from './helper.mock-service';\nimport { MockedFunction } from './types';\n\n// istanbul ignore next\nconst createName = (name: string, mockName?: string, instance?: any, accessType?: string) =>\n  `${mockName ?? (typeof instance.prototype === 'function' ? instance.prototype.name : funcGetName(instance))}.${name}${\n    accessType ?? ''\n  }`;\n\nconst generateMockDef = (def: any, mock: any, accessType?: string): PropertyDescriptor => ({\n  ...(accessType === 'get' && def && def.set\n    ? {\n        set: def.set,\n      }\n    : {}),\n\n  ...(accessType === 'set' && def && def.get\n    ? {\n        get: def.get,\n      }\n    : {}),\n\n  ...(accessType\n    ? {}\n    : {\n        writable: true,\n      }),\n\n  [accessType || 'value']: mock,\n  configurable: true,\n  enumerable: true,\n});\n\nconst parseArgs = (\n  args: any[],\n): {\n  accessType?: 'get' | 'set';\n  mockName?: string;\n} => {\n  let accessType: 'get' | 'set' | undefined;\n  let mockName: string | undefined;\n\n  if (args.length > 0 && args[0] !== 'get' && args[0] !== 'set') {\n    mockName = args[0];\n  } else if (args.length > 0 && (args[0] === 'get' || args[0] === 'set')) {\n    accessType = args[0];\n    mockName = args[1];\n  }\n\n  return { accessType, mockName };\n};\n\nexport default <T = MockedFunction>(instance: any, name: string, ...args: Array<string | undefined>): T => {\n  const { accessType, mockName } = parseArgs(args);\n\n  const def = Object.getOwnPropertyDescriptor(instance, name);\n  if (def && def[accessType || 'value']) {\n    return def[accessType || 'value'];\n  }\n\n  const detectedMockName = createName(name, mockName, instance, accessType);\n  const mock: any = helperMockService.mockFunction(detectedMockName, !!accessType);\n\n  const mockDef = generateMockDef(def, mock, accessType);\n  if (mockDef.get && mockDef.set && (mockDef.get as any).__ngMocks && (mockDef.set as any).__ngMocks) {\n    (mockDef.set as any).__ngMocksSet((val: any) => (mockDef.get as any).__ngMocksGet(val));\n  }\n\n  Object.defineProperty(instance, name, mockDef);\n\n  return mock;\n};\n","import coreDefineProperty from '../common/core.define-property';\n\nimport { CustomMockFunction, MockedFunction } from './types';\n\nconst mockFunction: {\n  (mockName: string, original?: boolean): MockedFunction;\n  customMockFunction?: CustomMockFunction;\n} = (mockName: string, original = false): MockedFunction => {\n  // eslint-disable-next-line unicorn/prefer-logical-operator-over-ternary\n  const func =\n    mockFunction.customMockFunction && !original\n      ? mockFunction.customMockFunction(mockName)\n      : (val: any) => {\n          if (setValue) {\n            setValue(val);\n          }\n\n          return value;\n        };\n\n  // magic to make getters / setters working\n\n  let value: any;\n  let setValue: any;\n\n  coreDefineProperty(func, '__ngMocks', true);\n  coreDefineProperty(func, '__ngMocksSet', (newSetValue: any) => (setValue = newSetValue));\n  coreDefineProperty(func, '__ngMocksGet', (newValue: any) => (value = newValue));\n\n  return func;\n};\n\nexport default (() => mockFunction)();\n","import { NG_MOCKS_GUARDS, NG_MOCKS_RESOLVERS } from '../common/core.tokens';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nconst handleSection = (section: any[]) => {\n  const guards: any[] = [];\n\n  for (const guard of section) {\n    if (!ngMocksUniverse.isProvidedDef(guard) && ngMocksUniverse.isExcludedDef(NG_MOCKS_GUARDS)) {\n      continue;\n    }\n\n    guards.push(guard);\n    if (!isNgDef(guard)) {\n      ngMocksUniverse.touches.add(guard);\n    }\n  }\n\n  return guards;\n};\n\nconst handleArray = (cache: Map<any, any>, value: any[], callback: any): [boolean, any[]] => {\n  const mock: Array<any> = [];\n  let updated = false;\n  cache.set(value, mock);\n\n  for (const valueItem of value) {\n    if (ngMocksUniverse.isExcludedDef(valueItem)) {\n      updated = updated || true;\n      continue;\n    }\n    mock.push(callback(valueItem, cache));\n    updated = updated || mock[mock.length - 1] !== valueItem;\n  }\n\n  return [updated, mock];\n};\n\nconst handleItemKeys = ['canActivate', 'canActivateChild', 'canDeactivate', 'canMatch', 'canLoad'];\nconst handleItemGetGuards = (mock: any, section: string) =>\n  Array.isArray(mock[section]) ? handleSection(mock[section]) : mock[section];\n\nconst handleItem = (\n  cache: Map<any, any>,\n  value: Record<keyof any, any>,\n  callback: any,\n): [boolean, Record<keyof any, any>] => {\n  let mock: Record<keyof any, any> = {};\n  let updated = false;\n  cache.set(value, mock);\n\n  for (const key of Object.keys(value)) {\n    if (ngMocksUniverse.isExcludedDef(value[key])) {\n      updated = updated || true;\n      continue;\n    }\n    mock[key] = callback(value[key], cache);\n    updated = updated || mock[key] !== value[key];\n  }\n\n  // Removal of guards.\n  for (const section of handleItemKeys) {\n    const guards: any[] = handleItemGetGuards(mock, section);\n    if (guards && mock[section].length !== guards.length) {\n      updated = updated || true;\n      mock = { ...mock, [section]: guards };\n    }\n  }\n\n  // Removal of resolvers.\n  if (typeof mock.resolve === 'object' && mock.resolve) {\n    const resolve: any = {};\n    let resolveUpdated = false;\n    for (const key of Object.keys(mock.resolve)) {\n      const resolver = mock.resolve[key];\n      if (!ngMocksUniverse.isProvidedDef(resolver) && ngMocksUniverse.isExcludedDef(NG_MOCKS_RESOLVERS)) {\n        resolveUpdated = resolveUpdated || true;\n        continue;\n      }\n      resolve[key] = resolver;\n      if (!isNgDef(resolver)) {\n        ngMocksUniverse.touches.add(resolver);\n      }\n    }\n    if (resolveUpdated) {\n      updated = updated || true;\n      mock = { ...mock, resolve };\n    }\n  }\n\n  return [updated, mock];\n};\n\nconst replaceWithMocks = (value: any, cache: Map<any, any>): any => {\n  if (ngMocksUniverse.cacheDeclarations.has(value)) {\n    return ngMocksUniverse.cacheDeclarations.get(value);\n  }\n  if (typeof value !== 'object') {\n    return value;\n  }\n  if (cache.has(value)) {\n    return value;\n  }\n\n  let mock: any;\n  let updated = false;\n\n  if (Array.isArray(value)) {\n    [updated, mock] = handleArray(cache, value, replaceWithMocks);\n  } else if (value) {\n    [updated, mock] = handleItem(cache, value, replaceWithMocks);\n  }\n\n  if (updated) {\n    Object.setPrototypeOf(mock, Object.getPrototypeOf(value));\n\n    return mock;\n  }\n\n  return value;\n};\n\nconst replaceWithMocksWrapper = (value: any) => {\n  const cache = new Map();\n  const result = replaceWithMocks(value, cache);\n  cache.clear();\n\n  return result;\n};\n\nexport default (() => replaceWithMocksWrapper)();\n","import funcGetGlobal from '../common/func.get-global';\n\nimport helperCreateClone from './helper.create-clone';\nimport helperCreateMockFromPrototype from './helper.create-mock-from-prototype';\nimport helperDefinePropertyDescriptor from './helper.define-property-descriptor';\nimport helperExtractMethodsFromPrototype from './helper.extract-methods-from-prototype';\nimport helperExtractPropertiesFromPrototype from './helper.extract-properties-from-prototype';\nimport helperExtractPropertyDescriptor from './helper.extract-property-descriptor';\nimport helperMock from './helper.mock';\nimport helperMockFunction from './helper.mock-function';\nimport helperReplaceWithMocks from './helper.replace-with-mocks';\nimport helperResolveProvider from './helper.resolve-provider';\nimport helperUseFactory from './helper.use-factory';\nimport { CustomMockFunction } from './types';\n\n// We need a single pointer to the object among all environments.\nfuncGetGlobal().ngMockshelperMockService = funcGetGlobal().ngMockshelperMockService || {\n  mockFunction: helperMockFunction,\n\n  registerMockFunction: (func: CustomMockFunction | undefined) => {\n    funcGetGlobal().ngMockshelperMockService.mockFunction.customMockFunction = func;\n  },\n\n  createClone: helperCreateClone,\n  createMockFromPrototype: helperCreateMockFromPrototype,\n  definePropertyDescriptor: helperDefinePropertyDescriptor,\n  extractMethodsFromPrototype: helperExtractMethodsFromPrototype,\n  extractPropertiesFromPrototype: helperExtractPropertiesFromPrototype,\n  extractPropertyDescriptor: helperExtractPropertyDescriptor,\n  mock: helperMock,\n  replaceWithMocks: helperReplaceWithMocks,\n  resolveProvider: helperResolveProvider,\n  useFactory: helperUseFactory,\n};\n\nexport default ((): {\n  createClone: typeof helperCreateClone;\n  createMockFromPrototype: typeof helperCreateMockFromPrototype;\n  definePropertyDescriptor: typeof helperDefinePropertyDescriptor;\n  extractMethodsFromPrototype: typeof helperExtractMethodsFromPrototype;\n  extractPropertiesFromPrototype: typeof helperExtractPropertiesFromPrototype;\n  extractPropertyDescriptor: typeof helperExtractPropertyDescriptor;\n  mock: typeof helperMock;\n  mockFunction: typeof helperMockFunction;\n  registerMockFunction: (func: CustomMockFunction | undefined) => void;\n  replaceWithMocks: typeof helperReplaceWithMocks;\n  resolveProvider: typeof helperResolveProvider;\n  useFactory: typeof helperUseFactory;\n} => funcGetGlobal().ngMockshelperMockService)();\n\nexport function registerMockFunction(func?: CustomMockFunction | undefined): void {\n  funcGetGlobal().ngMockshelperMockService.registerMockFunction(func);\n}\n","import coreDefineProperty from '../common/core.define-property';\nimport funcGetName from '../common/func.get-name';\n\nimport helperMockService from './helper.mock-service';\nimport { MockedFunction } from './types';\n\nexport default (service: any): { [key in keyof any]: MockedFunction } => {\n  const mockName = funcGetName(service);\n  const value: any = {};\n  coreDefineProperty(value, '__ngMocks', true);\n\n  const methods = helperMockService.extractMethodsFromPrototype(service);\n  for (const method of methods) {\n    helperMockService.mock(value, method, mockName);\n  }\n\n  const properties = helperMockService.extractPropertiesFromPrototype(service);\n  for (const property of properties) {\n    helperMockService.mock(value, property, 'get', mockName);\n    helperMockService.mock(value, property, 'set', mockName);\n  }\n  Object.setPrototypeOf(value, service);\n\n  return value;\n};\n","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nmodule.exports = x({ [\"TestBed\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_testing_89899de6__.TestBed), [\"getTestBed\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_core_testing_89899de6__.getTestBed) });","const badCharacters = new RegExp('[^0-9a-z]+', 'mgi');\n\nexport default (value: any): string => {\n  let result: string | undefined;\n\n  if (typeof value === 'function' && value.name) {\n    result = value.name;\n  } else if (typeof value === 'function') {\n    result = 'arrowFunction';\n  } else if (typeof value === 'object' && value && value.ngMetadataName === 'InjectionToken') {\n    result = value._desc;\n  } else if (typeof value === 'object' && value && typeof value.constructor === 'function') {\n    result = value.constructor.name;\n  }\n\n  result ||= 'unknown';\n\n  return result.replace(badCharacters, '_');\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import ngMocksUniverse from './ng-mocks-universe';\n\nexport interface NgMocksStack {\n  id: object;\n  level: 'root' | 'runtime';\n  mockInstance?: any[];\n}\n\ntype NgMocksStackCallback = (state: NgMocksStack, stack: NgMocksStack[]) => void;\n\nconst stackRoot: NgMocksStack = { id: {}, level: 'root' };\nconst stack: NgMocksStack[] = ngMocksUniverse.global.get('reporter-stack') || [{ ...stackRoot }];\nngMocksUniverse.global.set('reporter-stack', stack);\nconst current = () => stack[stack.length - 1];\n\n// istanbul ignore next\nconst listenersPush: NgMocksStackCallback[] = ngMocksUniverse.global.get('reporter-stack-push') ?? [];\nngMocksUniverse.global.set('reporter-stack-push', listenersPush);\n\n// istanbul ignore next\nconst listenersPop: NgMocksStackCallback[] = ngMocksUniverse.global.get('reporter-stack-pop') ?? [];\nngMocksUniverse.global.set('reporter-stack-pop', listenersPop);\n\nconst stackPush = () => {\n  const id = {};\n  ngMocksUniverse.global.set('reporter-stack-id', id);\n  const state: NgMocksStack = { id, level: 'runtime' };\n  stack.push(state);\n\n  for (const callback of listenersPush) {\n    callback(state, stack);\n  }\n};\nconst stackPop = () => {\n  const state = stack.pop();\n\n  // this code is actually needed for jest tests.\n  // istanbul ignore if\n  if (stack.length === 0) {\n    stack.push(state?.level === 'root' ? state : { ...stackRoot });\n  }\n\n  // istanbul ignore else\n  if (state && state.level !== 'root') {\n    for (const callback of listenersPop) {\n      callback(state, stack);\n    }\n  }\n\n  ngMocksUniverse.global.set('reporter-stack-id', stack[stack.length - 1].id);\n};\n\n// istanbul ignore next\nconst subscribePush = (callback: NgMocksStackCallback) => {\n  if (listenersPush.indexOf(callback)) {\n    listenersPush.push(callback);\n  }\n  if (stack.length > 0) {\n    callback(stack[stack.length - 1], stack);\n  }\n};\n\n// istanbul ignore next\nconst subscribePop = (callback: NgMocksStackCallback) => {\n  if (listenersPop.indexOf(callback) === -1) {\n    listenersPop.push(callback);\n  }\n};\n\n// istanbul ignore next\nconst unsubscribePush = (callback: NgMocksStackCallback) => {\n  const index = listenersPush.indexOf(callback);\n  if (index !== -1) {\n    listenersPush.splice(index, 1);\n  }\n};\n\n// istanbul ignore next\nconst unsubscribePop = (callback: NgMocksStackCallback) => {\n  const index = listenersPop.indexOf(callback);\n  if (index !== -1) {\n    listenersPop.splice(index, 1);\n  }\n};\n\nexport default {\n  current,\n  stackPop,\n  stackPush,\n  subscribePop,\n  subscribePush,\n  unsubscribePop,\n  unsubscribePush,\n};\n","import { MetadataOverride } from '@angular/core/testing';\n\nimport { flatten } from '../common/core.helpers';\nimport { NG_MOCKS, NG_MOCKS_OVERRIDES, NG_MOCKS_TOUCHES } from '../common/core.tokens';\nimport { AnyType } from '../common/core.types';\n\nexport default (\n  providers: any,\n): {\n  mocks?: Map<any, any>;\n  overrides?: Map<AnyType<any>, [MetadataOverride<any>, MetadataOverride<any>]>;\n  touches?: Set<any>;\n} => {\n  let mocks: Map<any, any> | undefined;\n  let overrides: Map<AnyType<any>, [MetadataOverride<any>, MetadataOverride<any>]> | undefined;\n  let touches: Set<any> | undefined;\n\n  for (const provide of flatten(providers || [])) {\n    if (typeof provide !== 'object') {\n      continue;\n    }\n    if (provide.provide === NG_MOCKS) {\n      mocks = provide.useValue;\n    }\n    if (provide.provide === NG_MOCKS_OVERRIDES) {\n      overrides = provide.useValue;\n    }\n    if (provide.provide === NG_MOCKS_TOUCHES) {\n      touches = provide.useValue;\n    }\n  }\n\n  return {\n    mocks,\n    overrides,\n    touches,\n  };\n};\n","import collectDeclarations from '../resolve/collect-declarations';\n\nimport { AnyDeclaration } from './core.types';\nimport { isNgInjectionToken } from './func.is-ng-injection-token';\nimport { NgModuleWithProviders } from './func.is-ng-module-def-with-providers';\n\n/**\n * Returns how the class has been decorated.\n * It doesn't work well, because multi decorations and extensions of decorated classes can bring strange behavior.\n * Because of that, we simply take the last decoration as the expected, if the decorator is not Injectable.\n * Services have the lowest priority.\n *\n * @internal\n *\n * ```ts\n * getNgType(MockModule); // returns 'NgModule' | 'Component' | 'Directive' | 'Pipe' | 'Injectable'\n * ```\n */\nexport const getNgType = (\n  declaration: AnyDeclaration<any> | NgModuleWithProviders<any>,\n): 'NgModule' | 'Component' | 'Directive' | 'Pipe' | 'Injectable' | undefined => {\n  if (typeof declaration === 'string') {\n    return undefined;\n  }\n  if (isNgInjectionToken(declaration)) {\n    return 'Injectable';\n  }\n\n  const { decorators } = collectDeclarations(declaration);\n\n  for (let index = decorators.length - 1; index >= 0; index -= 1) {\n    if (decorators[index] === 'Injectable') {\n      continue;\n    }\n\n    return decorators[index];\n  }\n\n  if (decorators.length > 0) {\n    return 'Injectable';\n  }\n\n  return undefined;\n};\n","import collectDeclarations from '../resolve/collect-declarations';\n\nimport { getNgType } from './func.get-ng-type';\n\n/**\n * Checks whether a class has been decorated with the standalone flag.\n */\nexport function isStandalone(declaration: any): boolean {\n  const type = getNgType(declaration);\n  if (!type || type === 'Injectable' || type === 'NgModule') {\n    return false;\n  }\n\n  return collectDeclarations(declaration)[type].standalone === true;\n}\n","import { mapEntries } from './core.helpers';\n\nexport default class<K, V> {\n  protected stack: Array<Map<K, V>> = [];\n\n  public constructor() {\n    this.push();\n  }\n\n  public push() {\n    this.stack.push(new Map());\n  }\n\n  public pop(): Map<V, V> {\n    return this.stack.pop() ?? new Map();\n  }\n\n  public has(key: K): ReturnType<Map<K, V>['has']> {\n    for (let i = this.stack.length - 1; i >= 0; i -= 1) {\n      if (this.stack[i].has(key)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public get(key: K): ReturnType<Map<K, V>['get']> {\n    for (let i = this.stack.length - 1; i >= 0; i -= 1) {\n      if (this.stack[i].has(key)) {\n        return this.stack[i].get(key);\n      }\n    }\n\n    return undefined;\n  }\n\n  public set(key: K, value: V): this {\n    for (let i = this.stack.length - 1; i >= 0; i -= 1) {\n      this.stack[i].set(key, value);\n    }\n\n    return this;\n  }\n\n  public merge(resolutions: Map<K, V>): this {\n    for (const [key, value] of mapEntries(resolutions)) {\n      this.set(key, value);\n    }\n\n    return this;\n  }\n}\n","import coreConfig from '../common/core.config';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport class MockBuilderStash {\n  protected data: Record<keyof any, any> = {};\n\n  public backup(): void {\n    this.data = {\n      builtDeclarations: ngMocksUniverse.builtDeclarations,\n      builtProviders: ngMocksUniverse.builtProviders,\n      cacheDeclarations: ngMocksUniverse.cacheDeclarations,\n      cacheProviders: ngMocksUniverse.cacheProviders,\n      config: ngMocksUniverse.config,\n      configInstance: ngMocksUniverse.configInstance,\n      flags: ngMocksUniverse.flags,\n      touches: ngMocksUniverse.touches,\n    };\n\n    ngMocksUniverse.builtDeclarations = new Map();\n    ngMocksUniverse.builtProviders = new Map();\n    ngMocksUniverse.cacheDeclarations = new Map();\n    ngMocksUniverse.cacheProviders = new Map();\n    ngMocksUniverse.config = new Map();\n    ngMocksUniverse.configInstance = new Map();\n    ngMocksUniverse.flags = new Set(coreConfig.flags);\n    ngMocksUniverse.touches = new Set();\n  }\n\n  public restore(): void {\n    for (const key of Object.keys(this.data)) {\n      (ngMocksUniverse as any)[key] = (this.data as any)[key];\n    }\n  }\n}\n","import { AnyType } from './core.types';\n\nexport default (declaration: any): undefined | AnyType<any> | string => {\n  if (!declaration || (typeof declaration !== 'object' && typeof declaration !== 'function')) {\n    return undefined;\n  }\n\n  return declaration.ɵprov?.providedIn ?? declaration.ngInjectableDef?.providedIn;\n};\n","import CoreDefStack from '../../common/core.def-stack';\nimport { extractDependency, flatten, mapValues } from '../../common/core.helpers';\nimport coreReflectProvidedIn from '../../common/core.reflect.provided-in';\nimport funcGetType from '../../common/func.get-type';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport helperResolveProvider from '../../mock-service/helper.resolve-provider';\n\nimport { BuilderData, NgMeta } from './types';\n\nexport default (ngModule: NgMeta, { providerDef, mockDef }: BuilderData, resolutions: CoreDefStack<any, any>): void => {\n  // Adding requested providers to test bed.\n  for (const provider of mapValues(providerDef)) {\n    ngModule.providers.push(provider);\n  }\n\n  // Analyzing providers.\n  for (const provider of flatten(ngModule.providers)) {\n    const provide = funcGetType(provider);\n    ngMocksUniverse.touches.add(provide);\n\n    if (provide !== provider && (provider as any).deps) {\n      extractDependency((provider as any).deps, ngMocksUniverse.config.get('ngMocksDeps'));\n    }\n  }\n\n  for (const def of mapValues(mockDef)) {\n    if (ngMocksUniverse.touches.has(def) || coreReflectProvidedIn(def) !== 'root') {\n      continue;\n    }\n\n    ngModule.providers.push(helperResolveProvider(def, resolutions));\n    ngMocksUniverse.touches.add(def);\n  }\n};\n","import { getTestBed } from '@angular/core/testing';\n\nimport { flatten } from '../../common/core.helpers';\nimport funcGetType from '../../common/func.get-type';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default () => {\n  const testBed = getTestBed();\n  // istanbul ignore else\n  if (testBed.ngModule) {\n    for (const def of flatten<any>(testBed.ngModule)) {\n      ngMocksUniverse.touches.add(funcGetType(def));\n    }\n  }\n};\n","export default (def: any): void => {\n  if (!def) {\n    throw new Error(\n      [\n        'undefined / null has been passed into ng-mocks as a declaration / provider.',\n        'Please ensure that the current test file has correct imports:',\n        'imported files exist and imported declarations have been exported in the file.',\n      ].join(' '),\n    );\n  }\n};\n","export default (def: any): boolean => {\n  if (!def) {\n    return false;\n  }\n\n  if (typeof def !== 'function' && typeof def !== 'object') {\n    return false;\n  }\n\n  if (def._isMockFunction && def.mockName && def.__annotations__) {\n    return true;\n  }\n\n  return false;\n};\n","import funcGetName from './func.get-name';\nimport funcIsJestMock from './func.is-jest-mock';\n\nexport default (def: any): void => {\n  if (funcIsJestMock(def)) {\n    throw new Error(\n      [\n        `ng-mocks got ${funcGetName(def)} which has been already mocked by jest.mock().`,\n        'It is not possible to produce correct mocks for it, because jest.mock() removes Angular decorators.',\n        `To fix this, please avoid jest.mock() on the file which exports ${funcGetName(\n          def,\n        )} or add jest.dontMock() on it.`,\n        'The same should be done for all related dependencies.',\n      ].join(' '),\n    );\n  }\n};\n","import funcGetName from './func.get-name';\n\nexport default (def: any): void => {\n  throw new Error(\n    [\n      `${funcGetName(def)} declaration has been passed into ng-mocks without Angular decorators.`,\n      'Therefore, it cannot be properly handled.',\n      'Highly likely,',\n      typeof jest === 'undefined' ? '' : /* istanbul ignore next */ 'jest.mock() has been used on its file, or',\n      'ng-mocks is imported in production code, or got a class without Angular decoration.',\n      'Otherwise, please create an issue on github: https://github.com/help-me-mom/ng-mocks/issues/new?title=False%20positive%20ng-mocks%20not%20in%20JIT.',\n      'Thank you in advance for support.',\n    ].join(' '),\n  );\n};\n","import errorEmptyDef from './error.empty-def';\nimport errorJestMock from './error.jest-mock';\nimport errorMissingDecorators from './error.missing-decorators';\n\nexport default (callback: any) => (def: any) => {\n  errorEmptyDef(def);\n\n  try {\n    return callback(def);\n  } catch {\n    errorJestMock(def);\n    errorMissingDecorators(def);\n  }\n};\n","import { Component, Directive, NgModule } from '@angular/core';\n\nimport collectDeclarations from '../resolve/collect-declarations';\n\nimport coreReflectBodyCatch from './core.reflect.body-catch';\n\nexport default (\n  def: any,\n): Directive &\n  Partial<Component> &\n  NgModule & {\n    hostBindings?: Array<[string, any]>;\n    hostListeners?: Array<[string, any, any]>;\n    imports?: any[];\n    standalone?: boolean;\n  } =>\n  coreReflectBodyCatch((arg: any) => {\n    const declaration = collectDeclarations(arg);\n    if (declaration.Component) {\n      return declaration.Component;\n    }\n    if (declaration.Directive) {\n      return declaration.Directive;\n    }\n\n    throw new Error('Cannot resolve declarations');\n  })(def);\n","import { NgModule } from '@angular/core';\n\nimport collectDeclarations from '../resolve/collect-declarations';\n\nimport coreReflectBodyCatch from './core.reflect.body-catch';\n\nexport default (def: any): NgModule =>\n  coreReflectBodyCatch((arg: any) => {\n    const declaration = collectDeclarations(arg);\n    if (declaration.NgModule) {\n      return declaration.NgModule;\n    }\n\n    throw new Error('Cannot resolve declarations');\n  })(def);\n","import coreReflectDirectiveResolve from './core.reflect.directive-resolve';\nimport coreReflectModuleResolve from './core.reflect.module-resolve';\nimport { isNgDef } from './func.is-ng-def';\n\nexport default (value: any): any => {\n  if (isNgDef(value, 'c')) {\n    return coreReflectDirectiveResolve(value);\n  }\n  if (isNgDef(value, 'd')) {\n    return coreReflectDirectiveResolve(value);\n  }\n  if (isNgDef(value, 'm')) {\n    return coreReflectModuleResolve(value);\n  }\n\n  return undefined;\n};\n","import { MockedComponent } from '../mock-component/types';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockedModule } from '../mock-module/types';\nimport { MockedPipe } from '../mock-pipe/types';\n\nimport { AnyType, Type } from './core.types';\n\n/**\n * Returns the original class of a mock module class.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getSourceOfMock\n *\n * ```ts\n * getSourceOfMock(MockModule); // returns RealModule\n * getSourceOfMock(RealModule); // returns RealModule\n * ```\n */\nexport function getSourceOfMock<T>(declaration: AnyType<MockedModule<T>>): Type<T>;\n\n/**\n * Returns the original class of a mock component class.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getSourceOfMock\n *\n * ```ts\n * getSourceOfMock(MockComponent); // returns RealComponent\n * getSourceOfMock(RealComponent); // returns RealComponent\n * ```\n */\nexport function getSourceOfMock<T>(declaration: AnyType<MockedComponent<T>>): Type<T>;\n\n/**\n * Returns the original class of a mock directive class.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getSourceOfMock\n *\n * ```ts\n * getSourceOfMock(MockDirective); // returns RealDirective\n * getSourceOfMock(RealDirective); // returns RealDirective\n * ```\n */\nexport function getSourceOfMock<T>(declaration: AnyType<MockedDirective<T>>): Type<T>;\n\n/**\n * Returns the original class of a mock pipe class.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getSourceOfMock\n *\n * ```ts\n * getSourceOfMock(MockPipe); // returns RealPipe\n * getSourceOfMock(RealPipe); // returns RealPipe\n * ```\n */\nexport function getSourceOfMock<T>(declaration: AnyType<MockedPipe<T>>): Type<T>;\n\n/**\n * Returns the original class of a mock class.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getSourceOfMock\n *\n * ```ts\n * getSourceOfMock(MockClass); // returns RealClass\n * getSourceOfMock(RealClass); // returns RealClass\n * ```\n */\nexport function getSourceOfMock<T>(declaration: AnyType<T>): Type<T>;\n\nexport function getSourceOfMock<T>(declaration: any): Type<T> {\n  return typeof declaration === 'function' && declaration.mockOf ? declaration.mockOf : declaration;\n}\n","import { getSourceOfMock } from '../common/func.get-source-of-mock';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport default (instanceDef: any, ngModuleDef?: any) => {\n  const instance = getSourceOfMock(instanceDef);\n  const configInstance = ngMocksUniverse.configInstance.get(instance) ?? { __set: true };\n  if (!configInstance.exported) {\n    configInstance.exported = new Set();\n  }\n  if (ngModuleDef) {\n    configInstance.exported.add(getSourceOfMock(ngModuleDef));\n  }\n  if (configInstance.__set) {\n    configInstance.__set = undefined;\n    ngMocksUniverse.configInstance.set(instance, configInstance);\n  }\n};\n","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"AbstractControl\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.AbstractControl), [\"DefaultValueAccessor\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.DefaultValueAccessor), [\"FormControl\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.FormControl), [\"FormControlDirective\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.FormControlDirective), [\"NG_ASYNC_VALIDATORS\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.NG_ASYNC_VALIDATORS), [\"NG_VALIDATORS\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.NG_VALIDATORS), [\"NG_VALUE_ACCESSOR\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.NG_VALUE_ACCESSOR), [\"NgControl\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.NgControl), [\"NgModel\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.NgModel) });","import * as module from '@angular/forms';\n\nconst AbstractControl = module.AbstractControl;\nconst DefaultValueAccessor = module.DefaultValueAccessor;\nconst FormControl = module.FormControl;\nconst FormControlDirective = module.FormControlDirective;\nconst NG_ASYNC_VALIDATORS = module.NG_ASYNC_VALIDATORS;\nconst NG_VALIDATORS = module.NG_VALIDATORS;\nconst NG_VALUE_ACCESSOR = module.NG_VALUE_ACCESSOR;\nconst NgControl = module.NgControl;\nconst NgModel = module.NgModel;\n\nexport default {\n  AbstractControl,\n  DefaultValueAccessor,\n  FormControl,\n  FormControlDirective,\n  NG_ASYNC_VALIDATORS,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  NgControl,\n  NgModel,\n};\n","import { Injector, TemplateRef, ViewContainerRef } from '@angular/core';\n\nimport { MockConfig } from './mock';\n\nexport default <T>(\n  value: T,\n): value is T &\n  MockConfig & {\n    __ngMocksInjector?: Injector;\n    __template?: TemplateRef<any>;\n    __vcr?: ViewContainerRef;\n  } => {\n  return value && typeof value === 'object' && !!(value as any).__ngMocks;\n};\n","import { AsyncValidator, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';\n\nimport { AnyType } from './core.types';\nimport { MockControlValueAccessor, MockValidator } from './mock-control-value-accessor';\n\nconst applyProxy = (proxy: any, method: string, value: any, storage?: string) => {\n  if (proxy.instance && storage) {\n    proxy.instance[storage] = value;\n  }\n  if (proxy.instance && proxy.instance[method]) {\n    return proxy.instance[method](value);\n  }\n};\n\nexport class MockControlValueAccessorProxy implements ControlValueAccessor {\n  public instance?: Partial<MockControlValueAccessor & ControlValueAccessor>;\n\n  public constructor(public readonly target?: AnyType<any>) {}\n\n  public registerOnChange(fn: any): void {\n    applyProxy(this, 'registerOnChange', fn, '__simulateChange');\n  }\n\n  public registerOnTouched(fn: any): void {\n    applyProxy(this, 'registerOnTouched', fn, '__simulateTouch');\n  }\n\n  public setDisabledState(isDisabled: boolean): void {\n    applyProxy(this, 'setDisabledState', isDisabled);\n  }\n\n  public writeValue(value: any): void {\n    applyProxy(this, 'writeValue', value);\n  }\n}\n\nexport class MockValidatorProxy implements Validator {\n  public instance?: Partial<MockValidator & Validator>;\n\n  public constructor(public readonly target?: AnyType<any>) {}\n\n  public registerOnValidatorChange(fn: any): void {\n    applyProxy(this, 'registerOnValidatorChange', fn, '__simulateValidatorChange');\n  }\n\n  public validate(control: any): ValidationErrors | null {\n    if (this.instance && this.instance.validate) {\n      return this.instance.validate(control);\n    }\n\n    return null;\n  }\n}\n\nexport class MockAsyncValidatorProxy implements AsyncValidator {\n  public instance?: Partial<MockValidator & AsyncValidator>;\n\n  public constructor(public readonly target?: AnyType<any>) {}\n\n  public registerOnValidatorChange(fn: any): void {\n    applyProxy(this, 'registerOnValidatorChange', fn, '__simulateValidatorChange');\n  }\n\n  public validate(control: any): any {\n    if (this.instance && this.instance.validate) {\n      const result: any = this.instance.validate(control);\n\n      return result === undefined ? Promise.resolve(null) : result;\n    }\n\n    return Promise.resolve(null);\n  }\n}\n","import { EventEmitter, Injector, Optional, PipeTransform, Self } from '@angular/core';\n\nimport { IMockBuilderConfig } from '../mock-builder/types';\nimport mockHelperStub from '../mock-helper/mock-helper.stub';\nimport mockInstanceApply from '../mock-instance/mock-instance-apply';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nimport coreDefineProperty from './core.define-property';\nimport coreForm from './core.form';\nimport { mapValues } from './core.helpers';\nimport { AnyType, DirectiveIo } from './core.types';\nimport funcDirectiveIoParse from './func.directive-io-parse';\nimport funcIsMock from './func.is-mock';\nimport { MockControlValueAccessorProxy } from './mock-control-value-accessor-proxy';\nimport ngMocksUniverse from './ng-mocks-universe';\n\nconst setValueAccessor = (instance: any, ngControl?: any) => {\n  if (ngControl && !ngControl.valueAccessor && instance.__ngMocksConfig.setControlValueAccessor) {\n    try {\n      ngControl.valueAccessor = new MockControlValueAccessorProxy(instance.__ngMocksCtor);\n    } catch {\n      // nothing to do.\n    }\n  }\n};\n\n// connecting to NG_VALUE_ACCESSOR\nconst installValueAccessor = (ngControl: any, instance: any) => {\n  if (!ngControl.valueAccessor.instance && ngControl.valueAccessor.target === instance.__ngMocksCtor) {\n    ngControl.valueAccessor.instance = instance;\n    helperMockService.mock(instance, 'registerOnChange');\n    helperMockService.mock(instance, 'registerOnTouched');\n    helperMockService.mock(instance, 'setDisabledState');\n    helperMockService.mock(instance, 'writeValue');\n    instance.__ngMocksConfig.isControlValueAccessor = true;\n  }\n};\n\n// connecting to NG_VALIDATORS\n// connecting to NG_ASYNC_VALIDATORS\nconst installValidator = (validators: any[], instance: any) => {\n  for (const validator of validators) {\n    if (!validator.instance && validator.target === instance.__ngMocksCtor) {\n      validator.instance = instance;\n      helperMockService.mock(instance, 'registerOnValidatorChange');\n      helperMockService.mock(instance, 'validate');\n      instance.__ngMocksConfig.isValidator = true;\n    }\n  }\n};\n\nconst applyNgValueAccessor = (instance: any, ngControl: any) => {\n  setValueAccessor(instance, ngControl);\n\n  try {\n    // istanbul ignore else\n    if (ngControl) {\n      installValueAccessor(ngControl, instance);\n      installValidator(ngControl._rawValidators, instance);\n      installValidator(ngControl._rawAsyncValidators, instance);\n    }\n  } catch {\n    // nothing to do.\n  }\n};\n\nconst applyOutputs = (instance: MockConfig & Record<keyof any, any>) => {\n  const mockOutputs = [];\n  for (const output of instance.__ngMocksConfig.outputs || []) {\n    mockOutputs.push(funcDirectiveIoParse(output).name);\n  }\n\n  for (const output of mockOutputs) {\n    if (instance[output] || Object.getOwnPropertyDescriptor(instance, output)) {\n      continue;\n    }\n    instance[output] = new EventEmitter<any>();\n  }\n};\n\nconst applyPrototype = (instance: Mock, prototype: AnyType<any>) => {\n  for (const prop of [\n    ...helperMockService.extractMethodsFromPrototype(prototype),\n    ...helperMockService.extractPropertiesFromPrototype(prototype),\n  ]) {\n    const descriptor = helperMockService.extractPropertyDescriptor(prototype, prop);\n    helperMockService.definePropertyDescriptor(instance, prop, descriptor);\n  }\n};\n\nconst applyMethods = (instance: Mock & Record<keyof any, any>, prototype: AnyType<any>) => {\n  for (const method of helperMockService.extractMethodsFromPrototype(prototype)) {\n    if (instance[method] || Object.getOwnPropertyDescriptor(instance, method)) {\n      continue;\n    }\n    helperMockService.mock(instance, method);\n  }\n};\n\nconst applyProps = (instance: Mock & Record<keyof any, any>, prototype: AnyType<any>) => {\n  for (const prop of helperMockService.extractPropertiesFromPrototype(prototype)) {\n    if (instance[prop] || Object.getOwnPropertyDescriptor(instance, prop)) {\n      continue;\n    }\n    helperMockService.mock(instance, prop, 'get');\n    helperMockService.mock(instance, prop, 'set');\n  }\n};\n\nexport type ngMocksMockConfig = {\n  config?: IMockBuilderConfig;\n  hostBindings?: string[];\n  hostListeners?: string[];\n  init?: (instance: any) => void;\n  isControlValueAccessor?: boolean;\n  isValidator?: boolean;\n  outputs?: Array<DirectiveIo>;\n  queryScanKeys?: string[];\n  setControlValueAccessor?: boolean;\n  transform?: PipeTransform['transform'];\n};\n\nconst applyOverrides = (instance: any, mockOf: any, injector?: Injector): void => {\n  const configGlobal: Set<any> | undefined = ngMocksUniverse.getOverrides().get(mockOf);\n  const callbacks = configGlobal ? mapValues(configGlobal) : [];\n  if (instance.__ngMocksConfig.init) {\n    callbacks.push(instance.__ngMocksConfig.init);\n  }\n  callbacks.push(...mockInstanceApply(mockOf));\n\n  for (const callback of callbacks) {\n    const overrides = callback(instance, injector);\n    if (!overrides) {\n      continue;\n    }\n    mockHelperStub(instance, overrides);\n  }\n};\n\nexport interface MockConfig {\n  __ngMocksConfig: ngMocksMockConfig;\n}\n\n/**\n * Mock class is the base class for each mock.\n * Usually, it should not be used directly.\n */\nexport class Mock {\n  protected __ngMocksConfig!: ngMocksMockConfig;\n\n  public constructor(\n    injector: Injector | null = null,\n    ngControl: any | null = null, // NgControl\n  ) {\n    const mockOf = (this.constructor as any).mockOf;\n    coreDefineProperty(this, '__ngMocks', true);\n    coreDefineProperty(this, '__ngMocksInjector', injector);\n    coreDefineProperty(this, '__ngMocksCtor', this.constructor);\n    for (const key of this.__ngMocksConfig.queryScanKeys || /* istanbul ignore next */ []) {\n      coreDefineProperty(this, `__ngMocksVcr_${key}`, undefined);\n    }\n    for (const key of this.__ngMocksConfig.hostBindings || /* istanbul ignore next */ []) {\n      helperMockService.mock(this, key, 'get');\n      helperMockService.mock(this, key, 'set');\n    }\n    for (const key of this.__ngMocksConfig.hostListeners || /* istanbul ignore next */ []) {\n      helperMockService.mock(this, key);\n    }\n\n    // istanbul ignore else\n    if (funcIsMock(this)) {\n      applyNgValueAccessor(this, ngControl);\n      applyOutputs(this);\n      applyPrototype(this, Object.getPrototypeOf(this));\n      applyMethods(this, mockOf.prototype);\n      applyProps(this, mockOf.prototype);\n    }\n\n    // and faking prototype\n    Object.setPrototypeOf(this, mockOf.prototype);\n\n    applyOverrides(this, mockOf, injector ?? undefined);\n  }\n}\n\ncoreDefineProperty(Mock, 'parameters', [\n  [Injector, new Optional()],\n  [coreForm.NgControl || /* istanbul ignore next */ (() => undefined), new Optional(), new Self()],\n]);\n","import { Mock } from './mock';\n\n/**\n * LegacyControlValueAccessor was used to be a way to manipulate a mock ControlValueAccessor.\n *\n * @deprecated use isMockControlValueAccessor or isMockValidator instead (removing in A13)\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockControlValueAccessor\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockValidator\n */\nexport class LegacyControlValueAccessor extends Mock {\n  /**\n   * @deprecated use isMockControlValueAccessor instead (removing in A13)\n   * @see https://ng-mocks.sudo.eu/api/helpers/isMockControlValueAccessor\n   */\n  public __simulateChange(value: any): void;\n  // istanbul ignore next\n  public __simulateChange() {\n    // nothing to do.\n  }\n\n  // istanbul ignore next\n  /**\n   * @deprecated use isMockControlValueAccessor instead (removing in A13)\n   * @see https://ng-mocks.sudo.eu/api/helpers/isMockControlValueAccessor\n   */\n  public __simulateTouch() {\n    // nothing to do.\n  }\n\n  // istanbul ignore next\n  /**\n   * @deprecated use isMockValidator instead (removing in A13)\n   * @see https://ng-mocks.sudo.eu/api/helpers/isMockValidator\n   */\n  public __simulateValidatorChange() {\n    // nothing to do.\n  }\n}\n\n/**\n * MockControlValueAccessor exposes access to a mock ControlValueAccessor.\n * It should be used in a combination with isMockControlValueAccessor.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockControlValueAccessor\n */\nexport interface MockControlValueAccessor {\n  /**\n   * It simulates an external change of the value.\n   * Please consider usage of ngMocks.change().\n   *\n   * @see https://ng-mocks.sudo.eu/extra/mock-form-controls\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/change\n   */\n  __simulateChange(value: any): void;\n\n  /**\n   * It simulates an external touch.\n   * Please consider usage of ngMocks.touch().\n   *\n   * @see https://ng-mocks.sudo.eu/extra/mock-form-controls\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/touch\n   */\n  __simulateTouch(): void;\n}\n\n/**\n * MockValidator exposes access to a mock Validator.\n * It should be used in a combination with isMockValidator.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockValidator\n */\nexport interface MockValidator {\n  /**\n   * it simulates an external validation change.\n   *\n   * @see https://ng-mocks.sudo.eu/extra/mock-form-controls\n   */\n  __simulateValidatorChange(): void;\n}\n","import { Input } from '@angular/core';\n\nimport { AnyType, DirectiveIo } from './core.types';\nimport funcDirectiveIoBuild from './func.directive-io-build';\nimport funcDirectiveIoParse from './func.directive-io-parse';\n\n// Looks like an A9 bug, that queries from @Component are not processed.\n// Also, we have to pass prototype, not the class.\n// The same issue happens with outputs, but time to time\n// (when I restart tests with refreshing browser manually).\n// https://github.com/help-me-mom/ng-mocks/issues/109\nexport default (cls: AnyType<any>, inputs?: Array<DirectiveIo>, exclude?: string[]) => {\n  // istanbul ignore else\n  if (inputs) {\n    for (const input of inputs) {\n      const { name, alias, required } = funcDirectiveIoParse(input);\n      if (exclude && exclude.indexOf(name) !== -1) {\n        continue;\n      }\n      Input(funcDirectiveIoBuild({ name, alias, required }, true) as never)(cls.prototype, name);\n    }\n  }\n};\n","import coreDefineProperty from './core.define-property';\nimport { AnyType } from './core.types';\nimport funcGetName from './func.get-name';\nimport { ngMocksMockConfig } from './mock';\nimport ngMocksUniverse from './ng-mocks-universe';\n\nexport default (mock: AnyType<any>, source: AnyType<any>, configInput: ngMocksMockConfig = {}): void => {\n  coreDefineProperty(mock, 'mockOf', source);\n  coreDefineProperty(mock, 'nameConstructor', funcGetName(mock));\n  coreDefineProperty(mock, 'name', `MockOf${funcGetName(source)}`, true);\n  const config = ngMocksUniverse.getConfigMock().has(source)\n    ? {\n        ...configInput,\n        config: {\n          ...ngMocksUniverse.getConfigMock().get(source),\n          ...configInput.config,\n        },\n      }\n    : configInput;\n  coreDefineProperty(mock.prototype, '__ngMocksConfig', config);\n};\n","import { Output } from '@angular/core';\n\nimport { AnyType, DirectiveIo } from './core.types';\nimport funcDirectiveIoBuild from './func.directive-io-build';\nimport funcDirectiveIoParse from './func.directive-io-parse';\n\n// Looks like an A9 bug, that queries from @Component are not processed.\n// Also, we have to pass prototype, not the class.\n// The same issue happens with outputs, but time to time\n// (when I restart tests with refreshing browser manually).\n// https://github.com/help-me-mom/ng-mocks/issues/109\nexport default (cls: AnyType<any>, outputs?: Array<DirectiveIo>) => {\n  // istanbul ignore else\n  if (outputs) {\n    for (const output of outputs) {\n      const { name, alias, required } = funcDirectiveIoParse(output);\n      Output(funcDirectiveIoBuild({ name, alias, required }, true) as never)(cls.prototype, name);\n    }\n  }\n};\n","import { ContentChild, ContentChildren, Query, ViewChild, ViewChildren, ViewContainerRef } from '@angular/core';\n\nimport { AnyType } from './core.types';\n\nconst map: any = {\n  ContentChild,\n  ContentChildren,\n  ViewChild,\n  ViewChildren,\n};\n\nconst isInternalKey = (key: string): boolean => {\n  return key.indexOf('__mock') === 0;\n};\n\nconst cloneVcrQuery = (query: Query & { ngMetadataName?: string }) => ({\n  ...query,\n  ngMetadataName: query.ngMetadataName,\n  read: ViewContainerRef,\n});\n\nconst generateFinalQueries = (queries: {\n  [key: string]: Query;\n}): [Array<[string, Query & { ngMetadataName?: string }]>, string[]] => {\n  const final: Array<[string, Query & { ngMetadataName?: string }]> = [];\n  const scanKeys: string[] = [];\n\n  for (const key of Object.keys(queries)) {\n    const query: Query & { ngMetadataName?: string } = queries[key];\n    final.push([key, query]);\n\n    if (!query.isViewQuery && !isInternalKey(key)) {\n      scanKeys.push(key);\n      final.push([`__ngMocksVcr_${key}`, cloneVcrQuery(query)]);\n    }\n  }\n\n  return [final, scanKeys];\n};\n\n// Looks like an A9 bug, that queries from @Component are not processed.\n// Also, we have to pass prototype, not the class.\n// The same issue happens with outputs, but time to time\n// (when I restart tests with refreshing browser manually).\n// https://github.com/help-me-mom/ng-mocks/issues/109\nexport default (cls: AnyType<any>, queries?: { [key: string]: Query }): string[] => {\n  // istanbul ignore if\n  if (!queries) {\n    return [];\n  }\n  const [final, keys] = generateFinalQueries(queries);\n\n  for (const [key, query] of final) {\n    // istanbul ignore else\n    if (query.ngMetadataName) {\n      const decorator = map[query.ngMetadataName];\n      decorator(query.selector, query)(cls.prototype, key);\n    }\n  }\n\n  return keys;\n};\n","import { AnyType } from '../common/core.types';\n\nexport default (provide: AnyType<any>, useExisting: AnyType<any>) => ({\n  provide,\n  useExisting,\n});\n","import { AnyType } from '../common/core.types';\n\nexport default (provide: AnyType<any>, useFactory: any) => ({\n  multi: true,\n  provide,\n  useFactory,\n});\n","import { Provider } from '@angular/core';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport coreForm from '../common/core.form';\nimport { flatten } from '../common/core.helpers';\nimport { AnyType } from '../common/core.types';\nimport funcExtractForwardRef from '../common/func.extract-forward-ref';\nimport funcGetType from '../common/func.get-type';\nimport {\n  MockAsyncValidatorProxy,\n  MockControlValueAccessorProxy,\n  MockValidatorProxy,\n} from '../common/mock-control-value-accessor-proxy';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nimport toExistingProvider from './to-existing-provider';\nimport toFactoryProvider from './to-factory-provider';\n\nconst processTokens = (mockType: AnyType<any>, provider: any) => {\n  const provide = funcGetType(provider);\n  if (coreForm.NG_VALIDATORS && provide === coreForm.NG_VALIDATORS) {\n    return toFactoryProvider(provide, () => new MockValidatorProxy(mockType));\n  }\n  if (coreForm.NG_ASYNC_VALIDATORS && provide === coreForm.NG_ASYNC_VALIDATORS) {\n    return toFactoryProvider(provide, () => new MockAsyncValidatorProxy(mockType));\n  }\n  if (coreForm.NG_VALUE_ACCESSOR && provide === coreForm.NG_VALUE_ACCESSOR) {\n    return toFactoryProvider(provide, () => new MockControlValueAccessorProxy(mockType));\n  }\n\n  return undefined;\n};\n\nconst processOwnUseExisting = (sourceType: AnyType<any>, mockType: AnyType<any>, provider: any) => {\n  const provide = funcGetType(provider);\n\n  // Check tests/issue-302/test.spec.ts\n  if (provide === coreForm.NgControl || provide === coreForm.FormControlDirective) {\n    return undefined;\n  }\n\n  if (provider !== provide && funcExtractForwardRef(provider.useExisting) === sourceType) {\n    return toExistingProvider(provide, mockType);\n  }\n\n  return undefined;\n};\n\nconst processProvider = (\n  sourceType: AnyType<any>,\n  mockType: AnyType<any>,\n  provider: any,\n  resolutions: CoreDefStack<any, any>,\n): any => {\n  const token = processTokens(mockType, provider);\n  if (token) {\n    return token;\n  }\n\n  const ownUseExisting = processOwnUseExisting(sourceType, mockType, provider);\n  if (ownUseExisting) {\n    return ownUseExisting;\n  }\n\n  return helperMockService.resolveProvider(provider, resolutions);\n};\n\nexport default (\n  sourceType: AnyType<any>,\n  mockType: AnyType<any>,\n  providers: any[],\n  resolutions: CoreDefStack<any, any>,\n): {\n  providers: Provider[];\n  setControlValueAccessor?: boolean;\n} => {\n  const result: Provider[] = [];\n  let setControlValueAccessor: boolean | undefined;\n\n  for (const provider of flatten(providers || /* istanbul ignore next */ [])) {\n    const provide = funcGetType(provider);\n    if (provide === coreForm.NG_VALUE_ACCESSOR) {\n      setControlValueAccessor = false;\n    }\n    const mock = processProvider(sourceType, mockType, provider, resolutions);\n    if (mock) {\n      result.push(mock);\n    }\n  }\n\n  return {\n    providers: result,\n    setControlValueAccessor,\n  };\n};\n","import { Component, Directive, NgModule, ViewChild } from '@angular/core';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport { AnyType, DirectiveIo } from '../common/core.types';\nimport decorateInputs from '../common/decorate.inputs';\nimport decorateMock from '../common/decorate.mock';\nimport decorateOutputs from '../common/decorate.outputs';\nimport decorateQueries from '../common/decorate.queries';\nimport { ngMocksMockConfig } from '../common/mock';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport mockNgDef from '../mock-module/mock-ng-def';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nimport cloneProviders from './clone-providers';\nimport toExistingProvider from './to-existing-provider';\n\nconst buildConfig = (\n  source: AnyType<any>,\n  meta: {\n    inputs?: Array<DirectiveIo>;\n    outputs?: Array<DirectiveIo>;\n    providers?: NgModule['providers'];\n    queries?: Record<string, ViewChild>;\n  },\n  setControlValueAccessor: boolean,\n) => {\n  return {\n    config: ngMocksUniverse.config.get(source),\n    outputs: meta.outputs,\n    queryScanKeys: [],\n    setControlValueAccessor: setControlValueAccessor,\n  };\n};\n\nexport default <T extends Component & Directive>(\n  source: AnyType<any>,\n  mock: AnyType<any>,\n  meta: Component &\n    Directive &\n    NgModule & {\n      hostBindings?: Array<[string, any]>;\n      hostListeners?: Array<[string, any, any]>;\n      hostDirectives?: Array<AnyType<any> | { directive: AnyType<any> }>;\n      imports?: any[];\n      standalone?: boolean;\n    },\n  params: T,\n): Component & Directive => {\n  const hasResolver = ngMocksUniverse.config.has('mockNgDefResolver');\n  if (!hasResolver) {\n    ngMocksUniverse.config.set('mockNgDefResolver', new CoreDefStack());\n  }\n\n  const options: T & { imports?: any[]; hostDirectives?: any[]; standalone?: boolean } = {\n    ...params,\n  };\n\n  if (meta.exportAs !== undefined) {\n    options.exportAs = meta.exportAs;\n  }\n  if (meta.selector !== undefined) {\n    options.selector = meta.selector;\n  }\n  // istanbul ignore else\n  if (meta.standalone !== undefined) {\n    options.standalone = meta.standalone;\n  }\n\n  if (meta.imports) {\n    const [, { imports }] = mockNgDef({ imports: meta.imports, skipExports: true });\n    if (imports?.length) {\n      options.imports = imports as never;\n    }\n  }\n\n  if (meta.hostDirectives) {\n    const [, { hostDirectives }] = mockNgDef({ hostDirectives: meta.hostDirectives, skipExports: true });\n    if (hostDirectives?.length) {\n      options.hostDirectives = hostDirectives;\n    }\n  }\n\n  const { setControlValueAccessor, providers } = cloneProviders(\n    source,\n    mock,\n    meta.providers || [],\n    ngMocksUniverse.config.get('mockNgDefResolver'),\n  );\n  providers.push(toExistingProvider(source, mock));\n  options.providers = providers;\n\n  const { providers: viewProviders } = cloneProviders(\n    source,\n    mock,\n    meta.viewProviders || [],\n    ngMocksUniverse.config.get('mockNgDefResolver'),\n  );\n  if (viewProviders.length > 0) {\n    options.viewProviders = viewProviders;\n  }\n\n  const config: ngMocksMockConfig = buildConfig(\n    source,\n    meta,\n    setControlValueAccessor ??\n      helperMockService.extractMethodsFromPrototype(source.prototype).indexOf('writeValue') !== -1,\n  );\n  decorateMock(mock, source, config);\n\n  // istanbul ignore else\n  if (meta.queries) {\n    decorateInputs(mock, meta.inputs, Object.keys(meta.queries));\n  }\n  decorateOutputs(mock, meta.outputs);\n  config.queryScanKeys = decorateQueries(mock, meta.queries);\n\n  config.hostBindings = [];\n  for (const [key] of meta.hostBindings || /* istanbul ignore next */ []) {\n    // mock declarations should not have side effects based on host bindings.\n    // HostBinding(...args)(mock.prototype, key);\n    if (config.hostBindings.indexOf(key) === -1) {\n      config.hostBindings.push(key);\n    }\n  }\n\n  config.hostListeners = [];\n  for (const [key] of meta.hostListeners || /* istanbul ignore next */ []) {\n    // mock declarations should not have side effects based on host bindings.\n    // HostListener(...args)(mock.prototype, key);\n    if (config.hostListeners.indexOf(key) === -1) {\n      config.hostListeners.push(key);\n    }\n  }\n\n  if (!hasResolver) {\n    ngMocksUniverse.config.delete('mockNgDefResolver');\n  }\n\n  return options;\n};\n","import funcGetName from './func.get-name';\nimport { isNgDef } from './func.is-ng-def';\n\nconst getType = (value: any): string =>\n  isNgDef(value, 'p')\n    ? 'pipe'\n    : isNgDef(value, 'd')\n      ? 'directive'\n      : isNgDef(value, 'c')\n        ? 'component'\n        : isNgDef(value, 'm')\n          ? 'module'\n          : isNgDef(value, 'i')\n            ? 'service'\n            : isNgDef(value, 't')\n              ? 'token'\n              : '';\n\nexport default (value: any, funcName: string) => {\n  if (value === undefined || value === null) {\n    throw new Error(`null / undefined has been passed into ${funcName}. Please check that its import is correct.`);\n  }\n\n  if (funcName === 'MockPipe' && isNgDef(value, 'p')) {\n    return;\n  }\n  if (funcName === 'MockDirective' && isNgDef(value, 'd')) {\n    return;\n  }\n  if (funcName === 'MockComponent' && isNgDef(value, 'c')) {\n    return;\n  }\n  if (funcName === 'MockModule' && isNgDef(value, 'm')) {\n    return;\n  }\n\n  const type = getType(value);\n\n  if (type && funcName === 'MockPipe') {\n    throw new Error(`${funcName} accepts pipes, whereas ${funcGetName(value)} is a ${type}.`);\n  }\n  if (type && funcName === 'MockDirective') {\n    throw new Error(`${funcName} accepts directives, whereas ${funcGetName(value)} is a ${type}.`);\n  }\n  if (type && funcName === 'MockComponent') {\n    throw new Error(`${funcName} accepts components, whereas ${funcGetName(value)} is a ${type}.`);\n  }\n  if (type && funcName === 'MockModule') {\n    throw new Error(`${funcName} accepts modules, whereas ${funcGetName(value)} is a ${type}.`);\n  }\n};\n","import { MockedComponent } from '../mock-component/types';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockedModule } from '../mock-module/types';\nimport { MockedPipe } from '../mock-pipe/types';\n\nimport { AnyType, Type } from './core.types';\nimport { isNgDef } from './func.is-ng-def';\n\n/**\n * isMockNgDef verifies whether a class is a mock component class.\n *\n * @internal\n *\n * ```ts\n * isMockNgDef(MockComponent, 'c'); // returns true\n * isMockNgDef(RealComponent, 'c'); // returns false\n * isMockNgDef(ArbitraryClass, 'c'); // returns false\n * ```\n */\nexport function isMockNgDef<T>(component: AnyType<T>, ngType: 'c'): component is Type<MockedComponent<T>>;\n\n/**\n * isMockNgDef verifies whether a class is a mock directive class.\n *\n * @internal\n *\n * ```ts\n * isMockNgDef(MockDirective, 'd'); // returns true\n * isMockNgDef(RealDirective, 'd'); // returns false\n * isMockNgDef(ArbitraryClass, 'd'); // returns false\n * ```\n */\nexport function isMockNgDef<T>(directive: AnyType<T>, ngType: 'd'): directive is Type<MockedDirective<T>>;\n\n/**\n * isMockNgDef verifies whether a class is a mock pipe class.\n *\n * @internal\n *\n * ```ts\n * isMockNgDef(MockPipe, 'p'); // returns true\n * isMockNgDef(RealPipe, 'p'); // returns false\n * isMockNgDef(ArbitraryClass, 'p'); // returns false\n * ```\n */\nexport function isMockNgDef<T>(pipe: AnyType<T>, ngType: 'p'): pipe is Type<MockedPipe<T>>;\n\n/**\n * isMockNgDef verifies whether a class is a mock module class.\n *\n * @internal\n *\n * ```ts\n * isMockNgDef(MockModule, 'm'); // returns true\n * isMockNgDef(RealModule, 'm'); // returns false\n * isMockNgDef(ArbitraryClass, 'm'); // returns false\n * ```\n */\nexport function isMockNgDef<T>(module: AnyType<T>, ngType: 'm'): module is Type<MockedModule<T>>;\n\n/**\n * isMockNgDef verifies whether a class is a mock class.\n *\n * @internal\n *\n * ```ts\n * isMockNgDef(MockComponent); // returns true\n * isMockNgDef(RealModule); // returns false\n * isMockNgDef(ArbitraryClass); // returns false\n * ```\n */\nexport function isMockNgDef<T>(module: Type<T>): module is Type<T>;\n\nexport function isMockNgDef<TComponent>(\n  component: AnyType<TComponent> & { mockOf?: any },\n  type?: 'c' | 'd' | 'p' | 'm',\n): component is Type<TComponent> {\n  if (!(component as any).mockOf) {\n    return false;\n  }\n  if (!type) {\n    return true;\n  }\n\n  return isNgDef(component.mockOf, type as never);\n}\n","import { ComponentFixture, getTestBed } from '@angular/core/testing';\n\nexport default () => {\n  const fixtures: Array<ComponentFixture<any>> = (getTestBed() as any)._activeFixtures;\n\n  return fixtures[fixtures.length - 1];\n};\n","import { NG_MOCKS } from '../common/core.tokens';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport funcGetLastFixture from '../mock-helper/func.get-last-fixture';\n\nexport default (declaration: any) => {\n  let result: any;\n\n  try {\n    result = funcGetLastFixture().debugElement.injector.get(NG_MOCKS).get(declaration);\n  } catch {\n    // nothing to do.\n  }\n\n  if (!result) {\n    result = ngMocksUniverse.cacheDeclarations.get(declaration);\n  }\n\n  if (declaration.__ngMocksResolutions && ngMocksUniverse.config.has('mockNgDefResolver')) {\n    ngMocksUniverse.config.get('mockNgDefResolver').merge(declaration.__ngMocksResolutions);\n  }\n\n  return result;\n};\n","import { extendClass } from '../common/core.helpers';\nimport funcImportExists from '../common/func.import-exists';\nimport { isMockNgDef } from '../common/func.is-mock-ng-def';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport returnCachedMock from './return-cached-mock';\n\nexport default (def: any, type: any, func: string, cacheFlag: string, base: any, decorator: any) => {\n  funcImportExists(def, func);\n\n  if (isMockNgDef(def, type)) {\n    return def;\n  }\n\n  if (ngMocksUniverse.flags.has(cacheFlag) && ngMocksUniverse.cacheDeclarations.has(def)) {\n    return returnCachedMock(def);\n  }\n\n  const hasNgMocksDepsResolution = ngMocksUniverse.config.has('ngMocksDepsResolution');\n  if (!hasNgMocksDepsResolution) {\n    ngMocksUniverse.config.set('ngMocksDepsResolution', new Map());\n  }\n\n  const mock = extendClass(base);\n  decorator(def, mock);\n\n  // istanbul ignore else\n  if (ngMocksUniverse.flags.has(cacheFlag)) {\n    ngMocksUniverse.cacheDeclarations.set(def, mock);\n  }\n\n  if (!hasNgMocksDepsResolution) {\n    ngMocksUniverse.config.delete('ngMocksDepsResolution');\n  }\n\n  return mock as any;\n};\n","import { Query, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';\n\nconst vcrArgs: any = { read: ViewContainerRef, static: false };\nconst trArgs: any = { read: TemplateRef, static: false };\n\nconst viewChildTemplate = (selector: string, key: string): string => {\n  const content = `<div data-${key}=\"${selector}\"><ng-template #${key}_${selector}></ng-template></div>`;\n\n  return `<ng-template #ngIf_${key}_${selector}>${content}</ng-template>`;\n};\n\nconst isTemplateRefQuery = (query: Query): boolean => {\n  if (query.isViewQuery) {\n    return false; // ignoring all internal @ViewChild\n  }\n  if (query.read && query.read !== TemplateRef) {\n    return false; // ignoring read of instances\n  }\n  if (typeof query.selector !== 'string' && !query.read) {\n    return false; // ignoring class selectors if they do not read TemplateRef\n  }\n\n  return true;\n};\n\nexport default (queries?: Record<keyof any, any>): string => {\n  const parts = ['<ng-content></ng-content>'];\n  // istanbul ignore if\n  if (!queries) {\n    return parts.join('');\n  }\n\n  for (const key of Object.keys(queries)) {\n    const query: Query = queries[key];\n    if (key.indexOf('__mock') === 0) {\n      continue;\n    }\n    if (!isTemplateRefQuery(query)) {\n      continue;\n    }\n    if (typeof query.selector === 'string') {\n      const selector = query.selector.replace(new RegExp('\\\\W', 'mg'), '_');\n      queries[`__vcrIf_key_${selector}`] = new ViewChild(`ngIf_key_${selector}`, vcrArgs);\n      queries[`__trIf_key_${selector}`] = new ViewChild(`ngIf_key_${selector}`, trArgs);\n      queries[`__mockView_key_${selector}`] = new ViewChild(`key_${selector}`, vcrArgs);\n      queries[`__mockTpl_key_${selector}`] = query;\n      parts.push(viewChildTemplate(selector, 'key'));\n    }\n    queries[`__vcrIf_prop_${key}`] = new ViewChild(`ngIf_prop_${key}`, vcrArgs);\n    queries[`__trIf_prop_${key}`] = new ViewChild(`ngIf_prop_${key}`, trArgs);\n    queries[`__mockView_prop_${key}`] = new ViewChild(`prop_${key}`, vcrArgs);\n    parts.push(viewChildTemplate(key, 'prop'));\n  }\n\n  return parts.join('');\n};\n","export default (\n  contentChildSelector: string | [string, ...number[]],\n): [string, string, string, undefined | number[]] => {\n  if (typeof contentChildSelector === 'string') {\n    return ['key', `__mockTpl_key_${contentChildSelector}`, contentChildSelector, undefined];\n  }\n\n  const [key, ...indices] = contentChildSelector;\n\n  return ['prop', key, key, indices.length > 0 ? indices : undefined];\n};\n","import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  EmbeddedViewRef,\n  Injector,\n  Optional,\n  QueryList,\n  Self,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport coreDefineProperty from '../common/core.define-property';\nimport coreForm from '../common/core.form';\nimport coreReflectDirectiveResolve from '../common/core.reflect.directive-resolve';\nimport { Type } from '../common/core.types';\nimport funcIsMock from '../common/func.is-mock';\nimport { MockConfig } from '../common/mock';\nimport { LegacyControlValueAccessor } from '../common/mock-control-value-accessor';\nimport decorateDeclaration from '../mock/decorate-declaration';\nimport getMock from '../mock/get-mock';\n\nimport generateTemplate from './render/generate-template';\nimport getKey from './render/get-key';\nimport { MockedComponent } from './types';\n\nconst mixRenderPrepareVcr = (\n  instance: MockConfig & Record<keyof any, any>,\n  type: string,\n  selector: string,\n  cdr: ChangeDetectorRef,\n): ViewContainerRef | undefined => {\n  const vcrNgIf: ViewContainerRef = instance[`__vcrIf_${type}_${selector}`];\n  const trNgIf: TemplateRef<never> = instance[`__trIf_${type}_${selector}`];\n\n  if (vcrNgIf && trNgIf && !instance[`ngMocksRender_${type}_${selector}`]) {\n    instance[`ngMocksRender_${type}_${selector}`] = vcrNgIf.createEmbeddedView(trNgIf, {});\n    cdr.detectChanges();\n  }\n\n  return instance[`__mockView_${type}_${selector}`];\n};\n\nconst mixRenderReorderViews = (\n  viewContainer: ViewContainerRef,\n  views: Array<EmbeddedViewRef<any>>,\n  index: number,\n): void => {\n  for (const view of views.splice(index + 1)) {\n    view.destroy();\n  }\n\n  let viewIndex = 0;\n  for (const view of views) {\n    if (!view) {\n      continue;\n    }\n    viewContainer.move(view, viewIndex);\n    viewIndex += 1;\n  }\n};\n\nconst mixRenderApplyContext = (view: EmbeddedViewRef<any>, context: Record<keyof any, any>): void => {\n  for (const contextKey of Object.keys(view.context)) {\n    view.context[contextKey] = undefined;\n  }\n  for (const contextKey of Object.keys(context)) {\n    view.context[contextKey] = (context as any)[contextKey];\n  }\n  view.markForCheck();\n};\n\nconst mixRenderHandleViews = (\n  vcr: ViewContainerRef,\n  cdr: ChangeDetectorRef,\n  templates: any[],\n  views: Array<EmbeddedViewRef<any>>,\n  indices: undefined | number[],\n  context: Record<keyof any, any>,\n): number => {\n  let index = -1;\n\n  for (const templateRef of templates) {\n    index += 1;\n    views[index] = views[index] || undefined;\n    if ((indices && indices.indexOf(index) === -1) || !templateRef) {\n      continue;\n    }\n    if (!(templateRef instanceof TemplateRef)) {\n      throw new Error(`Cannot find TemplateRef`);\n    }\n    if (!views[index]) {\n      views[index] = vcr.createEmbeddedView(templateRef, {});\n    }\n    mixRenderApplyContext(views[index], context);\n  }\n  cdr.detectChanges();\n\n  return index;\n};\n\nconst mixRender = (instance: MockConfig & Record<keyof any, any>, cdr: ChangeDetectorRef): void => {\n  // Providing a method to render any @ContentChild based on its selector.\n  coreDefineProperty(\n    instance,\n    '__render',\n    (contentChildSelector: string | [string, ...number[]], $implicit?: any, variables?: Record<keyof any, any>) => {\n      const [type, key, selector, indices] = getKey(contentChildSelector);\n\n      const vcr = mixRenderPrepareVcr(instance, type, selector, cdr);\n      if (!vcr) {\n        return;\n      }\n\n      const property: any = instance[key];\n      const templates = property instanceof QueryList ? property.toArray() : [property];\n\n      const views = instance[`ngMocksRender_${type}_${selector}_views`] || [];\n      const index = mixRenderHandleViews(vcr, cdr, templates, views, indices, { ...variables, $implicit });\n\n      mixRenderReorderViews(vcr, views, index);\n      instance[`ngMocksRender_${type}_${selector}_views`] = views;\n      cdr.detectChanges();\n    },\n  );\n};\n\nconst mixHideHandler = (\n  instance: MockConfig & Record<keyof any, any>,\n  type: string,\n  selector: string,\n  indices: undefined | number[],\n) => {\n  const views = instance[`ngMocksRender_${type}_${selector}_views`];\n  let index = -1;\n  for (const view of views) {\n    index += 1;\n    if ((indices && indices.indexOf(index) === -1) || !view) {\n      continue;\n    }\n    view.destroy();\n    views[index] = undefined;\n  }\n};\n\nconst mixHide = (instance: MockConfig & Record<keyof any, any>, changeDetector: ChangeDetectorRef): void => {\n  // Providing method to hide any @ContentChild based on its selector.\n  coreDefineProperty(instance, '__hide', (contentChildSelector: string | [string, ...number[]]) => {\n    const [type, , selector, indices] = getKey(contentChildSelector);\n\n    if (!instance[`ngMocksRender_${type}_${selector}`]) {\n      return;\n    }\n    mixHideHandler(instance, type, selector, indices);\n\n    if (!indices) {\n      (instance[`ngMocksRender_${type}_${selector}`] as EmbeddedViewRef<never>).destroy();\n      instance[`ngMocksRender_${type}_${selector}`] = undefined;\n    }\n    changeDetector.detectChanges();\n  });\n};\n\nclass ComponentMockBase extends LegacyControlValueAccessor implements AfterViewInit {\n  // istanbul ignore next\n  public constructor(\n    injector: Injector,\n    ngControl: any, // NgControl\n    changeDetector: ChangeDetectorRef,\n  ) {\n    super(injector, ngControl);\n    if (funcIsMock(this)) {\n      mixRender(this, changeDetector);\n      mixHide(this, changeDetector);\n    }\n  }\n\n  public ngAfterViewInit(): void {\n    const config = (this.__ngMocksConfig as any).config;\n    if (!(this as any).__rendered && config && config.render) {\n      for (const block of Object.keys(config.render)) {\n        const { $implicit, variables } =\n          config.render[block] === true\n            ? {\n                $implicit: undefined,\n                variables: {},\n              }\n            : config.render[block];\n        (this as any).__render(block, $implicit, variables);\n      }\n      (this as any).__rendered = true;\n    }\n  }\n}\n\ncoreDefineProperty(ComponentMockBase, 'parameters', [\n  [Injector],\n  [coreForm.NgControl || /* istanbul ignore next */ (() => undefined), new Optional(), new Self()],\n  [ChangeDetectorRef],\n]);\n\nconst decorateClass = (component: Type<any>, mock: Type<any>): void => {\n  const meta = coreReflectDirectiveResolve(component);\n  Component(\n    decorateDeclaration(component, mock, meta, {\n      template: generateTemplate(meta.queries),\n    }),\n  )(mock);\n};\n\n/**\n * MockComponents creates an array of mock component classes out of components passed as parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockComponent\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: MockComponents(\n *     Dep1Component,\n *     Dep2Component,\n *   ),\n * });\n * ```\n */\nexport function MockComponents(...components: Array<Type<any>>): Array<Type<MockedComponent<any>>> {\n  return components.map(MockComponent);\n}\n\n/**\n * MockComponent creates a mock component class out of an arbitrary component.\n *\n * @see https://ng-mocks.sudo.eu/api/MockComponent\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: [\n *     MockComponent(Dep1Component),\n *     MockComponent(Dep2Component),\n *   ],\n * });\n * ```\n */\nexport function MockComponent<TComponent>(component: Type<TComponent>): Type<MockedComponent<TComponent>> {\n  return getMock(component, 'c', 'MockComponent', 'cacheComponent', ComponentMockBase, decorateClass);\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  Injector,\n  OnInit,\n  Optional,\n  Self,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport coreDefineProperty from '../common/core.define-property';\nimport coreForm from '../common/core.form';\nimport coreReflectDirectiveResolve from '../common/core.reflect.directive-resolve';\nimport { Type } from '../common/core.types';\nimport { LegacyControlValueAccessor } from '../common/mock-control-value-accessor';\nimport decorateDeclaration from '../mock/decorate-declaration';\nimport getMock from '../mock/get-mock';\n\nimport { MockedDirective } from './types';\n\nclass DirectiveMockBase extends LegacyControlValueAccessor implements OnInit {\n  // istanbul ignore next\n  public constructor(\n    injector: Injector,\n    ngControl: any, // NgControl\n    cdr: ChangeDetectorRef,\n    vcr: ViewContainerRef,\n    element: ElementRef | null = null,\n    template: TemplateRef<any> | null = null,\n  ) {\n    super(injector, ngControl);\n    this.__ngMocksInstall(vcr, cdr, element, template);\n  }\n\n  public ngOnInit(): void {\n    const config = (this.__ngMocksConfig as any).config;\n    if (config?.render) {\n      const { $implicit, variables } =\n        config.render === true\n          ? {\n              $implicit: undefined,\n              variables: {},\n            }\n          : config.render;\n      (this as any).__render($implicit, variables);\n    }\n  }\n\n  private __ngMocksInstall(\n    vcr: ViewContainerRef,\n    cdr: ChangeDetectorRef,\n    element: ElementRef | null,\n    template: TemplateRef<any> | null,\n  ): void {\n    // Basically any directive on ng-template is treated as structural, even it does not control render process.\n    // In our case we do not if we should render it or not and due to this we do nothing.\n    coreDefineProperty(this, '__element', element);\n    coreDefineProperty(this, '__template', template);\n    coreDefineProperty(this, '__viewContainer', vcr);\n    coreDefineProperty(this, '__vcr', vcr);\n    coreDefineProperty(this, '__cdr', cdr);\n    coreDefineProperty(this, '__isStructural', template && vcr);\n\n    // Providing method to render mock values.\n    coreDefineProperty(this, '__render', ($implicit?: any, variables?: Record<keyof any, any>) => {\n      if (vcr && template) {\n        vcr.clear();\n        vcr.createEmbeddedView(template, { ...variables, $implicit });\n        cdr.detectChanges();\n      }\n    });\n  }\n}\n\ncoreDefineProperty(DirectiveMockBase, 'parameters', [\n  [Injector],\n  [coreForm.NgControl || /* istanbul ignore next */ (() => undefined), new Optional(), new Self()],\n  [ChangeDetectorRef],\n  [ViewContainerRef],\n  [ElementRef, new Optional(), new Self()],\n  [TemplateRef, new Optional(), new Self()],\n]);\n\nconst decorateClass = (directive: Type<any>, mock: Type<any>): void => {\n  const meta = coreReflectDirectiveResolve(directive);\n  const options = decorateDeclaration(directive, mock, meta, {});\n  Directive(options)(mock);\n};\n\n/**\n * MockDirectives creates an array of mock directive classes out of directives passed as parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockDirective\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: MockDirectives(\n *     Dep1Directive,\n *     Dep2Directive,\n *   ),\n * });\n * ```\n */\nexport function MockDirectives(...directives: Array<Type<any>>): Array<Type<MockedDirective<any>>> {\n  return directives.map(MockDirective);\n}\n\n/**\n * MockDirective creates a mock directive class out of an arbitrary directive.\n *\n * @see https://ng-mocks.sudo.eu/api/MockDirective\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: [\n *     MockDirective(Dep1Directive),\n *     MockDirective(Dep2Directive),\n *   ],\n * });\n * ```\n */\nexport function MockDirective<TDirective>(directive: Type<TDirective>): Type<MockedDirective<TDirective>> {\n  return getMock(directive, 'd', 'MockDirective', 'cacheDirective', DirectiveMockBase, decorateClass);\n}\n","import { Pipe } from '@angular/core';\n\nimport collectDeclarations from '../resolve/collect-declarations';\n\nimport coreReflectBodyCatch from './core.reflect.body-catch';\n\nexport default (def: any): Pipe & { standalone?: boolean } =>\n  coreReflectBodyCatch((arg: any) => {\n    const declaration = collectDeclarations(arg);\n    if (declaration.Pipe) {\n      return declaration.Pipe;\n    }\n\n    throw new Error('Cannot resolve declarations');\n  })(def);\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { extendClass } from '../common/core.helpers';\nimport coreReflectPipeResolve from '../common/core.reflect.pipe-resolve';\nimport { Type } from '../common/core.types';\nimport decorateMock from '../common/decorate.mock';\nimport funcGetName from '../common/func.get-name';\nimport funcImportExists from '../common/func.import-exists';\nimport { isMockNgDef } from '../common/func.is-mock-ng-def';\nimport { Mock } from '../common/mock';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport returnCachedMock from '../mock/return-cached-mock';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nimport { MockedPipe } from './types';\n\n/**\n * MockPipes creates an array of mock pipe classes out of pipes passed as parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockPipe\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: MockPipes(\n *     Dep1Pipe,\n *     Dep2Pipe,\n *   ),\n * });\n * ```\n */\nexport function MockPipes(...pipes: Array<Type<PipeTransform>>): Array<Type<PipeTransform>> {\n  return pipes.map(pipe => MockPipe(pipe, undefined));\n}\n\nconst getMockClass = (pipe: Type<any>, transformValue?: PipeTransform['transform']): Type<any> => {\n  const config = ngMocksUniverse.config.get(pipe);\n  const transform = transformValue ?? config?.defValue?.transform;\n  const mock = extendClass(Mock);\n  Pipe(coreReflectPipeResolve(pipe))(mock);\n  decorateMock(mock, pipe, {\n    init: (instance: PipeTransform) => {\n      if (transform) {\n        instance.transform = transform;\n      }\n      if (!instance.transform) {\n        helperMockService.mock(instance, 'transform', `${funcGetName(instance)}.transform`);\n      }\n    },\n    transform,\n  });\n\n  return mock;\n};\n\n/**\n * MockPipe creates a mock pipe class out of an arbitrary pipe.\n *\n * @see https://ng-mocks.sudo.eu/api/MockPipe\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: [\n *     MockPipe(Dep1Pipe),\n *     MockPipe(Dep2Pipe),\n *   ],\n * });\n * ```\n */\nexport function MockPipe<TPipe extends PipeTransform>(\n  pipe: Type<TPipe>,\n  transform?: TPipe['transform'],\n): Type<MockedPipe<TPipe>>;\n\nexport function MockPipe<TPipe extends PipeTransform>(\n  pipe: Type<TPipe>,\n  transform?: TPipe['transform'],\n): Type<MockedPipe<TPipe>> {\n  funcImportExists(pipe, 'MockPipe');\n\n  if (isMockNgDef(pipe, 'p')) {\n    return pipe;\n  }\n\n  // istanbul ignore next\n  if (ngMocksUniverse.flags.has('cachePipe') && ngMocksUniverse.cacheDeclarations.has(pipe)) {\n    return returnCachedMock(pipe);\n  }\n\n  const mock = getMockClass(pipe, transform);\n  if (ngMocksUniverse.flags.has('cachePipe')) {\n    ngMocksUniverse.cacheDeclarations.set(pipe, mock);\n  }\n\n  return mock as any;\n}\n","import { NgModule } from '@angular/core';\n\nimport coreConfig from '../common/core.config';\nimport coreDefineProperty from '../common/core.define-property';\nimport { extendClass } from '../common/core.helpers';\nimport coreReflectModuleResolve from '../common/core.reflect.module-resolve';\nimport { AnyType, Type } from '../common/core.types';\nimport decorateMock from '../common/decorate.mock';\nimport funcGetName from '../common/func.get-name';\nimport funcImportExists from '../common/func.import-exists';\nimport { isMockNgDef } from '../common/func.is-mock-ng-def';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport { isNgModuleDefWithProviders, NgModuleWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport { Mock } from '../common/mock';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport returnCachedMock from '../mock/return-cached-mock';\n\nimport mockNgDef from './mock-ng-def';\n\nconst flagMock = (resolution?: string): boolean => resolution === 'mock' && ngMocksUniverse.flags.has('skipMock');\n\nconst flagKeep = (resolution?: string): boolean => resolution === 'keep' && !ngMocksUniverse.flags.has('skipMock');\n\nconst flagReplace = (resolution?: string): boolean =>\n  resolution === 'replace' && !ngMocksUniverse.flags.has('skipMock');\n\nconst flagNever = (ngModule?: any): boolean =>\n  coreConfig.neverMockModule.indexOf(funcGetName(ngModule)) !== -1 && !ngMocksUniverse.flags.has('skipMock');\n\nconst preProcessFlags = (ngModule: AnyType<any>): { isRootModule: boolean; toggleSkipMockFlag: boolean } => {\n  let toggleSkipMockFlag = false;\n  let isRootModule = true;\n\n  if (ngMocksUniverse.flags.has('hasRootModule')) {\n    isRootModule = false;\n  } else {\n    ngMocksUniverse.flags.add('hasRootModule');\n  }\n\n  const resolution = ngMocksUniverse.getResolution(ngModule);\n  if (flagMock(resolution)) {\n    toggleSkipMockFlag = true;\n    ngMocksUniverse.flags.delete('skipMock');\n  }\n  if (flagNever(ngModule)) {\n    toggleSkipMockFlag = true;\n    ngMocksUniverse.flags.add('skipMock');\n  }\n  if (!isRootModule && (flagKeep(resolution) || flagReplace(resolution))) {\n    toggleSkipMockFlag = true;\n    ngMocksUniverse.flags.add('skipMock');\n  }\n\n  return {\n    isRootModule,\n    toggleSkipMockFlag,\n  };\n};\n\nconst postProcessFlags = ({\n  isRootModule,\n  toggleSkipMockFlag,\n}: {\n  isRootModule: boolean;\n  toggleSkipMockFlag: boolean;\n}): void => {\n  if (toggleSkipMockFlag && ngMocksUniverse.flags.has('skipMock')) {\n    ngMocksUniverse.flags.delete('skipMock');\n  } else if (toggleSkipMockFlag && !ngMocksUniverse.flags.has('skipMock')) {\n    ngMocksUniverse.flags.add('skipMock');\n  }\n  if (isRootModule) {\n    ngMocksUniverse.flags.delete('hasRootModule');\n  }\n};\n\nconst extractModuleAndProviders = (\n  module: any,\n): {\n  ngModule: Type<any>;\n  ngModuleProviders: NgModule['providers'];\n} => {\n  let ngModule: Type<any>;\n  let ngModuleProviders: NgModule['providers'];\n\n  if (isNgModuleDefWithProviders(module)) {\n    ngModule = module.ngModule;\n    if (module.providers) {\n      ngModuleProviders = module.providers;\n    }\n  } else {\n    ngModule = module;\n  }\n\n  return {\n    ngModule,\n    ngModuleProviders,\n  };\n};\n\nconst getExistingMockModule = (ngModule: Type<any>, isRootModule: boolean): Type<any> | undefined => {\n  if (isMockNgDef(ngModule, 'm')) {\n    return ngModule;\n  }\n\n  // Every module should be replaced with its mock copy only once to avoid errors like:\n  // Failed: Type ...Component is part of the declarations of 2 modules: ...Module and ...Module...\n  if (ngMocksUniverse.flags.has('cacheModule') && ngMocksUniverse.cacheDeclarations.has(ngModule)) {\n    return returnCachedMock(ngModule);\n  }\n\n  // Now we check if we need to keep the original module or to replace it with some other.\n  // and there is no override in its resolution.\n  if (isRootModule || ngMocksUniverse.config.get('ngMocksDepsResolution')?.get(ngModule) === 'mock') {\n    return undefined;\n  }\n  if (ngMocksUniverse.hasBuildDeclaration(ngModule)) {\n    const instance = ngMocksUniverse.getBuildDeclaration(ngModule);\n    if (isNgDef(instance, 'm') && instance !== ngModule) {\n      return instance;\n    }\n  }\n\n  return undefined;\n};\n\nconst detectMockModule = (ngModule: Type<any>, mockModule?: Type<any>): Type<any> => {\n  const [changed, ngModuleDef, resolutions] = mockModule\n    ? [false]\n    : mockNgDef(coreReflectModuleResolve(ngModule), ngModule);\n  if (resolutions) {\n    coreDefineProperty(ngModule, '__ngMocksResolutions', resolutions);\n  }\n\n  if (changed) {\n    const parent = ngMocksUniverse.flags.has('skipMock') ? ngModule : Mock;\n    const mock = extendClass(parent);\n\n    // the last thing is to apply decorators.\n    NgModule(ngModuleDef)(mock);\n    decorateMock(mock, ngModule);\n\n    return mock;\n  }\n\n  return mockModule || ngModule;\n};\n\nconst getMockProviders = (ngModuleProviders: NgModule['providers']): NgModule['providers'] => {\n  if (ngModuleProviders) {\n    const [changed, ngModuleDef] = mockNgDef({ providers: ngModuleProviders, skipExports: true });\n\n    return changed ? ngModuleDef.providers : ngModuleProviders;\n  }\n\n  return undefined;\n};\n\nconst generateReturn = (\n  module: any,\n  ngModule: AnyType<any>,\n  ngModuleProviders: NgModule['providers'],\n  mockModule: AnyType<any>,\n  mockModuleProviders: NgModule['providers'],\n): any =>\n  mockModule === ngModule && mockModuleProviders === ngModuleProviders\n    ? module\n    : isNgModuleDefWithProviders(module)\n      ? { ngModule: mockModule, ...(mockModuleProviders ? { providers: mockModuleProviders } : {}) }\n      : mockModule;\n\n/**\n * MockModule creates a mock module class out of an arbitrary module.\n * All declarations, imports, exports and providers will be mocked too.\n *\n * @see https://ng-mocks.sudo.eu/api/MockModule\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   imports: [\n *     MockModule(SharedModule),\n *   ],\n * });\n * ```\n */\nexport function MockModule<T>(ngModule: Type<T>): Type<T>;\n\n/**\n * MockModule creates a mock module class with mock provides out of an arbitrary module with providers.\n * All declarations, imports, exports and providers will be mocked too.\n *\n * @see https://ng-mocks.sudo.eu/api/MockModule\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   imports: [\n *     MockModule(StoreModule.forRoot()),\n *   ],\n * });\n * ```\n */\nexport function MockModule<T>(ngModule: NgModuleWithProviders<T>): NgModuleWithProviders<T>;\n\nexport function MockModule(def: any): any {\n  funcImportExists(def, 'MockModule');\n\n  const { ngModule, ngModuleProviders } = extractModuleAndProviders(def);\n  const flags = preProcessFlags(ngModule);\n  try {\n    const mockModule = detectMockModule(ngModule, getExistingMockModule(ngModule, flags.isRootModule));\n    // istanbul ignore else\n    if (ngMocksUniverse.flags.has('cacheModule')) {\n      ngMocksUniverse.cacheDeclarations.set(ngModule, mockModule);\n    }\n    if (ngMocksUniverse.flags.has('skipMock')) {\n      ngMocksUniverse.config.get('ngMocksDepsSkip')?.add(mockModule);\n    }\n    const mockModuleProviders = getMockProviders(ngModuleProviders);\n\n    return generateReturn(def, ngModule, ngModuleProviders, mockModule, mockModuleProviders);\n  } finally {\n    postProcessFlags(flags);\n  }\n}\n","import { Provider } from '@angular/core';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport funcGetType from '../common/func.get-type';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport { isNgModuleDefWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport { MockComponent } from '../mock-component/mock-component';\nimport { MockDirective } from '../mock-directive/mock-directive';\nimport { MockPipe } from '../mock-pipe/mock-pipe';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nimport { MockModule } from './mock-module';\n\nconst processDefMap: Array<[any, any]> = [\n  ['c', MockComponent],\n  ['d', MockDirective],\n  ['p', MockPipe],\n];\n\nconst processDef = (def: any) => {\n  if (isNgDef(def, 'm') || isNgModuleDefWithProviders(def)) {\n    return MockModule(def as any);\n  }\n  if (ngMocksUniverse.hasBuildDeclaration(def)) {\n    return ngMocksUniverse.getBuildDeclaration(def);\n  }\n  if (ngMocksUniverse.flags.has('skipMock') && ngMocksUniverse.getResolution(def) !== 'mock') {\n    return def;\n  }\n  for (const [flag, func] of processDefMap) {\n    if (isNgDef(def, flag)) {\n      return func(def);\n    }\n  }\n};\n\n// resolveProvider is a special case because of the def structure.\nconst createResolveProvider =\n  (resolutions: CoreDefStack<any, any>, change: () => void): ((def: Provider) => any) =>\n  (def: Provider) =>\n    helperMockService.resolveProvider(def, resolutions, change);\n\nconst createResolveWithProviders = (def: any, mockDef: any): boolean =>\n  isNgModuleDefWithProviders(mockDef) && isNgModuleDefWithProviders(def);\n\nconst createResolveExisting = (\n  def: any,\n  resolutions: CoreDefStack<any, any>,\n  change: (flag?: boolean) => void,\n): any => {\n  const mockDef = resolutions.get(def);\n  if (def !== mockDef) {\n    change();\n  }\n\n  return mockDef;\n};\n\nconst createResolveExcluded = (\n  def: any,\n  resolutions: CoreDefStack<any, any>,\n  change: (flag?: boolean) => void,\n): void => {\n  resolutions.set(def, undefined);\n\n  change();\n};\n\nconst createResolve =\n  (resolutions: CoreDefStack<any, any>, change: (flag?: boolean) => void): ((def: any) => any) =>\n  (def: any) => {\n    if (resolutions.has(def)) {\n      return createResolveExisting(def, resolutions, change);\n    }\n\n    const detectedDef = funcGetType(def);\n    if (ngMocksUniverse.isExcludedDef(detectedDef)) {\n      return createResolveExcluded(def, resolutions, change);\n    }\n    ngMocksUniverse.touches.add(detectedDef);\n\n    const mockDef = processDef(def);\n    if (createResolveWithProviders(def, mockDef)) {\n      resolutions.set(def.ngModule, mockDef.ngModule);\n    }\n    if (ngMocksUniverse.flags.has('skipMock')) {\n      ngMocksUniverse.config.get('ngMocksDepsSkip')?.add(mockDef);\n    }\n    resolutions.set(def, mockDef);\n    change(mockDef !== def);\n\n    return mockDef;\n  };\n\nexport default (\n  change: () => void,\n  resolutions: CoreDefStack<any, any>,\n): {\n  resolve: (def: any) => any;\n  resolveProvider: (def: Provider) => any;\n} => {\n  const resolve = createResolve(resolutions, change);\n  const resolveProvider = createResolveProvider(resolutions, change);\n\n  return {\n    resolve,\n    resolveProvider,\n  };\n};\n","import { flatten } from '../common/core.helpers';\nimport funcGetType from '../common/func.get-type';\nimport markExported from '../mock/mark-exported';\n\nexport default (providers?: any[]): void => {\n  for (const provider of flatten(providers ?? [])) {\n    const instance = funcGetType(provider);\n    markExported(instance);\n  }\n};\n","import { NgModule, Provider } from '@angular/core';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport { flatten } from '../common/core.helpers';\nimport { dependencyKeys, Type } from '../common/core.types';\nimport funcGetType from '../common/func.get-type';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport markExported from '../mock/mark-exported';\n\nimport createResolvers from './create-resolvers';\nimport markProviders from './mark-providers';\n\nconst flatToExisting = <T, R>(data: T | T[], callback: (arg: T) => R | undefined): R[] =>\n  flatten(data)\n    .map(callback)\n    .filter((item): item is R => !!item);\n\nconst configureProcessMetaKeys = (\n  resolve: (def: any) => any,\n  resolveProvider: (def: Provider) => any,\n): Array<[dependencyKeys, (def: any) => any]> => [\n  ['declarations', resolve],\n  [\n    'hostDirectives',\n    <T>(data: T) => {\n      const def = funcGetType(data);\n      const directive = resolve(def);\n      return directive === def\n        ? data\n        : data == def\n          ? directive\n          : {\n              ...data,\n              directive,\n            };\n    },\n  ],\n  ['imports', resolve],\n  ['entryComponents', resolve],\n  ['bootstrap', resolve],\n  ['providers', resolveProvider],\n  ['viewProviders', resolveProvider],\n  ['exports', resolve],\n  ['schemas', v => v],\n];\n\nconst processMeta = <\n  T extends Partial<Record<dependencyKeys, any>> & {\n    skipMarkProviders?: boolean;\n  },\n>(\n  ngModule: T,\n  resolve: (def: any) => any,\n  resolveProvider: (def: Provider) => any,\n): Partial<T> => {\n  const mockModuleDef: Partial<T> = {};\n  const keys = configureProcessMetaKeys(resolve, resolveProvider);\n\n  const cachePipe = ngMocksUniverse.flags.has('cachePipe');\n  if (!cachePipe) {\n    ngMocksUniverse.flags.add('cachePipe');\n  }\n  for (const [key, callback] of keys) {\n    if (ngModule[key]?.length) {\n      mockModuleDef[key] = flatToExisting(ngModule[key], callback);\n    }\n  }\n  if (!ngModule.skipMarkProviders) {\n    markProviders(mockModuleDef.providers);\n    markProviders(mockModuleDef.viewProviders);\n  }\n\n  if (!cachePipe) {\n    ngMocksUniverse.flags.delete('cachePipe');\n  }\n\n  return mockModuleDef;\n};\n\nconst resolveDefForExport = (\n  def: any,\n  resolve: (def: any) => any,\n  correctExports: boolean,\n  ngModule?: Type<any>,\n): Type<any> | undefined => {\n  const moduleConfig = ngMocksUniverse.config.get(ngModule) || {};\n  const instance = funcGetType(def);\n  const mockDef = resolve(instance);\n  if (!mockDef) {\n    return undefined;\n  }\n\n  // If we export a declaration, then we have to export its module too.\n  const config = ngMocksUniverse.config.get(instance);\n  if (config?.export && ngModule && !moduleConfig.export) {\n    ngMocksUniverse.config.set(ngModule, {\n      ...moduleConfig,\n      export: true,\n    });\n  }\n\n  if (correctExports && !moduleConfig.exportAll && !config?.export) {\n    return undefined;\n  }\n\n  markExported(instance, ngModule);\n\n  return mockDef;\n};\n\nconst skipAddExports = (mockDef: any, mockModuleDef: NgModule): mockDef is undefined =>\n  !mockDef || (!!mockModuleDef.exports && mockModuleDef.exports.indexOf(mockDef) !== -1);\n\n// if we are in the skipMock mode we need to export only the default exports.\n// if we are in the correctModuleExports mode we need to export only default exports.\nconst addExports = (\n  resolve: (def: any) => any,\n  change: () => void,\n  ngModuleDef: NgModule,\n  mockModuleDef: NgModule,\n  ngModule?: Type<any>,\n): void => {\n  const correctExports = ngMocksUniverse.flags.has('skipMock') || ngMocksUniverse.flags.has('correctModuleExports');\n  for (const def of flatten([ngModuleDef.imports || [], ngModuleDef.declarations || []])) {\n    const mockDef = resolveDefForExport(def, resolve, correctExports, ngModule);\n    if (skipAddExports(mockDef, mockModuleDef)) {\n      continue;\n    }\n\n    change();\n    mockModuleDef.exports = mockModuleDef.exports || [];\n    mockModuleDef.exports.push(mockDef);\n  }\n};\n\nexport default <\n  T extends NgModule & {\n    hostDirectives?: Array<any>;\n    skipMarkProviders?: boolean;\n    skipExports?: boolean;\n  },\n>(\n  ngModuleDef: T,\n  ngModule?: Type<any>,\n): [boolean, Partial<T>, Map<any, any>] => {\n  const hasResolver = ngMocksUniverse.config.has('mockNgDefResolver');\n  if (!hasResolver) {\n    ngMocksUniverse.config.set('mockNgDefResolver', new CoreDefStack());\n  }\n  ngMocksUniverse.config.get('mockNgDefResolver').push();\n\n  let changed = !ngMocksUniverse.flags.has('skipMock');\n  const change = (flag = true) => {\n    changed = changed || flag;\n  };\n  const { resolve, resolveProvider } = createResolvers(change, ngMocksUniverse.config.get('mockNgDefResolver'));\n  const mockModuleDef = processMeta(ngModuleDef, resolve, resolveProvider);\n  if (!ngModuleDef.skipExports) {\n    addExports(resolve, change, ngModuleDef, mockModuleDef, ngModule);\n  }\n  for (const def of ngModule && mockModuleDef.exports ? (flatten(mockModuleDef.exports) as Array<any>) : []) {\n    markExported(def, ngModule);\n  }\n\n  const resolutions = ngMocksUniverse.config.get('mockNgDefResolver').pop();\n  if (!hasResolver) {\n    ngMocksUniverse.config.delete('mockNgDefResolver');\n  }\n\n  return [changed, mockModuleDef, resolutions];\n};\n","import { Directive, NgModule } from '@angular/core';\n\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport mockNgDef from '../../mock-module/mock-ng-def';\n\nexport default (meta?: Directive | NgModule): NgModule | undefined => {\n  if (!meta) {\n    return undefined;\n  }\n\n  const skipMock = ngMocksUniverse.flags.has('skipMock');\n  // istanbul ignore else\n  if (!skipMock) {\n    ngMocksUniverse.flags.add('skipMock');\n  }\n  const [changed, def] = mockNgDef(meta);\n  // istanbul ignore else\n  if (!skipMock) {\n    ngMocksUniverse.flags.delete('skipMock');\n  }\n  if (!changed) {\n    return undefined;\n  }\n\n  return def;\n};\n","import ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport { BuilderData } from './types';\n\nexport default (\n  replaceDef: BuilderData['replaceDef'],\n  defValue: BuilderData['defValue'],\n  source: any,\n  value: any,\n): boolean => {\n  // no reason to touch mocks\n  if (ngMocksUniverse.cacheDeclarations.has(value)) {\n    return true;\n  }\n\n  // no customizations in replacements\n  if (replaceDef.has(source) && value === defValue.get(source)) {\n    return true;\n  }\n\n  return false;\n};\n","import { ValueProvider } from '@angular/core';\nimport { MetadataOverride } from '@angular/core/testing';\n\nimport { mapValues } from '../../common/core.helpers';\nimport coreReflectMeta from '../../common/core.reflect.meta';\nimport { NG_MOCKS_OVERRIDES } from '../../common/core.tokens';\nimport { Type } from '../../common/core.types';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport getOverrideDef from './get-override-def';\nimport skipOverride from './skip-override';\n\nexport default (replaceDef: Set<any>, defValue: Map<any, any>): ValueProvider => {\n  const overrides: Map<Type<any>, [MetadataOverride<any>, MetadataOverride<any>]> = new Map();\n  for (const proto of mapValues(ngMocksUniverse.touches)) {\n    const source: any = proto;\n    const value = ngMocksUniverse.getBuildDeclaration(source) || source;\n    if (skipOverride(replaceDef, defValue, source, value)) {\n      continue;\n    }\n\n    const original = coreReflectMeta(value);\n    const override = getOverrideDef(original);\n    if (!override) {\n      continue;\n    }\n\n    // We need to delete standalone, because Angular was too lazy to check whether it has been really changed.\n    const patchedOriginal: Partial<typeof original> = {};\n    for (const key of Object.keys(override)) {\n      patchedOriginal[key] = original[key];\n    }\n\n    overrides.set(value, [{ set: override }, { set: patchedOriginal }]);\n  }\n\n  return {\n    provide: NG_MOCKS_OVERRIDES,\n    useValue: overrides,\n  };\n};\n","import { ValueProvider } from '@angular/core';\n\nimport { mapEntries } from '../../common/core.helpers';\nimport { NG_MOCKS } from '../../common/core.tokens';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (): ValueProvider => {\n  const mocks = new Map();\n  for (const [key, value] of [\n    ...mapEntries(ngMocksUniverse.builtProviders),\n    ...mapEntries(ngMocksUniverse.builtDeclarations),\n    ...mapEntries(ngMocksUniverse.cacheDeclarations),\n    ...mapEntries(ngMocksUniverse.cacheProviders),\n  ]) {\n    if (mocks.has(key)) {\n      continue;\n    }\n    mocks.set(key, value);\n  }\n\n  return {\n    provide: NG_MOCKS,\n    useValue: mocks,\n  };\n};\n","import { ValueProvider } from '@angular/core';\n\nimport { mapValues } from '../../common/core.helpers';\nimport { NG_MOCKS_TOUCHES } from '../../common/core.tokens';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (): ValueProvider => {\n  // Redefining providers for kept declarations.\n  const touches = new Set();\n  for (const proto of mapValues(ngMocksUniverse.touches)) {\n    const source: any = proto;\n    let value = ngMocksUniverse.getBuildDeclaration(source);\n\n    // kept declarations should be based on their source.\n    if (value === undefined) {\n      value = source;\n    }\n\n    touches.add(source);\n    touches.add(value);\n  }\n\n  return {\n    provide: NG_MOCKS_TOUCHES,\n    useValue: touches,\n  };\n};\n","import { ComponentFactoryResolver, NgModule, Optional } from '@angular/core';\n\nimport coreDefineProperty from '../../common/core.define-property';\nimport { extendClass } from '../../common/core.helpers';\nimport { NG_MOCKS } from '../../common/core.tokens';\nimport { isNgDef } from '../../common/func.is-ng-def';\nimport helperCreateClone from '../../mock-service/helper.create-clone';\n\nimport { NgMeta } from './types';\n\nclass EntryComponentsModule {\n  public constructor(map: Map<any, any>, componentFactoryResolver?: ComponentFactoryResolver) {\n    // istanbul ignore if\n    if (!componentFactoryResolver) {\n      return;\n    }\n\n    const originCFR = componentFactoryResolver.resolveComponentFactory;\n    componentFactoryResolver.resolveComponentFactory = helperCreateClone(\n      originCFR,\n      undefined,\n      undefined,\n      (component: any, ...args: any[]) =>\n        originCFR.apply(componentFactoryResolver, [map.get(component) ?? component, ...args] as any),\n    );\n  }\n}\ncoreDefineProperty(EntryComponentsModule, 'parameters', [[NG_MOCKS], [ComponentFactoryResolver, new Optional()]]);\n\nclass IvyModule {}\nNgModule()(IvyModule);\n\nexport default (ngModule: NgMeta): void => {\n  const entryComponents: any[] = [];\n  for (const declaration of ngModule.declarations) {\n    if (isNgDef(declaration, 'c')) {\n      entryComponents.push(declaration);\n    }\n  }\n  // the way to cause entryComponents to do its work\n  const entryModule = extendClass(EntryComponentsModule);\n  NgModule({\n    // Ivy knows how to make any component an entry point,\n    // but we still would like to patch resolveComponentFactory in order to provide mocks.\n    // ɵmod is added only if Ivy has been enabled.\n    entryComponents: (IvyModule as any).ɵmod ? [] : /* istanbul ignore next */ entryComponents,\n  } as never)(entryModule);\n  ngModule.imports.push(entryModule);\n};\n","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"DOCUMENT\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_common_d12e0fe1__.DOCUMENT) });","import { DOCUMENT } from '@angular/common';\n\nimport coreConfig from '../../common/core.config';\nimport coreReflectProvidedIn from '../../common/core.reflect.provided-in';\nimport { isNgInjectionToken } from '../../common/func.is-ng-injection-token';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nconst skipResolution = (provide: any): boolean | undefined => {\n  const resolution = ngMocksUniverse.getResolution(provide);\n  if (resolution === 'keep' || resolution === 'exclude') {\n    return true;\n  }\n  if (resolution === 'mock') {\n    return false;\n  }\n\n  return undefined;\n};\n\nconst skipSystem = (provide: any): boolean => {\n  if (!provide || provide === DOCUMENT || ngMocksUniverse.touches.has(provide)) {\n    return true;\n  }\n  const skipByResolution = skipResolution(provide);\n  if (skipByResolution !== undefined) {\n    return skipByResolution;\n  }\n\n  if (typeof provide === 'function' && coreConfig.neverMockProvidedFunction.indexOf(provide.name) !== -1) {\n    return true;\n  }\n  // istanbul ignore if because we mock BrowserModule\n  if (isNgInjectionToken(provide) && coreConfig.neverMockToken.indexOf(provide.toString()) !== -1) {\n    return true;\n  }\n\n  return false;\n};\n\n// Checks if we should avoid mocking of the provider.\nexport default (provide: any): boolean => {\n  if (skipSystem(provide)) {\n    return true;\n  }\n\n  // Empty providedIn or things for a platform have to be skipped.\n  const providedIn = coreReflectProvidedIn(provide);\n  const skip = !providedIn || providedIn === 'platform';\n  if (typeof provide === 'function' && skip) {\n    return true;\n  }\n\n  return false;\n};\n","import { NG_MOCKS_ROOT_PROVIDERS } from '../../common/core.tokens';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport skipDep from './skip-dep';\nimport { BuilderData } from './types';\n\nexport default (parameters: Set<any>, mockDef: BuilderData['mockDef'], def: any): void => {\n  if (\n    !skipDep(def) &&\n    (mockDef.has(NG_MOCKS_ROOT_PROVIDERS) || !ngMocksUniverse.config.get('ngMocksDepsSkip').has(def))\n  ) {\n    parameters.add(def);\n  }\n};\n","export default (provide: any, bucket: any[], touched: any[]): void => {\n  if (typeof provide === 'function' && touched.indexOf(provide) === -1) {\n    touched.push(provide);\n    bucket.push(provide);\n  }\n};\n","import funcExtractForwardRef from '../../common/func.extract-forward-ref';\n\n// Extracts dependency among flags of parameters.\nexport default (decorators?: any[]): any => {\n  if (!decorators) {\n    return;\n  }\n\n  let provide: any;\n  for (const decorator of decorators) {\n    if (decorator && typeof decorator === 'object' && decorator.token) {\n      provide = decorator.token;\n    }\n    if (!provide && decorator && (typeof decorator !== 'object' || !decorator.ngMetadataName)) {\n      provide = decorator;\n    }\n  }\n\n  return funcExtractForwardRef(provide);\n};\n","import { mapValues } from '../../common/core.helpers';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (): {\n  buckets: any[];\n  touched: any[];\n} => {\n  // We need buckets here to process first all depsSkip, then deps and only after that all other defs.\n  const buckets: any[] = [\n    mapValues(ngMocksUniverse.config.get('ngMocksDepsSkip')),\n    mapValues(ngMocksUniverse.config.get('ngMocksDeps')),\n    mapValues(ngMocksUniverse.touches),\n  ];\n\n  // Also, we need to track what has been touched to check params recursively, but avoiding duplicates.\n  const touched: any[] = [].concat(...buckets);\n\n  return {\n    buckets,\n    touched,\n  };\n};\n","import coreReflectProvidedIn from '../../common/core.reflect.provided-in';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (provide: any): void => {\n  if (ngMocksUniverse.touches.has(provide)) {\n    return;\n  }\n\n  const providedIn = coreReflectProvidedIn(provide);\n  if (!providedIn) {\n    return;\n  }\n\n  if (ngMocksUniverse.config.get('ngMocksDepsSkip').has(providedIn)) {\n    ngMocksUniverse.config.get('ngMocksDepsSkip').add(provide);\n  }\n};\n","import ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport skipDep from './skip-dep';\n\nexport default (provide: any): boolean => {\n  if (skipDep(provide)) {\n    return true;\n  }\n\n  return ngMocksUniverse.config.get('ngMocksDepsSkip').has(provide);\n};\n","import coreReflectParametersResolve from '../../common/core.reflect.parameters-resolve';\nimport { NG_MOCKS_ROOT_PROVIDERS } from '../../common/core.tokens';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport addDefToRootProviderParameters from './add-def-to-root-provider-parameters';\nimport checkRootProviderDependency from './check-root-provider-dependency';\nimport extractDep from './extract-dep';\nimport getRootProvidersData from './get-root-providers-data';\nimport handleProvidedInDependency from './handle-provided-in-dependency';\nimport skipRootProviderDependency from './skip-root-provider-dependency';\nimport { BuilderData } from './types';\n\nexport default (mockDef: BuilderData['mockDef']): Set<any> => {\n  const parameters = new Set();\n  const { buckets, touched } = getRootProvidersData();\n\n  for (const bucket of buckets) {\n    for (const def of bucket) {\n      addDefToRootProviderParameters(parameters, mockDef, def);\n\n      for (const decorators of coreReflectParametersResolve(def)) {\n        const provide: any = extractDep(decorators);\n        handleProvidedInDependency(provide);\n        if (skipRootProviderDependency(provide)) {\n          continue;\n        }\n        checkRootProviderDependency(provide, touched, bucket);\n        if (mockDef.has(NG_MOCKS_ROOT_PROVIDERS) || !ngMocksUniverse.config.get('ngMocksDepsSkip').has(def)) {\n          parameters.add(provide);\n        } else {\n          ngMocksUniverse.config.get('ngMocksDepsSkip').add(provide);\n        }\n      }\n    }\n  }\n\n  return parameters;\n};\n","import CoreDefStack from '../../common/core.def-stack';\nimport { mapValues } from '../../common/core.helpers';\nimport { NG_MOCKS_ROOT_PROVIDERS } from '../../common/core.tokens';\nimport { isNgInjectionToken } from '../../common/func.is-ng-injection-token';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport helperResolveProvider from '../../mock-service/helper.resolve-provider';\nimport helperUseFactory from '../../mock-service/helper.use-factory';\n\nimport getRootProviderParameters from './get-root-provider-parameters';\nimport { BuilderData, NgMeta } from './types';\n\n// Mocking root providers.\nexport default (ngModule: NgMeta, { keepDef, mockDef }: BuilderData, resolutions: CoreDefStack<any, any>): void => {\n  // Adding missed providers.\n  const parameters = keepDef.has(NG_MOCKS_ROOT_PROVIDERS) ? new Set() : getRootProviderParameters(mockDef);\n  if (parameters.size > 0) {\n    for (const parameter of mapValues(parameters)) {\n      const mock = helperResolveProvider(parameter, resolutions);\n      if (mock) {\n        ngModule.providers.push(mock);\n      } else if (isNgInjectionToken(parameter)) {\n        const multi =\n          ngMocksUniverse.config.has('ngMocksMulti') && ngMocksUniverse.config.get('ngMocksMulti').has(parameter);\n        ngModule.providers.push(helperUseFactory(parameter, () => (multi ? [] : undefined)));\n      }\n    }\n  }\n};\n","import { ModuleWithProviders } from '@angular/core';\n\nimport { Type } from '../../common/core.types';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport { BuilderData } from './types';\n\nexport default (def: Type<any>, defProviders: BuilderData['defProviders']): Type<any> | ModuleWithProviders<any> => {\n  const loModule = ngMocksUniverse.config.get('mockNgDefResolver').get(def) ?? ngMocksUniverse.getBuildDeclaration(def);\n  const loProviders = defProviders.has(def) ? defProviders.get(def) : undefined;\n\n  return loProviders\n    ? {\n        ngModule: loModule,\n        providers: loProviders,\n      }\n    : loModule;\n};\n","import { flatten, mapValues } from '../../common/core.helpers';\nimport coreReflectProvidedIn from '../../common/core.reflect.provided-in';\nimport { AnyDeclaration, Type } from '../../common/core.types';\nimport errorJestMock from '../../common/error.jest-mock';\nimport funcGetName from '../../common/func.get-name';\nimport funcGetType from '../../common/func.get-type';\nimport { isNgDef } from '../../common/func.is-ng-def';\nimport { isNgInjectionToken } from '../../common/func.is-ng-injection-token';\nimport { isStandalone } from '../../common/func.is-standalone';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport markExported from '../../mock/mark-exported';\nimport markProviders from '../../mock-module/mark-providers';\n\nimport initModule from './init-module';\nimport { BuilderData, NgMeta } from './types';\n\nconst skipDef = (def: any): boolean =>\n  ngMocksUniverse.touches.has(def) || isNgDef(def) || isNgInjectionToken(def) || typeof def === 'string';\n\nconst handleDef = ({ imports, declarations, providers }: NgMeta, def: any, defProviders: Map<any, any>): void => {\n  if (!skipDef(def)) {\n    errorJestMock(def);\n  }\n\n  let touched = false;\n\n  if (isNgDef(def, 'm')) {\n    const extendedDef = initModule(def, defProviders);\n    imports.push(extendedDef);\n    touched = true;\n\n    // adding providers to touches\n    if (typeof extendedDef === 'object' && extendedDef.providers) {\n      for (const provider of flatten(extendedDef.providers)) {\n        ngMocksUniverse.touches.add(funcGetType(provider));\n      }\n    }\n  }\n\n  if (isNgDef(def, 'c') || isNgDef(def, 'd') || isNgDef(def, 'p')) {\n    (isStandalone(def) ? imports : declarations).push(ngMocksUniverse.getBuildDeclaration(def));\n    touched = true;\n  }\n\n  if (isNgDef(def, 'i') || !isNgDef(def)) {\n    const mock = ngMocksUniverse.builtProviders.get(def);\n    if (mock && typeof mock !== 'string' && isNgDef(mock, 't') === false) {\n      providers.push(mock);\n      touched = true;\n    }\n  }\n\n  if (touched) {\n    markExported(def);\n    ngMocksUniverse.touches.add(def);\n  }\n};\n\nconst isExportedOnRoot = (\n  def: any,\n  configInstance: Map<any, { exported?: Set<any> }>,\n  configDef: Map<any, any>,\n): undefined | Type<any> => {\n  const cnfInstance = configInstance.get(def);\n  const cnfDef = configDef.get(def) || /* istanbul ignore next */ {};\n\n  if (isNgDef(def, 'm') && cnfDef.onRoot) {\n    return def;\n  }\n\n  if (!cnfInstance?.exported) {\n    return def;\n  }\n\n  for (const parent of mapValues(cnfInstance.exported)) {\n    const returnModule = isExportedOnRoot(parent, configInstance, configDef);\n    // istanbul ignore else\n    if (returnModule) {\n      return returnModule;\n    }\n  }\n\n  return undefined;\n};\n\nconst moveModulesUp = <T>(a: T, b: T) => {\n  const isA = isNgDef(a, 'm');\n  const isB = isNgDef(b, 'm');\n  if (isA && isB) {\n    return 0;\n  }\n  if (isA) {\n    return -1;\n  }\n  if (isB) {\n    return 1;\n  }\n  return 0;\n};\n\nexport default ({ configDefault, keepDef, mockDef, replaceDef }: BuilderData, defProviders: Map<any, any>): NgMeta => {\n  const meta: NgMeta = { imports: [], declarations: [], providers: [] };\n\n  const processed: AnyDeclaration<any>[] = [];\n  const forgotten: AnyDeclaration<any>[] = [];\n\n  const defs = [...mapValues(mockDef), ...mapValues(keepDef), ...mapValues(replaceDef)];\n  defs.sort(moveModulesUp);\n\n  // Adding suitable leftovers.\n  for (const originalDef of defs) {\n    const def =\n      isNgDef(originalDef, 'm') && defProviders.has(originalDef)\n        ? originalDef\n        : isExportedOnRoot(originalDef, ngMocksUniverse.configInstance, ngMocksUniverse.config);\n    if (!def || processed.indexOf(def) !== -1) {\n      continue;\n    }\n    const cnfDef = ngMocksUniverse.config.get(def) || /* istanbul ignore next */ { __set: true };\n    processed.push(def);\n    cnfDef.onRoot = cnfDef.onRoot || !cnfDef.dependency;\n    // istanbul ignore if\n    if (cnfDef.__set) {\n      cnfDef.__set = undefined;\n      ngMocksUniverse.config.set(def, cnfDef);\n    }\n\n    if (isNgDef(def, 'm') && cnfDef.onRoot) {\n      handleDef(meta, def, defProviders);\n    } else if (!cnfDef.dependency && cnfDef.export && (isNgDef(def, 'i') || !isNgDef(def))) {\n      handleDef(meta, def, defProviders);\n      markProviders([def]);\n    } else if (!cnfDef.dependency && cnfDef.export) {\n      handleDef(meta, def, defProviders);\n    } else if (!ngMocksUniverse.touches.has(def) && !cnfDef.dependency) {\n      handleDef(meta, def, defProviders);\n    } else if (\n      cnfDef.dependency &&\n      configDefault.dependency &&\n      coreReflectProvidedIn(def) !== 'root' &&\n      (typeof def !== 'object' || !(def as any).__ngMocksSkip)\n    ) {\n      forgotten.push(def);\n    }\n  }\n\n  // Checking missing dependencies\n  const globalFlags = ngMocksUniverse.global.get('flags');\n  for (const def of forgotten) {\n    if (ngMocksUniverse.touches.has(def)) {\n      continue;\n    }\n\n    const depName = funcGetName(def);\n    const errorMessages = ['Error:'];\n    const defStr = ngMocksUniverse.getResolution(def);\n\n    if (depName === 'Object') {\n      errorMessages.push(\n        `A provider object has been incorrectly passed to the`,\n        `MockerBuilder ${defStr}() method. Did you mean to use`,\n        `MockerBuilder.provide()?`,\n      );\n    } else {\n      errorMessages.push(\n        `MockBuilder has found a missing dependency: ${depName}.`,\n        'It means no module provides it.',\n        'Please, use the \"export\" flag if you want to add it explicitly.',\n        'https://ng-mocks.sudo.eu/api/MockBuilder#export-flag',\n      );\n    }\n\n    const errorMessage = errorMessages.join(' ');\n\n    if (globalFlags.onMockBuilderMissingDependency === 'warn') {\n      console.warn(errorMessage);\n    } else if (globalFlags.onMockBuilderMissingDependency === 'throw') {\n      throw new Error(errorMessage);\n    }\n  }\n\n  return meta;\n};\n","import collectDeclarations from '../resolve/collect-declarations';\n\nimport coreConfig from './core.config';\nimport { flatten } from './core.helpers';\nimport { AnyDeclaration } from './core.types';\nimport { getNgType } from './func.get-ng-type';\nimport funcGetType from './func.get-type';\n\nexport const funcExtractDeps = (\n  def: any,\n  result: Set<AnyDeclaration<any>>,\n  recursive = false,\n): Set<AnyDeclaration<any>> => {\n  const meta = collectDeclarations(def);\n  const type = getNgType(def);\n  // istanbul ignore if\n  if (!type || type === 'Injectable') {\n    return result;\n  }\n\n  const decorator = meta[type];\n  for (const field of coreConfig.dependencies) {\n    if (!decorator[field]) {\n      continue;\n    }\n\n    for (const item of flatten(decorator[field])) {\n      // istanbul ignore if: it is here for standalone things, however they don't support modules with providers.\n      const itemType = funcGetType(item);\n      if (!result.has(itemType)) {\n        result.add(itemType);\n        if (recursive) {\n          funcExtractDeps(itemType, result);\n        }\n      }\n    }\n  }\n\n  return result;\n};\n","import { mapValues } from '../../common/core.helpers';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (excludeDef: Set<any>): void => {\n  const builtDeclarations = ngMocksUniverse.builtDeclarations;\n  const builtProviders = ngMocksUniverse.builtProviders;\n  const resolutions = ngMocksUniverse.config.get('ngMocksDepsResolution');\n  for (const def of mapValues(excludeDef)) {\n    builtDeclarations.set(def, null);\n    builtProviders.set(def, null);\n    resolutions.set(def, 'exclude');\n  }\n};\n","import { mapValues } from '../../common/core.helpers';\nimport { funcExtractDeps } from '../../common/func.extract-deps';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (keepDef: Set<any>, configDef: Map<any, any>): Set<any> => {\n  const dependencies = new Set<any>();\n  const builtDeclarations = ngMocksUniverse.builtDeclarations;\n  const builtProviders = ngMocksUniverse.builtProviders;\n  const resolutions = ngMocksUniverse.config.get('ngMocksDepsResolution');\n  for (const def of mapValues(keepDef)) {\n    builtDeclarations.set(def, def);\n    builtProviders.set(def, def);\n    resolutions.set(def, 'keep');\n\n    const config = configDef.get(def);\n    if (config.shallow) {\n      funcExtractDeps(def, dependencies);\n    }\n  }\n\n  return dependencies;\n};\n","import { isNgDef } from '../../common/func.is-ng-def';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport mockHelperStub from '../../mock-helper/mock-helper.stub';\nimport helperUseFactory from '../../mock-service/helper.use-factory';\nimport mockProvider from '../../mock-service/mock-provider';\nimport { IMockBuilderConfigMock } from '../types';\n\nconst createInstance = (existing: any, params: any, config: IMockBuilderConfigMock): any => {\n  if (config.precise) {\n    return params;\n  }\n\n  return mockHelperStub(existing, params);\n};\n\nexport default (def: any, defValue: Map<any, any>): void => {\n  if (isNgDef(def, 'i') && defValue.has(def)) {\n    const config: IMockBuilderConfigMock = ngMocksUniverse.config.get(def);\n    const instance = defValue.get(def);\n    ngMocksUniverse.builtProviders.set(\n      def,\n      helperUseFactory(def, undefined, existing => createInstance(existing, instance, config)),\n    );\n  } else if (isNgDef(def, 'i')) {\n    ngMocksUniverse.builtProviders.set(def, mockProvider(def, true));\n  }\n\n  if (!isNgDef(def) && defValue.has(def)) {\n    const instance = defValue.get(def);\n    ngMocksUniverse.builtProviders.set(\n      def,\n      helperUseFactory(def, undefined, () => instance),\n    );\n  } else if (!isNgDef(def)) {\n    ngMocksUniverse.builtProviders.set(def, mockProvider(def, true));\n  }\n};\n","import { mapValues } from '../../common/core.helpers';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport tryMockProvider from './try-mock-provider';\n\nexport default (mockDef: Set<any>, defValue: Map<any, any>): void => {\n  const builtDeclarations = ngMocksUniverse.builtDeclarations;\n  const resolutions: Map<any, string> = ngMocksUniverse.config.get('ngMocksDepsResolution');\n  for (const def of mapValues(mockDef)) {\n    const deleteTouch = !ngMocksUniverse.touches.has(def);\n\n    resolutions.set(def, 'mock');\n    builtDeclarations.set(def, undefined);\n    tryMockProvider(def, defValue);\n\n    if (deleteTouch) {\n      ngMocksUniverse.touches.delete(def);\n    }\n  }\n};\n","import { isNgDef } from '../../common/func.is-ng-def';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport { MockComponent } from '../../mock-component/mock-component';\nimport { MockDirective } from '../../mock-directive/mock-directive';\nimport { MockPipe } from '../../mock-pipe/mock-pipe';\n\nexport default (def: any): void => {\n  if (ngMocksUniverse.builtDeclarations.get(def) !== undefined) {\n    return;\n  }\n\n  if (isNgDef(def, 'c')) {\n    ngMocksUniverse.builtDeclarations.set(def, MockComponent(def));\n  }\n  if (isNgDef(def, 'd')) {\n    ngMocksUniverse.builtDeclarations.set(def, MockDirective(def));\n  }\n  if (isNgDef(def, 'p')) {\n    ngMocksUniverse.builtDeclarations.set(def, MockPipe(def));\n  }\n};\n","import { mapValues } from '../../common/core.helpers';\nimport { isNgDef } from '../../common/func.is-ng-def';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport { MockModule } from '../../mock-module/mock-module';\nimport mockNgDef from '../../mock-module/mock-ng-def';\nimport collectDeclarations from '../../resolve/collect-declarations';\n\nimport tryMockDeclaration from './try-mock-declaration';\n\nexport default (\n  keepDef: Set<any>,\n  mockDef: Set<any>,\n  replaceDef: Set<any>,\n  defProviders: Map<any, any>,\n): Map<any, any> => {\n  const loProviders = new Map();\n\n  for (const def of [...mapValues(keepDef), ...mapValues(mockDef), ...mapValues(replaceDef)]) {\n    const meta = collectDeclarations(def);\n    const providers = [\n      ...(defProviders.get(def) ?? []),\n      ...(meta.Component?.providers ?? []),\n      ...(meta.Directive?.providers ?? []),\n    ];\n\n    const deleteTouch = !ngMocksUniverse.touches.has(def);\n    if (!mockDef.has(def)) {\n      ngMocksUniverse.flags.add('skipMock');\n    }\n\n    const isModule = isNgDef(def, 'm');\n    if (providers.length > 0) {\n      const [, loDef] = mockNgDef({ providers, skipMarkProviders: !isModule, skipExports: true });\n      loProviders.set(def, loDef.providers);\n    }\n    if (isModule) {\n      ngMocksUniverse.builtDeclarations.set(def, MockModule(def));\n    }\n\n    ngMocksUniverse.flags.delete('skipMock');\n    if (deleteTouch) {\n      ngMocksUniverse.touches.delete(def);\n    }\n  }\n  for (const def of mapValues(mockDef)) {\n    tryMockDeclaration(def);\n  }\n\n  return loProviders;\n};\n","import { mapValues } from '../../common/core.helpers';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (replaceDef: Set<any>, defValue: Map<any, any>): void => {\n  const builtDeclarations = ngMocksUniverse.builtDeclarations;\n  const resolutions = ngMocksUniverse.config.get('ngMocksDepsResolution');\n  for (const def of mapValues(replaceDef)) {\n    builtDeclarations.set(def, defValue.get(def));\n    resolutions.set(def, 'replace');\n  }\n};\n","import { mapEntries, mapValues } from '../../common/core.helpers';\nimport { funcExtractDeps } from '../../common/func.extract-deps';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport initExcludeDef from './init-exclude-def';\nimport initKeepDef from './init-keep-def';\nimport initMockDeclarations from './init-mock-declarations';\nimport initModules from './init-modules';\nimport initReplaceDef from './init-replace-def';\nimport { BuilderData } from './types';\n\nexport default ({\n  configDef,\n  defProviders,\n  defValue,\n  excludeDef,\n  keepDef,\n  mockDef,\n  replaceDef,\n}: BuilderData): Map<any, any> => {\n  ngMocksUniverse.flags.add('cachePipe');\n\n  // collecting multi flags of providers.\n  ngMocksUniverse.config.set('ngMocksMulti', new Set());\n  // collecting all deps of providers.\n  ngMocksUniverse.config.set('ngMocksDeps', new Set());\n  // collecting all declarations of kept modules.\n  ngMocksUniverse.config.set('ngMocksDepsSkip', new Set());\n  // flags to understand how to mock nested declarations.\n  ngMocksUniverse.config.set('ngMocksDepsResolution', new Map());\n\n  const dependencies = initKeepDef(keepDef, configDef);\n  for (const dependency of mapValues(dependencies)) {\n    ngMocksUniverse.touches.add(dependency);\n  }\n  for (const dependency of mapValues(keepDef)) {\n    dependencies.add(dependency);\n    funcExtractDeps(dependency, dependencies, true);\n  }\n  for (const dependency of mapValues(mockDef)) {\n    dependencies.add(dependency);\n    funcExtractDeps(dependency, dependencies, true);\n  }\n  for (const dependency of mapValues(replaceDef)) {\n    dependencies.add(dependency);\n    funcExtractDeps(dependency, dependencies, true);\n  }\n  for (const dependency of mapValues(dependencies)) {\n    if (configDef.has(dependency)) {\n      continue;\n    }\n\n    // Checking global configuration for the dependency.\n    const resolution = ngMocksUniverse.getResolution(dependency);\n    if (resolution === 'replace') {\n      replaceDef.add(dependency);\n      defValue.set(dependency, ngMocksUniverse.getBuildDeclaration(dependency));\n    } else if (resolution === 'keep') {\n      keepDef.add(dependency);\n    } else if (resolution === 'exclude') {\n      excludeDef.add(dependency);\n    } else if (resolution === 'mock') {\n      mockDef.add(dependency);\n    } else if (ngMocksUniverse.touches.has(dependency)) {\n      mockDef.add(dependency);\n    }\n\n    configDef.set(\n      dependency,\n      ngMocksUniverse.touches.has(dependency)\n        ? {\n            dependency: true,\n            __internal: true,\n          }\n        : {},\n    );\n  }\n\n  for (const [k, v] of mapEntries(configDef)) {\n    ngMocksUniverse.config.set(k, {\n      ...ngMocksUniverse.getConfigMock().get(k),\n      ...v,\n      defValue: defValue.get(k),\n    });\n  }\n\n  initReplaceDef(replaceDef, defValue);\n  initExcludeDef(excludeDef);\n  initMockDeclarations(mockDef, defValue);\n\n  return initModules(keepDef, mockDef, replaceDef, defProviders);\n};\n","import { isNgDef } from '../../common/func.is-ng-def';\n\nexport default (\n  def: any,\n  a1: any,\n  a2: any,\n  defaultMockValue: any,\n): {\n  config: any;\n  mock: any;\n} => {\n  let mock: any = def === a1 ? defaultMockValue : a1;\n  let config: any = a2 ?? (a1 !== defaultMockValue && typeof a1 === 'object' ? a1 : undefined);\n  if (isNgDef(def, 'p') && typeof a1 === 'function' && a1 !== def && !isNgDef(a1, 'p')) {\n    mock = {\n      transform: a1,\n    };\n    config = a2;\n  } else if (isNgDef(def, 'i') || !isNgDef(def)) {\n    config = a2;\n  }\n  mock = mock === config ? defaultMockValue : mock;\n\n  return {\n    config,\n    mock,\n  };\n};\n","import funcGetType from '../../common/func.get-type';\n\nexport default (\n  provider: any,\n): {\n  multi: boolean;\n  provide: any;\n} => {\n  const provide = funcGetType(provider);\n  const multi = provide !== provider && provider.multi;\n\n  return {\n    multi,\n    provide,\n  };\n};\n","import { NgModule } from '@angular/core';\nimport { TestBed, TestBedStatic, TestModuleMetadata } from '@angular/core/testing';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport { flatten, mapValues } from '../common/core.helpers';\nimport { Type } from '../common/core.types';\nimport funcGetName from '../common/func.get-name';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport { isNgModuleDefWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport { MockBuilder } from './mock-builder';\nimport { MockBuilderStash } from './mock-builder-stash';\nimport addRequestedProviders from './promise/add-requested-providers';\nimport applyPlatformModules from './promise/apply-platform-modules';\nimport createNgMocksOverridesToken from './promise/create-ng-mocks-overrides-token';\nimport createNgMocksToken from './promise/create-ng-mocks-token';\nimport createNgMocksTouchesToken from './promise/create-ng-mocks-touches-token';\nimport handleEntryComponents from './promise/handle-entry-components';\nimport handleRootProviders from './promise/handle-root-providers';\nimport initNgModules from './promise/init-ng-modules';\nimport initUniverse from './promise/init-universe';\nimport parseMockArguments from './promise/parse-mock-arguments';\nimport parseProvider from './promise/parse-provider';\nimport { BuilderData } from './promise/types';\nimport {\n  IMockBuilder,\n  IMockBuilderConfig,\n  IMockBuilderConfigAll,\n  IMockBuilderProvider,\n  IMockBuilderResult,\n} from './types';\n\nconst normaliseModule = (\n  module: any,\n): {\n  def: Type<any>;\n  providers?: NgModule['providers'];\n} =>\n  isNgModuleDefWithProviders(module)\n    ? { def: module.ngModule, providers: module.providers }\n    : { def: module, providers: undefined };\n\nconst generateProviderValue = (provider: any, existing: any, multi: boolean): any =>\n  multi ? [...(Array.isArray(existing) ? existing : /* istanbul ignore next */ []), provider] : provider;\n\nconst defaultMock = {}; // simulating Symbol\n\nexport interface MockBuilderPromise {\n  [Symbol.toStringTag]: 'Promise';\n}\n\nexport class MockBuilderPromise implements IMockBuilder {\n  protected beforeCC: Set<(testBed: TestBedStatic) => void> = new Set();\n  protected configDef: BuilderData['configDef'] = new Map();\n  protected defProviders: BuilderData['defProviders'] = new Map();\n  protected defValue: BuilderData['defValue'] = new Map();\n  protected excludeDef: BuilderData['excludeDef'] = new Set();\n  protected keepDef: BuilderData['keepDef'] = new Set();\n  protected mockDef: BuilderData['mockDef'] = new Set();\n  protected providerDef: BuilderData['providerDef'] = new Map();\n  protected replaceDef: BuilderData['replaceDef'] = new Set();\n  protected stash: MockBuilderStash = new MockBuilderStash();\n\n  public constructor(protected configDefault: IMockBuilderConfigAll) {\n    // istanbul ignore else\n    if (typeof Symbol !== 'undefined') {\n      (this as any)[Symbol.toStringTag] = 'Promise';\n    }\n  }\n\n  public beforeCompileComponents(callback: (testBed: TestBedStatic) => void): this {\n    this.beforeCC.add(callback);\n\n    return this;\n  }\n\n  public build(): TestModuleMetadata {\n    this.stash.backup();\n    const defStack = new CoreDefStack();\n    ngMocksUniverse.config.set('mockNgDefResolver', defStack);\n    ngMocksUniverse.flags.add('hasRootModule');\n\n    try {\n      const params = this.combineParams();\n\n      const ngModule = initNgModules(params, initUniverse(params));\n      addRequestedProviders(ngModule, params, defStack);\n      handleRootProviders(ngModule, params, defStack);\n      handleEntryComponents(ngModule);\n      applyPlatformModules();\n\n      ngModule.providers.push(\n        createNgMocksToken(),\n        createNgMocksTouchesToken(),\n        createNgMocksOverridesToken(this.replaceDef, this.defValue),\n        MockBuilder as never,\n      );\n\n      return ngModule;\n    } finally {\n      ngMocksUniverse.flags.delete('hasRootModule');\n      ngMocksUniverse.config.delete('mockNgDefResolver');\n      this.stash.restore();\n    }\n  }\n\n  // istanbul ignore next\n  public async catch(reject?: ((reason: any) => PromiseLike<never>) | undefined | null): Promise<IMockBuilderResult> {\n    return this.then().catch(reject);\n  }\n\n  public exclude(def: any): this {\n    this.wipe(def);\n    this.excludeDef.add(def);\n    this.setConfigDef(def);\n\n    return this;\n  }\n\n  // istanbul ignore next\n  public async finally(callback?: (() => void) | null | undefined): Promise<IMockBuilderResult> {\n    return this.then().finally(callback);\n  }\n\n  public keep(input: any, config?: IMockBuilderConfig): this {\n    const { def, providers } = normaliseModule(input);\n\n    const existing = this.keepDef.has(def) ? this.defProviders.get(def) : [];\n    this.wipe(def);\n    this.keepDef.add(def);\n\n    // a magic to support modules with providers.\n    if (providers) {\n      this.defProviders.set(def, [...(existing || /* istanbul ignore next */ []), ...providers]);\n    }\n\n    this.setConfigDef(def, config);\n\n    return this;\n  }\n\n  public mock(input: any, a1: any = defaultMock, a2?: any): this {\n    const { def, providers } = normaliseModule(input);\n\n    const { config, mock } = parseMockArguments(def, a1, a2, defaultMock);\n    if (isNgDef(mock) && isNgDef(input) && !isNgDef(input, 't')) {\n      throw new Error(\n        [\n          `MockBuilder.mock(${funcGetName(input)}) received a class when its shape is expected.`,\n          'Please try ngMocks.defaultMock instead.',\n        ].join(' '),\n      );\n    }\n\n    const existing = this.mockDef.has(def) ? this.defProviders.get(def) : [];\n    this.wipe(def);\n    this.mockDef.add(def);\n\n    // a magic to support modules with providers.\n    if (providers) {\n      this.defProviders.set(def, [...(existing || /* istanbul ignore next */ []), ...providers]);\n    }\n\n    this.setDefValue(def, mock);\n    this.setConfigDef(def, config);\n\n    return this;\n  }\n\n  public provide(def: IMockBuilderProvider): this {\n    for (const provider of flatten(def)) {\n      const { provide, multi } = parseProvider(provider);\n      const existing = this.providerDef.has(provide) ? this.providerDef.get(provide) : [];\n      this.providerDef.set(provide, generateProviderValue(provider, existing, multi));\n    }\n\n    return this;\n  }\n\n  public replace(source: Type<any>, destination: Type<any>, config?: IMockBuilderConfig): this {\n    if (!isNgDef(destination) || !isNgDef(source) || isNgDef(destination, 'i') || isNgDef(source, 'i')) {\n      throw new Error(\n        'Cannot replace the declaration, both have to be a Module, a Component, a Directive or a Pipe, for Providers use `.mock` or `.provide`',\n      );\n    }\n\n    this.wipe(source);\n    this.replaceDef.add(source);\n    this.defValue.set(source, destination);\n    this.setConfigDef(source, config);\n\n    return this;\n  }\n\n  // eslint-disable-next-line unicorn/no-thenable\n  public async then<TResult1 = IMockBuilderResult>(\n    fulfill?: ((value: IMockBuilderResult) => PromiseLike<TResult1>) | undefined | null,\n    reject?: ((reason: any) => PromiseLike<any>) | undefined | null,\n  ): Promise<TResult1> {\n    const promise = new Promise((resolve: (value: IMockBuilderResult) => void): void => {\n      const testBed: TestBedStatic = TestBed.configureTestingModule(this.build()) as never;\n      for (const callback of mapValues(this.beforeCC)) {\n        callback(testBed);\n      }\n      const testBedPromise = testBed.compileComponents();\n      testBedPromise.then(() => {\n        resolve({ testBed });\n      });\n    });\n\n    return promise.then(fulfill, reject);\n  }\n\n  private combineParams(): BuilderData {\n    return {\n      configDef: this.configDef,\n      configDefault: this.configDefault,\n      defProviders: this.defProviders,\n      defValue: this.defValue,\n      excludeDef: this.excludeDef,\n      keepDef: this.keepDef,\n      mockDef: this.mockDef,\n      providerDef: this.providerDef,\n      replaceDef: this.replaceDef,\n    };\n  }\n\n  private setConfigDef(def: any, config?: any): void {\n    if (config || !this.configDef.has(def)) {\n      this.configDef.set(def, config ?? this.configDefault);\n    }\n  }\n\n  private setDefValue(def: any, mock: any): void {\n    if (mock === defaultMock) {\n      this.defValue.delete(def);\n    } else {\n      this.defValue.set(def, mock);\n    }\n  }\n\n  private wipe(def: Type<any>): void {\n    this.defProviders.delete(def);\n    this.defValue.delete(def);\n    this.excludeDef.delete(def);\n    this.keepDef.delete(def);\n    this.mockDef.delete(def);\n    this.providerDef.delete(def);\n    this.replaceDef.delete(def);\n  }\n}\n","const objectsDiffer = (prototype: any, source: any): boolean => {\n  const prototypeKeys = Object.keys(prototype);\n  const sourceKeys = Object.keys(source);\n  if (prototypeKeys.length !== sourceKeys.length) {\n    return true;\n  }\n  for (const key of prototypeKeys) {\n    if (prototype[key] !== source[key]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default (prototype: any, source: any): boolean => {\n  if (prototype === source) {\n    return true;\n  }\n  if ((prototype && !source) || (!prototype && source)) {\n    return false;\n  }\n  if (objectsDiffer(prototype, source)) {\n    return false;\n  }\n\n  return true;\n};\n","import equalVariables from './equal-variables';\n\nexport default (prototype: any, source: any): boolean => {\n  if (prototype === source) {\n    return true;\n  }\n  if ((typeof prototype === 'boolean' || typeof source === 'boolean') && prototype !== source) {\n    return false;\n  }\n\n  return prototype.$implicit === source.$implicit && equalVariables(prototype.variables, source.variables);\n};\n","import equalRenderDefs from './equal-render-defs';\n\nconst objectsDiffer = (destination: any, source: any): boolean => {\n  if (Object.keys(destination).length !== Object.keys(source).length) {\n    return true;\n  }\n  for (const key of Object.keys(destination)) {\n    if (!equalRenderDefs(destination[key], source[key])) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default (source: any, destination: any): boolean => {\n  if (!equalRenderDefs(destination, source)) {\n    return false;\n  }\n  if (typeof destination !== 'object' || typeof source !== 'object') {\n    return true;\n  }\n  if (objectsDiffer(destination, source)) {\n    return false;\n  }\n\n  return true;\n};\n","import equalRenderConfigs from './equal-render-configs';\n\nexport default (source: any, destination: any): boolean => {\n  if (destination === source) {\n    return true;\n  }\n  if (destination.dependency !== source.dependency) {\n    return false;\n  }\n  if (destination.export !== source.export) {\n    return false;\n  }\n  if (destination.exportAll !== source.exportAll) {\n    return false;\n  }\n  if (!equalRenderConfigs(source.render, destination.render)) {\n    return false;\n  }\n\n  return true;\n};\n","import { mapKeys } from '../../common/core.helpers';\n\nexport default (source: Map<any, any>, destination: Map<any, any>, compare = (a: any, b: any) => a === b): boolean => {\n  if (!destination || destination.size !== source.size) {\n    return false;\n  }\n  for (const value of mapKeys(source)) {\n    if (!destination.has(value)) {\n      return false;\n    }\n    if (!compare(destination.get(value), source.get(value))) {\n      return false;\n    }\n  }\n\n  return true;\n};\n","import { flatten } from '../../common/core.helpers';\n\nconst areEqualProviderDefs = (thisDef: any, prototypeDef: any, ...keys: string[]) => {\n  for (const key of keys) {\n    if (prototypeDef && thisDef && prototypeDef[key] && thisDef[key] && prototypeDef[key] === thisDef[key]) {\n      return true;\n    }\n  }\n\n  return prototypeDef === thisDef;\n};\n\nexport default (prototype: any, source: any): boolean => {\n  if (Array.isArray(prototype) !== Array.isArray(source)) {\n    return false;\n  }\n\n  const [prototypeDefs, thisDefs] = [flatten(prototype), flatten(source)];\n  if (prototypeDefs.length !== thisDefs.length) {\n    return false;\n  }\n\n  for (let index = 0; index < prototypeDefs.length; index += 1) {\n    const [prototypeDef, thisDef] = [prototypeDefs[index], thisDefs[index]];\n\n    if (prototypeDef && thisDef && prototypeDef.multi !== thisDef.multi) {\n      return false;\n    }\n    if (areEqualProviderDefs(thisDef, prototypeDef, 'useValue', 'useClass', 'useFactory', 'useExisting')) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n};\n","import { mapValues } from '../../common/core.helpers';\n\nexport default (source: Set<any>, destination: Set<any>): boolean => {\n  if (!destination || destination.size !== source.size) {\n    return false;\n  }\n  for (const value of mapValues(source)) {\n    if (!destination.has(value)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n","export default () => ({\n  beforeCC: new Set(),\n  configDef: new Map(),\n  defProviders: new Map(),\n  defValue: new Map(),\n  excludeDef: new Set(),\n  keepDef: new Set(),\n  mockDef: new Set(),\n  providerDef: new Map(),\n  replaceDef: new Set(),\n});\n","import { TestModuleMetadata } from '@angular/core/testing';\n\nexport default (\n  ngModule: TestModuleMetadata,\n): TestModuleMetadata & {\n  declarations: any[];\n  imports: any[];\n  providers: any[];\n} => ({\n  ...ngModule,\n  declarations: [...(ngModule.declarations || /* istanbul ignore next */ [])],\n  imports: [...(ngModule.imports || /* istanbul ignore next */ [])],\n  providers: [...(ngModule.providers || /* istanbul ignore next */ [])],\n});\n","import { TestBed, TestModuleMetadata } from '@angular/core/testing';\n\nimport { mapEntries, mapValues } from '../common/core.helpers';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport { MockBuilderPromise } from './mock-builder.promise';\nimport areEqualConfigParams from './performance/are-equal-config-params';\nimport areEqualMaps from './performance/are-equal-maps';\nimport areEqualProviders from './performance/are-equal-providers';\nimport areEqualSets from './performance/are-equal-sets';\nimport getEmptyConfig from './performance/get-empty-config';\nimport requiredMetadata from './performance/required-metadata';\nimport { IMockBuilderResult } from './types';\n\nexport class MockBuilderPerformance extends MockBuilderPromise {\n  public build(): TestModuleMetadata {\n    const global = ngMocksUniverse.global;\n\n    // avoiding influences on cache when users extend the testing module.\n    if (global.has('builder:module') && global.has('builder:config') && this.equalsTo(global.get('builder:config'))) {\n      return requiredMetadata(global.get('builder:module'));\n    }\n\n    // removal of cached promise in case of mismatch\n    if (global.has('builder:module')) {\n      global.delete(global.get('builder:module'));\n    }\n\n    const clone = this.cloneConfig();\n    const ngModule = super.build();\n    global.set('builder:config', clone);\n    global.set('builder:module', ngModule);\n\n    // avoiding influences on cache when users extend the testing module.\n    return requiredMetadata(ngModule);\n  }\n\n  // eslint-disable-next-line unicorn/no-thenable\n  public async then<TResult1 = IMockBuilderResult>(\n    fulfill?: ((value: IMockBuilderResult) => PromiseLike<TResult1>) | undefined | null,\n    reject?: ((reason: any) => PromiseLike<never>) | undefined | null,\n  ): Promise<TResult1> {\n    const global = ngMocksUniverse.global;\n\n    const flags = global.has('bullet') && global.has('builder:module') && global.has('builder:config');\n    if (flags && this.equalsTo(global.get('builder:config'))) {\n      return global.get(global.get('builder:module')).then(fulfill, reject);\n    }\n\n    // we need to reset testing module in case if we are in bullet mode but current module does not match.\n    if (global.has('bullet') && global.has('bullet:reset')) {\n      console.warn('ngMocks.faster has zero effect due to changes in testing module between runs');\n      global.delete('bullet');\n      TestBed.resetTestingModule();\n      global.set('bullet', true);\n    }\n\n    const promise = super.then(fulfill, reject);\n    global.set(global.get('builder:module'), promise);\n\n    return promise;\n  }\n\n  private cloneConfig() {\n    const config = getEmptyConfig();\n\n    mapValues(this.beforeCC, config.beforeCC);\n    mapValues(this.excludeDef, config.excludeDef);\n    mapValues(this.keepDef, config.keepDef);\n    mapValues(this.mockDef, config.mockDef);\n    mapValues(this.replaceDef, config.replaceDef);\n\n    mapEntries(this.configDef, config.configDef);\n    mapEntries(this.defProviders, config.defProviders);\n    mapEntries(this.defValue, config.defValue);\n    mapEntries(this.providerDef, config.providerDef);\n\n    return config;\n  }\n\n  private equalsTo(prototype: Record<keyof any, any>): boolean {\n    for (const key of ['beforeCC', 'keepDef', 'replaceDef', 'excludeDef', 'mockDef']) {\n      if (!areEqualSets((this as any)[key], prototype[key])) {\n        return false;\n      }\n    }\n    for (const key of ['defValue']) {\n      if (!areEqualMaps((this as any)[key], prototype[key])) {\n        return false;\n      }\n    }\n    for (const key of ['providerDef', 'defProviders']) {\n      if (!areEqualMaps((this as any)[key], prototype[key], areEqualProviders)) {\n        return false;\n      }\n    }\n\n    return areEqualMaps(this.configDef, prototype.configDef, areEqualConfigParams);\n  }\n}\n","import coreDefineProperty from '../common/core.define-property';\nimport { flatten, mapKeys } from '../common/core.helpers';\nimport { AnyDeclaration } from '../common/core.types';\nimport { NgModuleWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport { isStandalone } from '../common/func.is-standalone';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport helperExtractPropertyDescriptor from '../mock-service/helper.extract-property-descriptor';\n\nimport { MockBuilderPerformance } from './mock-builder.performance';\nimport { IMockBuilder, IMockBuilderExtended } from './types';\n\nexport type MockBuilderParam = string | AnyDeclaration<any> | NgModuleWithProviders;\n\n/**\n * MockBuilder provides reach and simple interfaces of chain functions\n * to build desired mock environment for tests.\n *\n * @see https://ng-mocks.sudo.eu/api/MockBuilder\n */\nexport function MockBuilder(\n  keepDeclaration?: MockBuilderParam | MockBuilderParam[] | null | undefined,\n  itsModuleAndDependenciesToMock?: MockBuilderParam | MockBuilderParam[] | null | undefined,\n): IMockBuilderExtended;\n\nexport function MockBuilder(...args: Array<MockBuilderParam | MockBuilderParam[] | null | undefined>): IMockBuilder {\n  const [keep, mock] = args;\n\n  const instance = new MockBuilderPerformance(args.length < 2 ? { export: true } : { dependency: true });\n  const extensions: Map<any, any> = ngMocksUniverse.config.get('MockBuilderExtensions');\n  for (const func of extensions ? mapKeys(extensions) : []) {\n    if (helperExtractPropertyDescriptor(instance, func)) {\n      throw new Error(`MockBuilder.${func} is a base method and cannot be customized, please use a different name.`);\n    }\n    coreDefineProperty(instance, func, (...args: Array<any>) => {\n      extensions.get(func)(instance, args);\n      return instance;\n    });\n  }\n\n  if (keep) {\n    for (const declaration of flatten(keep)) {\n      instance.keep(declaration, {\n        export: true,\n        shallow: isStandalone(declaration),\n      });\n    }\n  }\n  if (mock) {\n    for (const declaration of flatten(mock)) {\n      instance.mock(declaration, declaration, {\n        export: true,\n        exportAll: true,\n      });\n    }\n  }\n\n  return instance;\n}\n\nfunction mockBuilderExtend<K extends keyof IMockBuilderExtended & string>(\n  func: K,\n  callback?: (builder: IMockBuilderExtended, parameters: never) => void,\n): void {\n  const extensions: Map<string, typeof callback> = ngMocksUniverse.config.get('MockBuilderExtensions') ?? new Map();\n  if (callback) {\n    extensions.set(func, callback);\n    ngMocksUniverse.config.set('MockBuilderExtensions', extensions);\n  } else {\n    extensions.delete(func);\n  }\n}\n\n// istanbul ignore next: issue in istanbul https://github.com/istanbuljs/nyc/issues/1209\nexport namespace MockBuilder {\n  /**\n   * Adds a custom function to MockBuilder\n   */\n  export function extend<K extends keyof IMockBuilderExtended & string>(\n    func: K,\n    callback: (builder: IMockBuilderExtended, parameters: never) => void,\n  ): void;\n\n  /**\n   * Removes a custom function from MockBuilder\n   */\n  export function extend<K extends keyof IMockBuilderExtended & string>(func: K): void;\n\n  export function extend<K extends keyof IMockBuilderExtended & string>(\n    func: K,\n    callback?: (builder: IMockBuilderExtended, parameters: never) => void,\n  ): void {\n    mockBuilderExtend(func, callback);\n  }\n}\n","import { MockedDebugNode } from '../../mock-render/types';\n\nexport default (value: any): value is MockedDebugNode => {\n  return !!value?.nativeElement || !!value?.nativeNode;\n};\n","import { AnyType, DebugNodeSelector } from '../common/core.types';\nimport { isNgDef } from '../common/func.is-ng-def';\n\nexport default (selector: AnyType<any> | DebugNodeSelector): string => {\n  if (typeof selector === 'string') {\n    return selector;\n  }\n  if (typeof selector === 'function') {\n    return selector.name;\n  }\n  if (isNgDef(selector, 't')) {\n    return (selector as any)._desc;\n  }\n  if (Array.isArray(selector)) {\n    return selector[0];\n  }\n  if (!selector) {\n    return '<EMPTY>';\n  }\n\n  return '<UNKNOWN>';\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nexport default (value: any): value is { debugElement: MockedDebugNode } => {\n  return !!value && typeof value === 'object' && value.debugElement !== undefined;\n};\n","import { DebugElement } from '@angular/core';\n\nimport isFixture from '../format/is-fixture';\nimport funcGetLastFixture from '../func.get-last-fixture';\n\nconst findDebugElement = (el: any): DebugElement | undefined => {\n  if (isFixture(el)) {\n    return findDebugElement(el.debugElement);\n  }\n  if (el && el.injector && el.query) {\n    return el;\n  }\n\n  return undefined;\n};\n\nexport default (args: any[], defaultNotFoundValue?: any): [any, any, any] => {\n  let el;\n  let sel;\n  let notFoundValue = defaultNotFoundValue;\n  if (args.length === 3) {\n    el = findDebugElement(args[0]);\n    sel = args[1];\n    notFoundValue = args[2];\n  } else if (args.length === 1) {\n    el = findDebugElement(funcGetLastFixture());\n    [sel] = args;\n  } else if (args[0]) {\n    el = findDebugElement(args[0]);\n    if (el) {\n      sel = args[1];\n    } else {\n      el = findDebugElement(funcGetLastFixture());\n      [sel, notFoundValue] = args;\n    }\n  } else {\n    sel = args[1];\n  }\n  sel = findDebugElement(sel) ?? sel;\n\n  return [el, sel, notFoundValue];\n};\n","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"By\"]: () => (__WEBPACK_EXTERNAL_MODULE__angular_platform_browser_bc6fa964__.By) });","import { DebugElement, Predicate } from '@angular/core';\nimport { By } from '@angular/platform-browser';\n\nimport { AnyType } from '../../common/core.types';\nimport { getSourceOfMock } from '../../common/func.get-source-of-mock';\n\nexport default (selector: string | AnyType<any> | [string] | [string, any]): Predicate<DebugElement> => {\n  return Array.isArray(selector)\n    ? By.css(selector.length === 1 ? `[${selector[0]}]` : `[${selector[0]}=\"${selector[1]}\"]`)\n    : typeof selector === 'string'\n      ? By.css(selector)\n      : By.directive(getSourceOfMock(selector));\n};\n","import { DebugElement } from '@angular/core';\n\nimport isDebugNode from '../format/is-debug-node';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\n\nimport funcParseFindArgs from './func.parse-find-args';\nimport funcParseFindTerm from './func.parse-find-term';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nexport default (...args: any[]): DebugElement => {\n  const [el, sel, notFoundValue] = funcParseFindArgs(args, defaultNotFoundValue);\n  const result = isDebugNode(sel) ? sel : el?.query(funcParseFindTerm(sel));\n  if (result) {\n    return result;\n  }\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n  throw new Error(`Cannot find an element via ngMocks.find(${funcParseFindArgsName(sel)})`);\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nexport default (node: MockedDebugNode): boolean => {\n  return node.nativeNode.nodeName === '#text';\n};\n","export default (a: any, b: any): boolean => {\n  if (!a || !b) {\n    return false;\n  }\n\n  return a === b;\n};\n","import detectTextNode from './detect-text-node';\n\nexport default (node: any) => {\n  return detectTextNode(node)\n    ? undefined\n    : node.injector._tNode || // ivy\n        node.injector.elDef || // classic\n        undefined;\n};\n","import { Injector } from '@angular/core';\n\nimport { getTestBedInjection } from './core.helpers';\n\nconst defaultInjector: any = {};\n\nexport default (declaration: any, injector: Injector = defaultInjector): any => {\n  if (injector === defaultInjector) {\n    return getTestBedInjection(declaration);\n  }\n  try {\n    return injector.get(declaration);\n  } catch {\n    return undefined;\n  }\n};\n","import { DebugElement, ViewContainerRef } from '@angular/core';\n\nimport coreInjector from '../../common/core.injector';\n\nimport elDefGetNode from './el-def-get-node';\n\nconst getVcr = (node: any, child: any): undefined | ViewContainerRef => {\n  if (node === child) {\n    return undefined;\n  }\n  if (child.nativeNode.nodeName !== '#comment') {\n    return undefined;\n  }\n\n  return coreInjector(ViewContainerRef, child.injector);\n};\n\nconst getScanViewRefRootNodes = (node: any, child: any): Array<[number, any]> => {\n  const vcr = getVcr(node, child);\n  if (!vcr) {\n    return [];\n  }\n\n  const result: Array<[number, any]> = [];\n  for (let vrIndex = 0; vrIndex < vcr.length; vrIndex += 1) {\n    const vr = vcr.get(vrIndex);\n    if (!vr) {\n      continue;\n    }\n\n    for (let rnIndex = 0; rnIndex < (vr as any).rootNodes.length; rnIndex += 1) {\n      result.push([rnIndex, (vr as any).rootNodes[rnIndex]]);\n    }\n  }\n\n  return result;\n};\n\nconst scanViewRef = (node: DebugElement) => {\n  let result: any;\n  let index: any;\n\n  for (const child of node.parent?.childNodes || []) {\n    for (const [rnIndex, rootNode] of getScanViewRefRootNodes(node, child)) {\n      if (rootNode === node.nativeNode && (index === undefined || rnIndex < index)) {\n        result = elDefGetNode(child);\n        index = rnIndex;\n      }\n    }\n  }\n\n  return result;\n};\n\nexport default (node: any) => {\n  return (\n    node.injector._tNode?.parent || // ivy\n    node.injector.elDef?.parent || // classic\n    scanViewRef(node) ||\n    node.parent?.injector._tNode || // ivy\n    node.parent?.injector.elDef || // classic\n    undefined\n  );\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nimport detectTextNode from './detect-text-node';\nimport elDefCompare from './el-def-compare';\nimport elDefGetNode from './el-def-get-node';\nimport elDefGetParent from './el-def-get-parent';\n\nexport default (node: MockedDebugNode): MockedDebugNode[] => {\n  const elDef = elDefGetNode(node);\n  if (!elDef || detectTextNode(node)) {\n    return [];\n  }\n\n  const isDirect = (node as any).childNodes !== undefined;\n  const children: MockedDebugNode[] = [];\n  for (const childNode of (node as any).childNodes || node.parent?.childNodes || []) {\n    const childNodeParent = elDefGetParent(childNode);\n\n    if (!isDirect && !elDefCompare(elDef, childNodeParent)) {\n      continue;\n    }\n    if (childNodeParent && !elDefCompare(elDef, childNodeParent)) {\n      continue;\n    }\n\n    children.push(childNode);\n  }\n\n  if ((node as any).parent?.name === 'BODY') {\n    const childNodes: any[] = (node as any).parent.childNodes;\n    let start = childNodes.length;\n    let end = 0;\n    for (let i = childNodes.length - 1; i >= 0; i -= 1) {\n      const childNode = childNodes[i];\n      if (childNode.nativeNode.nodeName === '#comment') {\n        end = i;\n      } else if (childNode.nativeNode === node.nativeNode) {\n        start = i + 1;\n        break;\n      }\n    }\n    for (let i = start; i < end; i += 1) {\n      children.push(childNodes[i]);\n    }\n  }\n\n  return children;\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nimport elDefCompare from './el-def-compare';\nimport elDefGetNode from './el-def-get-node';\nimport elDefGetParent from './el-def-get-parent';\n\nconst detectParent = (node: MockedDebugNode, parent: MockedDebugNode | undefined): MockedDebugNode | undefined => {\n  if (parent) {\n    return parent;\n  }\n\n  const expected = elDefGetParent(node);\n  const currentParent = node.parent ? elDefGetNode(node.parent) : undefined;\n  if (node.parent && elDefCompare(expected, currentParent)) {\n    return node.parent;\n  }\n  for (const childNode of node.parent?.childNodes || []) {\n    const childElDef = elDefGetNode(childNode);\n    if (elDefCompare(expected, childElDef)) {\n      return childNode;\n    }\n  }\n\n  return undefined;\n};\n\nexport default ((): typeof detectParent => detectParent)();\n","import { MockedDebugNode } from '../../mock-render/types';\n\nimport detectTextNode from './detect-text-node';\nimport nestedCheckChildren from './nested-check-children';\nimport nestedCheckParent from './nested-check-parent';\n\nconst nestedCheck = (\n  node: MockedDebugNode | null | undefined,\n  parent: MockedDebugNode | undefined,\n  check: (node: MockedDebugNode, parent?: MockedDebugNode) => void | boolean,\n  includeTextNode = false,\n): boolean => {\n  if (!node) {\n    return false;\n  }\n  if (!includeTextNode && detectTextNode(node)) {\n    return false;\n  }\n  if (check(node, nestedCheckParent(node, parent))) {\n    return true;\n  }\n\n  for (const childNode of nestedCheckChildren(node)) {\n    if (nestedCheck(childNode, node, check, includeTextNode)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default ((): typeof nestedCheck => nestedCheck)();\n","import { DebugNode } from '@angular/core';\n\nimport { DebugNodeSelector } from '../../common/core.types';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\n\nimport nestedCheck from './nested-check';\n\nexport default (\n  sel: DebugNode | DebugNodeSelector,\n  callback: (node: DebugNode, parent?: DebugNode) => void | boolean,\n  includeTextNode = false,\n): void => {\n  const el = mockHelperFind(funcGetLastFixture(), sel, undefined);\n  nestedCheck(el, undefined, callback, includeTextNode);\n};\n","import isDebugNode from './format/is-debug-node';\nimport isFixture from './format/is-fixture';\nimport funcGetLastFixture from './func.get-last-fixture';\n\nconst isSelector = (value: any): boolean => {\n  if (typeof value === 'string') {\n    return true;\n  }\n  if (Array.isArray(value) && typeof value[0] === 'string') {\n    return true;\n  }\n  if (isFixture(value)) {\n    return true;\n  }\n  if (isDebugNode(value)) {\n    return true;\n  }\n\n  return true;\n};\n\nexport default (args: any[], isValidValue: (value: any) => boolean, defaultNotFoundValue?: any): [any, any, any] => {\n  let el;\n  let sel;\n  let notFoundValue = defaultNotFoundValue;\n  if (args.length === 3) {\n    [el, sel, notFoundValue] = args;\n  } else if (args.length === 1) {\n    el = funcGetLastFixture();\n    [sel] = args;\n  } else if (isValidValue(args[1]) && isSelector(args[0])) {\n    [el, sel] = args;\n  } else {\n    el = funcGetLastFixture();\n    [sel, notFoundValue] = args;\n  }\n\n  return [el, sel, notFoundValue];\n};\n","export default (selectors: string[], query: string): boolean => {\n  for (const selector of selectors) {\n    const attributes = selector.match(/\\[([^=\\]]+)/g);\n    if (!attributes) {\n      continue;\n    }\n\n    for (const attribute of attributes) {\n      if (attribute === `[${query}`) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n","import { DebugNode, Directive } from '@angular/core';\n\nimport coreInjector from '../common/core.injector';\nimport coreReflectDirectiveResolve from '../common/core.reflect.directive-resolve';\nimport funcGetType from '../common/func.get-type';\n\nconst getMeta = (token: any): Directive | undefined => {\n  try {\n    return coreReflectDirectiveResolve(token);\n  } catch {\n    return undefined;\n  }\n};\n\nexport default (el: DebugNode | null | undefined, token: any): Directive | undefined => {\n  // istanbul ignore if\n  if (!el) {\n    return undefined;\n  }\n\n  try {\n    const provider = funcGetType(token);\n    const instance = coreInjector(provider, el.injector);\n\n    return getMeta(instance.constructor);\n  } catch {\n    return undefined;\n  }\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nexport default (node: MockedDebugNode): string[] => {\n  return (node.injector as any).elDef ? Object.keys((node.injector as any).elDef.element.publicProviders) : [];\n};\n","import { DirectiveIo } from '../../common/core.types';\nimport { MockedDebugNode } from '../../mock-render/types';\nimport funcParseProviderTokensDirectives from '../func.parse-provider-tokens-directives';\n\nexport default (node: MockedDebugNode, key: string): [Array<DirectiveIo>, string[], number] => {\n  const config = (node.injector as any).elDef.element.publicProviders[key];\n  const token = config.provider.value;\n  if (!token) {\n    return [[], [], 0];\n  }\n  const meta = funcParseProviderTokensDirectives(node, token);\n\n  const requiredAttributes = config.bindings.map((binding: any) => binding.nonMinifiedName || binding.name);\n\n  return [meta?.inputs || [], requiredAttributes, config.nodeIndex];\n};\n","import funcDirectiveIoParse from '../../common/func.directive-io-parse';\nimport { MockedDebugNode } from '../../mock-render/types';\nimport funcParseProviderTokensDirectives from '../func.parse-provider-tokens-directives';\n\nimport funcGetPublicProviderKeys from './func.get-public-provider-keys';\nimport funcParseInputsAndRequiresAttributes from './func.parse-inputs-and-requires-attributes';\n\nconst collectSelectors = (node: MockedDebugNode): string[] => {\n  const selectors: string[] = [];\n\n  for (const token of node.providerTokens) {\n    const meta = funcParseProviderTokensDirectives(node, token);\n    if (meta?.selector && selectors.indexOf(meta.selector) === -1) {\n      selectors.push(meta.selector);\n    }\n  }\n\n  return selectors;\n};\n\nconst collectAttributesClassic = (node: MockedDebugNode): string[] => {\n  const result: string[] = [];\n\n  for (const key of funcGetPublicProviderKeys(node)) {\n    const [inputs, expectedAttributes] = funcParseInputsAndRequiresAttributes(node, key);\n    for (const input of inputs) {\n      const { name, alias } = funcDirectiveIoParse(input);\n      const attr = alias || name;\n      if (expectedAttributes.indexOf(name) !== -1 && result.indexOf(attr) === -1) {\n        result.push(attr);\n      }\n    }\n  }\n\n  return result;\n};\n\nconst collectAttributesIvy = (node: MockedDebugNode): string[] => {\n  const result: string[] = [];\n\n  const attrs = (node.injector as any)._tNode?.attrs || [];\n  let step = 2;\n  for (let index = 0; index < attrs.length; index += step) {\n    // 3 is a divider between static and dynamic bindings\n    if (typeof attrs[index] === 'number') {\n      step = 1;\n      continue;\n    }\n    const attr = attrs[index];\n    if ((node.injector as any)._tNode.inputs?.[attr] && result.indexOf(attr) === -1) {\n      result.push(attr);\n    }\n  }\n\n  return result;\n};\n\nexport default (node: MockedDebugNode): [string[], string[]] => {\n  const selectors = collectSelectors(node);\n  const attributes = [...collectAttributesClassic(node), ...collectAttributesIvy(node)];\n\n  return [selectors, attributes];\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nimport detectAttributeInSelectors from './detect-attribute-in-selectors';\nimport detectSelectorsFromNode from './detect-selectors-from-node';\n\nexport default (attribute: string): ((node: MockedDebugNode) => boolean) =>\n  node => {\n    const [selectors, attributes] = detectSelectorsFromNode(node);\n\n    if (attributes.indexOf(attribute) !== -1) {\n      return true;\n    }\n\n    if (detectAttributeInSelectors(selectors, attribute)) {\n      return true;\n    }\n\n    return false;\n  };\n","import { DebugNode, Injector } from '@angular/core';\n\nimport coreInjector from '../common/core.injector';\nimport { AnyDeclaration } from '../common/core.types';\nimport { isNgDef } from '../common/func.is-ng-def';\n\nimport { Node } from './func.get-from-node';\n\nconst getParentWithInjector = (node: (DebugNode & Node) | null): Injector | undefined => {\n  let parent: DebugNode | null = node;\n  while (parent?.injector.constructor.name === 'NullInjector') {\n    parent = parent.parent;\n  }\n\n  if (parent) {\n    return parent.injector;\n  }\n\n  return undefined;\n};\n\nexport default <T>(result: T[], node: DebugNode & Node, proto: AnyDeclaration<T>): void => {\n  if (!node.injector || node.injector.constructor.name === 'NullInjector') {\n    return;\n  }\n\n  const parentInjector = getParentWithInjector(node.parent);\n  const parentInstance = parentInjector ? coreInjector(proto, parentInjector) : undefined;\n  const instance = coreInjector(proto, node.injector);\n  // a way to avoid inherited injections\n  if (parentInstance === instance) {\n    return;\n  }\n\n  if (isNgDef(proto, 't') && instance !== undefined) {\n    result.push(instance);\n  } else if (instance !== undefined && result.indexOf(instance) === -1) {\n    result.push(instance);\n  }\n};\n","import { DebugNode } from '@angular/core';\n\nexport default (node: DebugNode): DebugNode =>\n  node.nativeNode?.nodeName === '#text' && node.parent ? node.parent : node;\n","import { DebugNode } from '@angular/core';\n\nimport { AnyType } from '../common/core.types';\n\nconst detectGatherFlag = (gather: boolean, el: DebugNode | null, node: any): boolean => {\n  // LContainer for structural directives can be a trigger for pipes.\n  if (\n    el &&\n    el.nativeNode &&\n    el.nativeNode.nodeName === '#comment' &&\n    Array.isArray(node) &&\n    node[0] === el.nativeNode\n  ) {\n    return true;\n  }\n\n  // LContainer should stop the scan.\n  if (Array.isArray(node)) {\n    return false;\n  }\n\n  if (!el || !node.nodeName) {\n    return gather;\n  }\n\n  // checking if a commentNode belongs to the current element.\n  // it comes from structural directives.\n  if (node.nodeName === '#comment') {\n    return node === el.nativeNode;\n  }\n\n  // checking if a textNode belongs to the current element.\n  if (node.nodeName === '#text') {\n    return node.parentNode === el.nativeNode;\n  }\n\n  return false;\n};\n\nconst isNotObject = <T>(node: T): boolean => !node || typeof node !== 'object';\n\nconst shouldBeScanned = (scanned: any[], node: any): boolean => scanned.indexOf(node) === -1 && Array.isArray(node);\n\nconst scan = <T>(\n  {\n    result,\n    el,\n    nodes,\n    normalize,\n    proto,\n  }: {\n    el: DebugNode | null;\n    nodes: any[];\n    normalize: (item: T) => T;\n    proto: AnyType<T>;\n    result: T[];\n  },\n  gatherDefault: boolean,\n  scanned: any[] = [],\n): void => {\n  scanned.push(nodes);\n  let gather = gatherDefault;\n\n  let nodesLength = nodes.length;\n  if (nodes.length > 1 && nodes[1] && typeof nodes[1] === 'object' && nodes[1].bindingStartIndex) {\n    nodesLength = nodes[1].bindingStartIndex;\n  }\n\n  for (let index = 0; index < nodesLength; index += 1) {\n    const node = normalize(nodes[index]);\n    if (isNotObject(node)) {\n      continue;\n    }\n\n    if (shouldBeScanned(scanned, node) && Array.isArray(node)) {\n      scan({ result, el, nodes: node, normalize, proto }, gather, scanned);\n    }\n\n    gather = detectGatherFlag(gather, el, node);\n    if (!gather) {\n      continue;\n    }\n\n    if (result.indexOf(node) === -1 && node instanceof proto) {\n      result.push(node);\n    }\n  }\n};\n\nexport default (() => scan)();\n","import { DebugNode } from '@angular/core';\n\nimport { AnyType } from '../common/core.types';\n\nimport { Node } from './func.get-from-node';\nimport funcGetFromNodeElement from './func.get-from-node-element';\nimport funcGetFromNodeScan from './func.get-from-node-scan';\n\nconst detectContextByIndex = (rootView: any, index: number) => {\n  if (typeof rootView[1] === 'object' && rootView[20] === index) {\n    return rootView;\n  }\n\n  for (let i = 21; i < rootView.length; i += 1) {\n    const item = rootView[i];\n    if (Array.isArray(item) && typeof item[1] === 'object' && item[20] === index) {\n      return item;\n    }\n  }\n\n  return undefined;\n};\n\nconst detectContext = (node: DebugNode): any => {\n  let current = node;\n  let context = current.nativeNode?.__ngContext__;\n  while (context === undefined && current.parent) {\n    current = current.parent;\n    context = current.nativeNode.__ngContext__;\n  }\n  if (typeof context !== 'number') {\n    return context;\n  }\n  // welcome to A12 and its optimization\n  // https://github.com/angular/angular/pull/41358\n\n  const rootView = (current.injector as any)._lView;\n  if (Array.isArray(rootView)) {\n    return detectContextByIndex(rootView, context);\n  }\n\n  return undefined;\n};\n\nconst contextToNodes = (context: any): any => (Array.isArray(context) ? context : context?.lView);\n\nexport default <T>(result: T[], node: (DebugNode & Node) | null | undefined, proto: AnyType<T>): void => {\n  if (!node || node._debugContext) {\n    return;\n  }\n\n  const el = funcGetFromNodeElement(node);\n  funcGetFromNodeScan(\n    {\n      el,\n      nodes: contextToNodes(detectContext(node)) || [],\n      normalize: item => item,\n      proto,\n      result,\n    },\n    true,\n  );\n};\n","import { DebugNode } from '@angular/core';\n\nimport { AnyType } from '../common/core.types';\n\nimport { Node } from './func.get-from-node';\nimport funcGetFromNodeElement from './func.get-from-node-element';\nimport funcGetFromNodeScan from './func.get-from-node-scan';\n\nconst normalize = (item: any): any => {\n  if (!item || typeof item !== 'object') {\n    return item;\n  }\n\n  for (const key of ['renderElement', 'renderText', 'instance']) {\n    if (item[key]) {\n      return item[key];\n    }\n  }\n\n  return null;\n};\n\nexport default <T>(result: T[], node: (DebugNode & Node) | null | undefined, proto: AnyType<T>): void => {\n  if (!node || !node._debugContext) {\n    return;\n  }\n\n  const el = funcGetFromNodeElement(node);\n\n  funcGetFromNodeScan(\n    {\n      el,\n      nodes: node._debugContext.view.nodes,\n      normalize,\n      proto,\n      result,\n    },\n    true,\n  );\n};\n","import { DebugNode } from '@angular/core';\n\nimport { AnyDeclaration } from '../common/core.types';\nimport { isNgDef } from '../common/func.is-ng-def';\n\nimport funcGetFromNodeInjector from './func.get-from-node-injector';\nimport funcGetFromNodeIvy from './func.get-from-node-ivy';\nimport funcGetFromNodeStandard from './func.get-from-node-standard';\n\nexport interface Node {\n  _debugContext?: {\n    elDef: {\n      nodeIndex: number;\n    };\n    nodeDef: {\n      nodeIndex: number;\n    };\n    nodeIndex: number;\n    view: {\n      nodes: Array<{\n        instance?: any;\n        renderElement?: any;\n        renderText?: any;\n        value?: any;\n      }>;\n    };\n  };\n  parent?: (DebugNode & Node) | null;\n}\n\nexport default <T>(result: T[], node: DebugNode & Node, proto: AnyDeclaration<T>): T[] => {\n  funcGetFromNodeInjector(result, node, proto);\n  if (!isNgDef(proto, 't') && typeof proto !== 'string') {\n    funcGetFromNodeStandard(result, node, proto);\n    funcGetFromNodeIvy(result, node, proto);\n  }\n\n  return result;\n};\n","import { DebugElement } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\n\nimport { Type } from '../common/core.types';\nimport funcGetName from '../common/func.get-name';\nimport { getSourceOfMock } from '../common/func.get-source-of-mock';\nimport { MockedDebugElement } from '../mock-render/types';\n\nimport nestedCheckParent from './crawl/nested-check-parent';\nimport mockHelperFind from './find/mock-helper.find';\nimport funcGetFromNode from './func.get-from-node';\nimport funcGetLastFixture from './func.get-last-fixture';\nimport funcParseFindArgsName from './func.parse-find-args-name';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nconst parseArgs = <T>(\n  args: any[],\n): {\n  el: MockedDebugElement | null | undefined;\n  notFoundValue: any;\n  sel: Type<T>;\n} => ({\n  el: args[0],\n  notFoundValue: args.length === 3 ? args[2] : defaultNotFoundValue,\n  sel: args[1],\n});\n\nexport default <T>(...args: any[]) => {\n  if (args.length === 1) {\n    try {\n      return TestBed.inject ? TestBed.inject(args[0]) : /* istanbul ignore next */ (TestBed as any).get(args[0]);\n    } catch (error) {\n      // forwarding unexpected errors: https://github.com/help-me-mom/ng-mocks/issues/7041\n      if (!error || typeof error !== 'object' || (error as any).ngTempTokenPath === undefined) {\n        throw error;\n      }\n      throw new Error(`Cannot find an instance via ngMocks.get(${funcParseFindArgsName(args[0])})`);\n    }\n  }\n\n  const { el, sel, notFoundValue } = parseArgs<T>(args);\n  const root: DebugElement | undefined = mockHelperFind(funcGetLastFixture(), el, undefined);\n  const source = getSourceOfMock(sel);\n\n  // Looking in the root.\n  if (root) {\n    const result = funcGetFromNode([], root, source);\n    if (result.length > 0) {\n      return result[0];\n    }\n  }\n\n  // Looking for a related structural directive.\n  if (root) {\n    const parent = nestedCheckParent(root, undefined);\n    if (parent && parent.nativeNode.nodeName === '#comment') {\n      const result = funcGetFromNode([], parent, source);\n      if (result.length > 0) {\n        return result[0];\n      }\n    }\n  }\n\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n  throw new Error(`Cannot find ${funcGetName(sel)} instance via ngMocks.get`);\n};\n","import { DirectiveIo } from '../common/core.types';\nimport funcDirectiveIoParse from '../common/func.directive-io-parse';\nimport { MockedDebugElement } from '../mock-render/types';\n\nimport mockHelperFind from './find/mock-helper.find';\nimport funcGetLastFixture from './func.get-last-fixture';\nimport funcParseProviderTokensDirectives from './func.parse-provider-tokens-directives';\nimport mockHelperGet from './mock-helper.get';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nconst parseArgs = (args: any[]): [MockedDebugElement | null | undefined, string, any] => [\n  args[0],\n  args[1],\n  args.length === 3 ? args[2] : defaultNotFoundValue,\n];\n\nconst attrMatches = (attribute: DirectiveIo, selector: string): string | undefined => {\n  const { name, alias = '' } = funcDirectiveIoParse(attribute);\n\n  if ((!alias && name === selector) || (!!alias && alias === selector)) {\n    return name;\n  }\n\n  return undefined;\n};\n\nconst detectAttribute = (el: MockedDebugElement | null | undefined, attr: 'inputs' | 'outputs', sel: string) => {\n  for (const token of el?.providerTokens || []) {\n    const meta = funcParseProviderTokensDirectives(el, token);\n    if (!meta) {\n      continue;\n    }\n\n    for (const attrDef of meta[attr] || /* istanbul ignore next */ []) {\n      const prop = attrMatches(attrDef, sel);\n      if (prop) {\n        return mockHelperGet(el, token)[prop];\n      }\n    }\n  }\n\n  throw new Error('Not found');\n};\n\nexport default (label: string, attr: 'inputs' | 'outputs', ...args: any[]) => {\n  const [el, sel, notFoundValue] = parseArgs(args);\n\n  try {\n    return detectAttribute(mockHelperFind(funcGetLastFixture(), el, undefined), attr, sel);\n  } catch {\n    // nothing to do\n  }\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n  throw new Error(`Cannot find ${sel} ${label} via ngMocks.${label}`);\n};\n","import funcDirectiveIoParse from '../../common/func.directive-io-parse';\nimport { MockedDebugNode } from '../../mock-render/types';\nimport mockHelperAttributes from '../mock-helper.attributes';\n\nimport funcGetPublicProviderKeys from './func.get-public-provider-keys';\nimport funcParseInputsAndRequiresAttributes from './func.parse-inputs-and-requires-attributes';\n\nconst detectInClassic = (node: MockedDebugNode, attribute: string, value: any): boolean => {\n  for (const key of funcGetPublicProviderKeys(node)) {\n    const [inputs, expectedAttributes, nodeIndex] = funcParseInputsAndRequiresAttributes(node, key);\n    for (const input of inputs) {\n      const { name, alias } = funcDirectiveIoParse(input);\n      if (attribute !== (alias || name) || expectedAttributes.indexOf(name) === -1) {\n        continue;\n      }\n      if (value === (node.injector as any).view.nodes[nodeIndex].instance[name]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst detectInIvy = (node: MockedDebugNode, attribute: string, value: any): boolean => {\n  const attrs = (node.injector as any)._tNode?.attrs || [];\n  let step = 2;\n  for (let index = 0; index < attrs.length; index += step) {\n    // 3 is a divider between static and dynamic bindings\n    if (typeof attrs[index] === 'number') {\n      step = 1;\n      continue;\n    }\n    const attr = attrs[index];\n    if (attr !== attribute || !(node.injector as any)._tNode.inputs?.[attr]) {\n      continue;\n    }\n    for (const attrIndex of (node.injector as any)._tNode.inputs[attr]) {\n      if (typeof attrIndex !== 'number') {\n        continue;\n      }\n\n      const lViewValue = (node.injector as any)._lView?.[attrIndex][attr];\n      const attributeValue = mockHelperAttributes('', 'inputs', node, attr, lViewValue);\n\n      if (value === attributeValue) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nexport default (attribute: string, value: any): ((node: MockedDebugNode) => boolean) =>\n  node => {\n    if (detectInIvy(node, attribute, value)) {\n      return true;\n    }\n\n    return detectInClassic(node, attribute, value);\n  };\n","import coreInjector from '../../common/core.injector';\nimport { AnyType } from '../../common/core.types';\nimport { getSourceOfMock } from '../../common/func.get-source-of-mock';\nimport { MockedDebugNode } from '../../mock-render/types';\n\nexport default (declaration: AnyType<any>): ((node: MockedDebugNode) => boolean) => {\n  const source = getSourceOfMock(declaration);\n\n  return node =>\n    !!node && node.providerTokens.indexOf(source) !== -1 && coreInjector(source, node.injector) !== undefined;\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nexport default (id: string): ((node: MockedDebugNode) => boolean) =>\n  node => {\n    return !!node.references[id];\n  };\n","const regExp = new RegExp('\\\\[.*?\\\\]', 'g');\n\nexport default (selectors: string[], query: string): boolean => {\n  for (const selector of selectors) {\n    const attributes = selector.replace(regExp, '').split(',');\n\n    for (const attribute of attributes) {\n      if (attribute.trim() === query) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nimport detectSelectorsFromNode from './detect-selectors-from-node';\nimport detectTagNameInSelectors from './detect-tag-name-in-selectors';\n\nexport default (attribute: string): ((node: MockedDebugNode) => boolean) =>\n  node => {\n    const [selectors] = detectSelectorsFromNode(node);\n\n    return detectTagNameInSelectors(selectors, attribute);\n  };\n","import { AnyType } from '../../common/core.types';\nimport { MockedDebugNode } from '../../mock-render/types';\n\nimport crawlByAttribute from './crawl-by-attribute';\nimport crawlByAttributeValue from './crawl-by-attribute-value';\nimport crawlByDeclaration from './crawl-by-declaration';\nimport crawlById from './crawl-by-id';\nimport crawlByTagName from './crawl-by-tag-name';\n\ntype SELECTOR = string | AnyType<any> | [any] | [any, any];\n\nconst isCrawlByAttribute = (selector: SELECTOR): selector is [string] => {\n  return Array.isArray(selector) && selector.length === 1 && typeof selector[0] === 'string';\n};\n\nconst isCrawlByAttributeValue = (selector: SELECTOR): selector is [string, any] => {\n  return Array.isArray(selector) && selector.length === 2 && typeof selector[0] === 'string';\n};\n\nconst isCrawlById = (selector: SELECTOR): selector is string => {\n  return typeof selector === 'string' && selector.indexOf('#') === 0 && selector.length > 1;\n};\n\nconst isCrawlByTagName = (selector: SELECTOR): selector is string => {\n  return typeof selector === 'string' && selector.indexOf('#') !== 0 && selector.length > 0;\n};\n\nconst isCrawlByDeclaration = (selector: SELECTOR): selector is AnyType<any> => {\n  return typeof selector === 'function';\n};\n\nexport default (selector: SELECTOR): ((node: MockedDebugNode) => boolean) => {\n  if (isCrawlByAttribute(selector)) {\n    return crawlByAttribute(selector[0]);\n  }\n  if (isCrawlByAttributeValue(selector)) {\n    return crawlByAttributeValue(selector[0], selector[1]);\n  }\n  if (isCrawlById(selector)) {\n    return crawlById(selector.slice(1));\n  }\n  if (isCrawlByTagName(selector)) {\n    return crawlByTagName(selector);\n  }\n  if (isCrawlByDeclaration(selector)) {\n    return crawlByDeclaration(selector);\n  }\n\n  throw new Error('Unknown selector');\n};\n","export default (value: any) => {\n  if (typeof value === 'string') {\n    return true;\n  }\n  if (Array.isArray(value) && typeof value[0] === 'string') {\n    return true;\n  }\n\n  return typeof value === 'function';\n};\n","import mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\n\nimport detectCrawler from './detect-crawler';\nimport detectTextNode from './detect-text-node';\nimport funcIsValidRevealSelector from './func.is-valid-reveal-selector';\nimport mockHelperCrawl from './mock-helper.crawl';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nexport default (...args: any[]): any => {\n  const [el, sel, notFoundValue] = funcParseFindArgs(args, funcIsValidRevealSelector, defaultNotFoundValue);\n  const root = mockHelperFind(funcGetLastFixture(), el, undefined);\n\n  const detector = detectCrawler(sel);\n\n  let result;\n  mockHelperCrawl(root, node => {\n    if (node !== root && !detectTextNode(node) && detector(node)) {\n      result = node;\n\n      return true;\n    }\n\n    return false;\n  });\n  if (result) {\n    return result;\n  }\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n\n  throw new Error(`Cannot find a DebugElement via ngMocks.reveal(${funcParseFindArgsName(sel)})`);\n};\n","import mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\n\nimport detectCrawler from './detect-crawler';\nimport detectTextNode from './detect-text-node';\nimport funcIsValidRevealSelector from './func.is-valid-reveal-selector';\nimport mockHelperCrawl from './mock-helper.crawl';\n\nexport default (...args: any[]): any[] => {\n  const [el, sel] = funcParseFindArgs(args, funcIsValidRevealSelector);\n  const root = mockHelperFind(funcGetLastFixture(), el, undefined);\n\n  const detector = detectCrawler(sel);\n\n  const result: any[] = [];\n  mockHelperCrawl(root, node => {\n    if (node !== root && !detectTextNode(node) && detector(node)) {\n      result.push(node);\n    }\n  });\n\n  return result;\n};\n","import funcIsMock from './func.is-mock';\nimport { MockControlValueAccessor } from './mock-control-value-accessor';\n\n/**\n * isMockControlValueAccessor helps to assert that an instance is a mock ControlValueAccessor\n * to perform valueChange or touch simulations.\n * Usually, it is used in if statements.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockControlValueAccessor\n * @see https://ng-mocks.sudo.eu/api/ngMocks/change\n * @see https://ng-mocks.sudo.eu/api/ngMocks/touch\n */\nexport const isMockControlValueAccessor = <T>(value: T): value is T & MockControlValueAccessor => {\n  if (!funcIsMock(value)) {\n    return false;\n  }\n\n  return !!value.__ngMocksConfig.isControlValueAccessor;\n};\n","export default (value: any): value is HTMLElement => {\n  return !!value && typeof value === 'object' && value.innerHTML !== undefined;\n};\n","import mockHelperStub from '../mock-helper.stub';\n\n/**\n * @see https://developer.mozilla.org/de/docs/Web/Events\n */\nconst preventBubble = ['focus', 'blur', 'load', 'unload', 'change', 'reset', 'scroll'];\n\n// istanbul ignore next\nconst customEvent = (event: string, params?: EventInit) => {\n  const initParams = {\n    bubbles: false,\n    cancelable: false,\n    ...params,\n  };\n  const eventObj = document.createEvent('CustomEvent');\n  eventObj.initCustomEvent(event, initParams.bubbles, initParams.cancelable, null);\n\n  return eventObj;\n};\n\nconst eventCtor =\n  typeof (Event as any) === 'function'\n    ? (event: string, init?: EventInit): CustomEvent => new CustomEvent(event, init)\n    : /* istanbul ignore next */ customEvent;\n\nconst keyMap: Record<string, object> = {\n  alt: {\n    altKey: true,\n    code: 'AltLeft',\n    key: 'Alt',\n    location: 1,\n    which: 18,\n  },\n  arrowdown: {\n    code: 'ArrowDown',\n    key: 'ArrowDown',\n    location: 0,\n    which: 40,\n  },\n  arrowleft: {\n    code: 'ArrowLeft',\n    key: 'ArrowLeft',\n    location: 0,\n    which: 37,\n  },\n  arrowright: {\n    code: 'ArrowRight',\n    key: 'ArrowRight',\n    location: 0,\n    which: 39,\n  },\n  arrowup: {\n    code: 'ArrowUp',\n    key: 'ArrowUp',\n    location: 0,\n    which: 38,\n  },\n  backspace: {\n    code: 'Backspace',\n    key: 'Backspace',\n    location: 0,\n    which: 8,\n  },\n  control: {\n    code: 'ControlLeft',\n    ctrlKey: true,\n    key: 'Control',\n    location: 1,\n    which: 17,\n  },\n  enter: {\n    code: 'Enter',\n    key: 'Enter',\n    location: 0,\n    which: 13,\n  },\n  esc: {\n    code: 'Escape',\n    key: 'Escape',\n    location: 0,\n    which: 27,\n  },\n  meta: {\n    code: 'MetaLeft',\n    key: 'Meta',\n    location: 1,\n    metaKey: true,\n    which: 91,\n  },\n  shift: {\n    code: 'ShiftLeft',\n    key: 'Shift',\n    location: 1,\n    shiftKey: true,\n    which: 16,\n  },\n  space: {\n    code: 'Space',\n    key: ' ',\n    location: 0,\n    which: 32,\n  },\n  tab: {\n    code: 'Tab',\n    key: 'Tab',\n    location: 0,\n    which: 9,\n  },\n};\nfor (let f = 1; f <= 12; f += 1) {\n  keyMap[`f${f}`] = {\n    code: `F${f}`,\n    key: `F${f}`,\n    location: 0,\n    which: f + 111,\n  };\n}\n\nconst getCode = (char: string): string => {\n  const code = char.codePointAt(0);\n  // a-z\n  if (code && code >= 97 && code <= 122) {\n    return `Key${char.toUpperCase()}`;\n  }\n  // A-Z\n  if (code && code >= 65 && code <= 90) {\n    return `Key${char.toUpperCase()}`;\n  }\n  // A-Z\n  if (code && code >= 48 && code <= 57) {\n    return `Digit${char}`;\n  }\n\n  return 'Unknown';\n};\n\nconst applyPayload = (event: Event, payload?: string): void => {\n  const keyData: object = {};\n  for (const key of payload ? payload.split('.') : []) {\n    let map = keyMap[key];\n    if (!map && key.length === 1) {\n      map = {\n        code: getCode(key),\n        key,\n      };\n    }\n\n    if (!map) {\n      throw new Error(`Unknown event part ${key}`);\n    }\n\n    mockHelperStub(keyData, map);\n  }\n\n  if (payload) {\n    mockHelperStub(event, keyData);\n  }\n};\n\nexport default (\n  event: string,\n  init?: EventInit,\n  overrides?: Partial<UIEvent | KeyboardEvent | MouseEvent | TouchEvent | Event>,\n): CustomEvent => {\n  const dot = event.indexOf('.');\n  const [eventName, eventPayload] = dot === -1 ? [event] : [event.slice(0, Math.max(0, dot)), event.slice(dot + 1)];\n  const eventObj = eventCtor(eventName, {\n    bubbles: preventBubble.indexOf(event) === -1,\n    cancelable: true,\n    ...init,\n  });\n  applyPayload(eventObj, eventPayload);\n\n  if (overrides) {\n    mockHelperStub(eventObj, overrides);\n  }\n\n  return eventObj;\n};\n","import { DebugElement } from '@angular/core';\nimport { ComponentFixture } from '@angular/core/testing';\n\nimport { DebugNodeSelector } from '../../common/core.types';\nimport mockHelperFind from '../find/mock-helper.find';\nimport isDebugNode from '../format/is-debug-node';\nimport isFixture from '../format/is-fixture';\nimport isHtmlElement from '../format/is-html-element';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport mockHelperStub from '../mock-helper.stub';\n\nimport mockHelperEvent from './mock-helper.event';\n\n/**\n * @see https://developer.mozilla.org/de/docs/Web/Events\n */\nconst preventBubble = ['focus', 'blur', 'load', 'unload', 'change', 'reset', 'scroll'];\n\nconst toEventObj = (event: string | UIEvent | KeyboardEvent | MouseEvent | TouchEvent | Event): Event => {\n  return typeof event === 'string'\n    ? mockHelperEvent(event, {\n        bubbles: preventBubble.indexOf(event) === -1,\n        cancelable: true,\n      })\n    : event;\n};\n\nconst getNativeElement = (\n  debugElement: DebugElement | HTMLElement | ComponentFixture<any> | undefined | null,\n): HTMLElement | undefined => {\n  if (isDebugNode(debugElement) || isFixture(debugElement)) {\n    return debugElement.nativeElement;\n  }\n  if (isHtmlElement(debugElement)) {\n    return debugElement;\n  }\n\n  return undefined;\n};\n\nexport default (\n  selector: DebugElement | HTMLElement | ComponentFixture<any> | DebugNodeSelector,\n  eventName: string | UIEvent | KeyboardEvent | MouseEvent | TouchEvent | Event,\n  payload?: Partial<UIEvent | KeyboardEvent | MouseEvent | TouchEvent | Event>,\n) => {\n  const debugElement = isHtmlElement(selector) ? selector : mockHelperFind(funcGetLastFixture(), selector, undefined);\n  const nativeElement = getNativeElement(debugElement);\n\n  if (!nativeElement) {\n    throw new Error(\n      `Cannot trigger ${typeof eventName === 'string' ? eventName : eventName.type} event undefined element`,\n    );\n  }\n\n  // nothing to emit on disabled elements\n  if ((nativeElement as HTMLInputElement).disabled) {\n    return;\n  }\n\n  const event = toEventObj(eventName);\n  if (!event.target) {\n    mockHelperStub(event, {\n      target: nativeElement,\n    });\n  }\n  if (payload) {\n    mockHelperStub(event, payload);\n  }\n  nativeElement.dispatchEvent(event);\n};\n","import { DebugNode } from '@angular/core';\n\nimport coreForm from '../../common/core.form';\nimport coreInjector from '../../common/core.injector';\n\nconst message = [\n  'Cannot find ControlValueAccessor on the element.',\n  'If it is a mock input with [formControlName],',\n  'you need either to avoid mocking ReactiveFormsModule',\n  'or to avoid accessing the control in such a way,',\n  'because this tests ReactiveFormsModule instead of own implementation.',\n].join(' ');\n\nexport default (el: DebugNode): Record<keyof any, any> => {\n  const ngControl = coreForm && coreInjector(coreForm.NgControl, el.injector);\n  const valueAccessor = ngControl?.valueAccessor;\n  if (valueAccessor) {\n    return valueAccessor;\n  }\n\n  const formControlDirective = coreForm && coreInjector(coreForm.FormControlDirective, el.injector);\n  if (formControlDirective?.form) {\n    return formControlDirective.form;\n  }\n\n  const ngModel = coreForm && coreInjector(coreForm.NgModel, el.injector);\n  if (ngModel) {\n    return ngModel;\n  }\n\n  throw new Error(message);\n};\n","import { DebugElement } from '@angular/core';\n\nimport coreForm from '../../common/core.form';\nimport { DebugNodeSelector } from '../../common/core.types';\nimport { isMockControlValueAccessor } from '../../common/func.is-mock-control-value-accessor';\nimport helperDefinePropertyDescriptor from '../../mock-service/helper.define-property-descriptor';\nimport helperExtractMethodsFromPrototype from '../../mock-service/helper.extract-methods-from-prototype';\nimport mockHelperTrigger from '../events/mock-helper.trigger';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\nimport mockHelperStubMember from '../mock-helper.stub-member';\n\nimport funcGetVca from './func.get-vca';\n\n// default html behavior\nconst triggerInput = (el: DebugElement, value: any): void => {\n  mockHelperTrigger(el, 'focus');\n\n  const descriptor = Object.getOwnPropertyDescriptor(el.nativeElement, 'value');\n  mockHelperStubMember(el.nativeElement, 'value', value);\n  mockHelperTrigger(el, 'input');\n  mockHelperTrigger(el, 'change');\n  if (descriptor) {\n    helperDefinePropertyDescriptor(el.nativeElement, 'value', descriptor);\n    el.nativeElement.value = value;\n  }\n\n  mockHelperTrigger(el, 'blur');\n};\n\nconst handleKnown = (valueAccessor: any, value: any): boolean => {\n  if (coreForm && valueAccessor instanceof coreForm.AbstractControl) {\n    valueAccessor.setValue(value);\n\n    return true;\n  }\n\n  if (coreForm && valueAccessor instanceof coreForm.NgModel) {\n    valueAccessor.update.emit(value);\n\n    return true;\n  }\n\n  if (isMockControlValueAccessor(valueAccessor.instance)) {\n    valueAccessor.instance.__simulateChange(value);\n\n    return true;\n  }\n\n  return false;\n};\n\nconst hasListener = (el: DebugElement): boolean =>\n  el.listeners.some(listener => listener.name === 'input' || listener.name === 'change');\n\nconst keys = [\n  'onChange',\n  'onChangeCallback',\n  'onChangeCb',\n  'onChangeClb',\n  'onChangeFn',\n\n  '_onChange',\n  '_onChangeCallback',\n  '_onChangeCb',\n  '_onChangeClb',\n  '_onChangeFn',\n\n  'changeFn',\n  '_changeFn',\n\n  'onModelChange',\n\n  'cvaOnChange',\n  'cvaOnChangeCallback',\n  'cvaOnChangeCb',\n  'cvaOnChangeClb',\n  'cvaOnChangeFn',\n\n  '_cvaOnChange',\n  '_cvaOnChangeCallback',\n  '_cvaOnChangeCb',\n  '_cvaOnChangeClb',\n  '_cvaOnChangeFn',\n];\n\nexport default (selector: DebugNodeSelector, value: any, methodName?: string): void => {\n  const el = mockHelperFind(funcGetLastFixture(), selector, undefined);\n  if (!el) {\n    throw new Error(`Cannot find an element via ngMocks.change(${funcParseFindArgsName(selector)})`);\n  }\n\n  const valueAccessor = funcGetVca(el);\n  if (handleKnown(valueAccessor, value) || hasListener(el)) {\n    triggerInput(el, value);\n\n    return;\n  }\n\n  for (const key of methodName ? [methodName] : keys) {\n    if (typeof valueAccessor[key] === 'function') {\n      valueAccessor.writeValue(value);\n      valueAccessor[key](value);\n\n      return;\n    }\n  }\n\n  const methods = helperExtractMethodsFromPrototype(valueAccessor);\n  throw new Error(\n    [\n      'Unsupported type of ControlValueAccessor,',\n      `please ensure it has '${methodName || 'onChange'}' method.`,\n      `If it is a 3rd-party library, please provide the correct name of the method in the 'methodName' parameter.`,\n      'Possible Names: ' + methods.join(', ') + '.',\n    ].join(' '),\n  );\n};\n","import { DebugElement } from '@angular/core';\n\nimport coreForm from '../../common/core.form';\nimport { DebugNodeSelector } from '../../common/core.types';\nimport { isMockControlValueAccessor } from '../../common/func.is-mock-control-value-accessor';\nimport helperExtractMethodsFromPrototype from '../../mock-service/helper.extract-methods-from-prototype';\nimport mockHelperTrigger from '../events/mock-helper.trigger';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\n\nimport funcGetVca from './func.get-vca';\n\n// default html behavior\nconst triggerTouch = (el: DebugElement): void => {\n  mockHelperTrigger(el, 'focus');\n  mockHelperTrigger(el, 'blur');\n};\n\nconst handleKnown = (valueAccessor: any): boolean => {\n  if (coreForm && valueAccessor instanceof coreForm.AbstractControl) {\n    valueAccessor.markAsTouched();\n\n    return true;\n  }\n\n  if (isMockControlValueAccessor(valueAccessor.instance)) {\n    valueAccessor.instance.__simulateTouch();\n\n    return true;\n  }\n\n  return false;\n};\n\nconst hasListener = (el: DebugElement): boolean =>\n  el.listeners.some(listener => listener.name === 'focus' || listener.name === 'blur');\n\nconst keys = [\n  'onTouched',\n  'onTouchedCallback',\n  'onTouchedCb',\n  'onTouchedClb',\n  'onTouchedFn',\n\n  '_onTouched',\n  '_onTouchedCallback',\n  '_onTouchedCb',\n  '_onTouchedClb',\n  '_onTouchedFn',\n\n  'markAsTouched',\n  '_markAsTouched',\n\n  'onModelTouched',\n\n  'cvaOnTouch',\n  'cvaOnTouchCallback',\n  'cvaOnTouchCb',\n  'cvaOnTouchClb',\n  'cvaOnTouchFn',\n\n  '_cvaOnTouch',\n  '_cvaOnTouchCallback',\n  '_cvaOnTouchCb',\n  '_cvaOnTouchClb',\n  '_cvaOnTouchFn',\n];\n\nexport default (sel: DebugElement | DebugNodeSelector, methodName?: string): void => {\n  const el = mockHelperFind(funcGetLastFixture(), sel, undefined);\n  if (!el) {\n    throw new Error(`Cannot find an element via ngMocks.touch(${funcParseFindArgsName(sel)})`);\n  }\n\n  const valueAccessor = funcGetVca(el);\n  if (handleKnown(valueAccessor) || hasListener(el)) {\n    triggerTouch(el);\n\n    return;\n  }\n\n  for (const key of methodName ? [methodName] : keys) {\n    if (typeof valueAccessor[key] === 'function') {\n      valueAccessor[key]();\n\n      return;\n    }\n  }\n\n  const methods = helperExtractMethodsFromPrototype(valueAccessor);\n  throw new Error(\n    [\n      'Unsupported type of ControlValueAccessor,',\n      `please ensure it has '${methodName || 'onTouched'}' method.`,\n      `If it is a 3rd-party library, please provide the correct name of the method in the 'methodName' parameter.`,\n      'Possible Names: ' + methods.join(', ') + '.',\n    ].join(' '),\n  );\n};\n","import { DebugNodeSelector } from '../../common/core.types';\n\nimport mockHelperTrigger from './mock-helper.trigger';\n\nexport default (selector: DebugNodeSelector, payload?: object) => {\n  mockHelperTrigger(selector, 'click', payload);\n};\n","import { DebugElement } from '@angular/core';\n\nimport isDebugNode from '../format/is-debug-node';\n\nimport funcParseFindArgs from './func.parse-find-args';\nimport funcParseFindTerm from './func.parse-find-term';\n\nexport default (...args: any[]): DebugElement[] => {\n  const [el, sel] = funcParseFindArgs(args);\n  if (isDebugNode(sel)) {\n    return [sel as any];\n  }\n\n  return el?.queryAll(funcParseFindTerm(sel)) || [];\n};\n","import { isNgDef } from '../../common/func.is-ng-def';\n\nexport default (value: any): boolean => {\n  return typeof value === 'function' || isNgDef(value, 't');\n};\n","import { getInjection } from '../../common/core.helpers';\nimport { Type } from '../../common/core.types';\nimport { getSourceOfMock } from '../../common/func.get-source-of-mock';\nimport { isNgDef } from '../../common/func.is-ng-def';\nimport mockHelperCrawl from '../crawl/mock-helper.crawl';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetFromNode from '../func.get-from-node';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\n\nimport funcIsValidFindInstanceSelector from './func.is-valid-find-instance-selector';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nexport default <T>(...args: any[]): T => {\n  const [el, sel, notFoundValue] = funcParseFindArgs(args, funcIsValidFindInstanceSelector, defaultNotFoundValue);\n  if (typeof sel !== 'function' && !isNgDef(sel, 't') && typeof sel !== 'string') {\n    throw new Error('Only classes or tokens are accepted');\n  }\n\n  const declaration: Type<T> = getSourceOfMock(sel);\n  const result: T[] = [];\n  const fixture = funcGetLastFixture();\n  if (fixture) {\n    mockHelperCrawl(\n      mockHelperFind(fixture, el, undefined),\n      (node, parent) => {\n        funcGetFromNode(result, node, declaration);\n        if (result.length === 0 && parent && parent.nativeNode.nodeName === '#comment') {\n          funcGetFromNode(result, parent, declaration);\n        }\n\n        return result.length > 0;\n      },\n      true,\n    );\n  } else {\n    try {\n      result.push(getInjection(declaration));\n    } catch (error) {\n      // forwarding unexpected errors: https://github.com/help-me-mom/ng-mocks/issues/7041\n      if (!error || typeof error !== 'object' || (error as any).ngTempTokenPath === undefined) {\n        throw error;\n      }\n    }\n  }\n\n  if (result.length > 0) {\n    return result[0];\n  }\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n  throw new Error(`Cannot find an instance via ngMocks.findInstance(${funcParseFindArgsName(sel)})`);\n};\n","import { getInjection } from '../../common/core.helpers';\nimport { Type } from '../../common/core.types';\nimport { getSourceOfMock } from '../../common/func.get-source-of-mock';\nimport { isNgDef } from '../../common/func.is-ng-def';\nimport mockHelperCrawl from '../crawl/mock-helper.crawl';\nimport mockHelperFindAll from '../find/mock-helper.find-all';\nimport funcGetFromNode from '../func.get-from-node';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\n\nimport funcIsValidFindInstanceSelector from './func.is-valid-find-instance-selector';\n\nexport default <T>(...args: any[]): T[] => {\n  const [el, sel] = funcParseFindArgs(args, funcIsValidFindInstanceSelector);\n  if (typeof sel !== 'function' && !isNgDef(sel, 't') && typeof sel !== 'string') {\n    throw new Error('Only classes or tokens are accepted');\n  }\n\n  const declaration: Type<T> = getSourceOfMock(sel);\n  const result: T[] = [];\n  const scanned: any[] = [];\n  const fixture = funcGetLastFixture();\n  if (fixture) {\n    const elements = mockHelperFindAll(fixture, el, undefined);\n    for (const element of elements) {\n      mockHelperCrawl(\n        element,\n        (node, parent) => {\n          if (scanned.indexOf(node) === -1) {\n            funcGetFromNode(result, node, declaration);\n            scanned.push(node);\n          }\n          if (parent && parent.nativeNode.nodeName === '#comment' && scanned.indexOf(parent) === -1) {\n            funcGetFromNode(result, parent, declaration);\n            scanned.push(parent);\n          }\n        },\n        true,\n      );\n    }\n  } else {\n    try {\n      result.push(getInjection(declaration));\n    } catch {\n      // nothing to do\n    }\n  }\n\n  return result;\n};\n","export default (format: any, html: any) => {\n  return format((html as any[]).map(item => format(item, true)).join(''));\n};\n","import nestedCheckChildren from '../crawl/nested-check-children';\n\nimport handleArray from './handle-array';\nimport isDebugNode from './is-debug-node';\nimport isFixture from './is-fixture';\nimport { FORMAT_SET, FORMAT_SINGLE } from './types';\n\nexport default (handlePrimitives: any) =>\n  (html: any, outer = false) => {\n    const format = (value: Text | Comment | FORMAT_SINGLE | FORMAT_SET, innerOuter = false): any => {\n      if (Array.isArray(value)) {\n        return handleArray(format, value);\n      }\n      if (isFixture(value)) {\n        return format(value.debugElement, outer);\n      }\n      const result = handlePrimitives(format, value, innerOuter);\n      if (result !== undefined) {\n        return result;\n      }\n\n      if (isDebugNode(value) && value.nativeNode.nodeName === '#comment') {\n        return format(nestedCheckChildren(value), true);\n      }\n\n      return isDebugNode(value) ? format(value.nativeNode, innerOuter) : '';\n    };\n\n    return Array.isArray(html) ? html.map((item: any) => format(item, outer)) : format(html, outer);\n  };\n","export default (html: Text): string => html.nodeValue ?? html.textContent ?? html.wholeText;\n","export default (value: any): value is Text => {\n  return !!value && typeof value === 'object' && value.nodeName === '#text';\n};\n","import formatHandler from './format-handler';\nimport handleText from './handle-text';\nimport isHtmlElement from './is-html-element';\nimport isText from './is-text';\n\nconst normalizeValue = (html: string | undefined): string =>\n  html\n    ? html\n        .replace(new RegExp('\\\\s+', 'mg'), ' ')\n        .replace(new RegExp('<!--(.|\\\\n|\\\\r)*?-->|<!--(.|\\\\n|\\\\r)*', 'mg'), '')\n        .replace(new RegExp('\\\\s+', 'mg'), ' ')\n        .replace(new RegExp('>\\\\s+<', 'mg'), '><')\n        .replace(new RegExp('\"\\\\s+>', 'mg'), '\">')\n    : '';\n\nconst normalizeText = (text: string): string =>\n  text\n    .replace(new RegExp('&', 'mg'), '&amp;')\n    .replace(new RegExp('\"', 'mg'), '&quot;')\n    .replace(new RegExp('<', 'mg'), '&lt;')\n    .replace(new RegExp('>', 'mg'), '&gt;')\n    .replace(new RegExp(\"'\", 'mg'), '&#39;');\n\nconst getElementValue = (element: HTMLElement, outer: boolean): string =>\n  outer ? element.outerHTML : element.innerHTML;\n\nconst handlePrimitives = (format: any, value: any, outer: boolean): string | undefined => {\n  if (typeof value === 'string' || value === undefined) {\n    const result = normalizeValue(value);\n\n    return outer ? result : result.trim();\n  }\n  if (isHtmlElement(value)) {\n    return format(getElementValue(value, outer));\n  }\n  if (isText(value)) {\n    return handlePrimitives(format, normalizeText(handleText(value)), outer);\n  }\n\n  return undefined;\n};\n\nexport default (() => formatHandler(handlePrimitives))();\n","import formatHandler from './format-handler';\nimport handleText from './handle-text';\nimport isHtmlElement from './is-html-element';\nimport isText from './is-text';\n\nconst normalizeValue = (html: string | undefined): string => (html ? html.replace(new RegExp('\\\\s+', 'mg'), ' ') : '');\n\nconst getElementValue = (element: HTMLElement, outer: boolean): string => {\n  const value = element.textContent ?? '';\n\n  return outer ? value : value.trim();\n};\n\nconst handlePrimitives = (format: any, value: any, outer: boolean): string | undefined => {\n  if (typeof value === 'string' || value === undefined) {\n    const result = normalizeValue(value);\n\n    return outer ? result : result.trim();\n  }\n  if (isHtmlElement(value)) {\n    return format(getElementValue(value, outer));\n  }\n  if (isText(value)) {\n    return handlePrimitives(format, handleText(value), outer);\n  }\n\n  return undefined;\n};\n\nexport default (() => formatHandler(handlePrimitives))();\n","import { registerMockFunction } from '../mock-service/helper.mock-service';\nimport { CustomMockFunction } from '../mock-service/types';\n\ntype param = 'jasmine' | 'jest' | 'default' | 'reset' | CustomMockFunction;\n\nconst calls: param[] = [];\n\nexport default (type: param) => {\n  if (type === 'reset') {\n    calls.pop();\n  } else {\n    calls.push(type);\n  }\n  const action: param | undefined = calls[calls.length - 1];\n\n  if (action === 'jasmine') {\n    return registerMockFunction(mockName => jasmine.createSpy(mockName));\n  }\n  // istanbul ignore if: because it is run with jasmine\n  if (action === 'jest') {\n    return registerMockFunction(name => jest.fn().mockName(name));\n  }\n  if (!action || action === 'default' || action === 'reset') {\n    return registerMockFunction();\n  }\n\n  return registerMockFunction(action);\n};\n","/* eslint-disable no-console */\n\nimport coreDefineProperty from '../common/core.define-property';\n\n// Thanks Ivy, it does not throw an error, and we have to use injector.\nexport default (defaultMethods: Array<keyof typeof console>, factory: (name: string) => any) =>\n  (...methods: Array<keyof typeof console>): void => {\n    const backup: Array<keyof typeof console> = [];\n\n    beforeEach(() => {\n      for (const method of defaultMethods) {\n        if (methods.indexOf(method) === -1) {\n          methods.push(method);\n        }\n      }\n\n      for (const method of methods) {\n        coreDefineProperty(console, `__ngMocksBackup_${method}`, (console as any)[`__ngMocksBackup_${method}`] || []);\n        (console as any)[`__ngMocksBackup_${method}`].push(console[method]);\n        backup.push(method);\n        console[method] = factory(method) as never;\n      }\n    });\n\n    afterEach(() => {\n      for (const method of backup) {\n        console[method] = (console as any)[`__ngMocksBackup_${method}`].pop();\n      }\n      backup.splice(0, backup.length);\n    });\n  };\n","import helperMockService from '../mock-service/helper.mock-service';\n\nimport mockHelperConsole from './mock-helper.console';\n\nconst factory = (propName: string) => helperMockService.mockFunction(`console.${propName}`);\n\n// Thanks Ivy, it does not throw an error, and we have to use injector.\nexport default mockHelperConsole(['log'], factory);\n","import coreDefineProperty from '../common/core.define-property';\n\nimport mockHelperConsole from './mock-helper.console';\n\nconst factory =\n  (propName: string) =>\n  (...args: any[]) => {\n    const error = new Error(args.join(' '));\n    coreDefineProperty(error, 'ngMocksConsoleCatch', propName);\n    throw error;\n  };\n\n// Thanks Ivy, it does not throw an error, and we have to use injector.\nexport default mockHelperConsole(['warn', 'error'], factory);\n","import { flatten } from '../common/core.helpers';\nimport { AnyDeclaration } from '../common/core.types';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport { IMockBuilderConfig } from '../mock-builder/types';\n\nexport default <T>(\n  def: AnyDeclaration<T> | string | Array<AnyDeclaration<T> | string>,\n  config?: IMockBuilderConfig,\n): void => {\n  const map = ngMocksUniverse.getConfigMock();\n  for (const item of flatten(def)) {\n    if (config) {\n      map.set(item, config);\n    } else {\n      map.delete(item);\n    }\n  }\n};\n","import { Injector } from '@angular/core';\n\nimport { flatten } from '../common/core.helpers';\nimport { AnyDeclaration } from '../common/core.types';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport default <T>(\n  def: AnyDeclaration<T> | string | Array<AnyDeclaration<T> | string>,\n  callback?: (instance: undefined | T, injector: Injector) => void | Partial<T>,\n): void => {\n  const map = ngMocksUniverse.getOverrides();\n  for (const item of flatten(def)) {\n    if (callback) {\n      const set: Set<any> = map.has(item) ? map.get(item) : new Set();\n      set.add(callback);\n      map.set(item, set);\n    } else {\n      map.delete(item);\n    }\n  }\n};\n","import { getTestBed, TestBed, TestBedStatic, TestModuleMetadata } from '@angular/core/testing';\n\nimport coreDefineProperty from '../common/core.define-property';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nconst hooks: {\n  after: Array<\n    (original: TestBedStatic['resetTestingModule'], instance: TestBedStatic) => TestBedStatic['resetTestingModule']\n  >;\n  before: Array<\n    (\n      original: TestBedStatic['configureTestingModule'],\n      instance: TestBedStatic,\n    ) => TestBedStatic['configureTestingModule']\n  >;\n} = ngMocksUniverse.global.get('faster-hooks') || {\n  after: [],\n  before: [],\n};\nngMocksUniverse.global.set('faster-hooks', hooks);\n\nconst configureTestingModule =\n  (\n    original: TestBedStatic['configureTestingModule'],\n    instance: TestBedStatic,\n  ): TestBedStatic['configureTestingModule'] =>\n  (moduleDef: TestModuleMetadata) => {\n    if ((TestBed as any).ngMocksFasterLock) {\n      return original.call(instance, moduleDef);\n    }\n\n    ngMocksUniverse.global.set('bullet:customized', true);\n\n    let final = original;\n    for (const callback of hooks.before) {\n      final = callback(final, instance);\n    }\n\n    try {\n      coreDefineProperty(TestBed, 'ngMocksFasterLock', true);\n\n      return final.call(instance, moduleDef);\n    } finally {\n      coreDefineProperty(TestBed, 'ngMocksFasterLock', undefined);\n    }\n  };\n\nconst resetTestingModule =\n  (original: TestBedStatic['resetTestingModule'], instance: TestBedStatic): TestBedStatic['resetTestingModule'] =>\n  () => {\n    if ((TestBed as any).ngMocksFasterLock) {\n      return original.call(instance);\n    }\n\n    if (ngMocksUniverse.global.has('bullet')) {\n      if (ngMocksUniverse.global.has('bullet:customized')) {\n        ngMocksUniverse.global.set('bullet:reset', true);\n      }\n\n      return instance;\n    }\n    ngMocksUniverse.global.delete('bullet:customized');\n    ngMocksUniverse.global.delete('bullet:reset');\n\n    let final = original;\n    for (const callback of hooks.after) {\n      final = callback(final, instance);\n    }\n\n    try {\n      coreDefineProperty(TestBed, 'ngMocksFasterLock', true);\n\n      return final.call(instance);\n    } finally {\n      coreDefineProperty(TestBed, 'ngMocksFasterLock', undefined);\n    }\n  };\n\nexport default () => {\n  if (!(TestBed as any).ngMocksFasterInstalled) {\n    TestBed.configureTestingModule = configureTestingModule(TestBed.configureTestingModule as never, TestBed as never);\n    TestBed.resetTestingModule = resetTestingModule(TestBed.resetTestingModule as never, TestBed as never);\n    coreDefineProperty(TestBed, 'ngMocksFasterInstalled', true);\n  }\n\n  const testBed = getTestBed();\n  if (!(testBed as any).ngMocksFasterInstalled) {\n    testBed.configureTestingModule = configureTestingModule(testBed.configureTestingModule as never, testBed as never);\n    testBed.resetTestingModule = resetTestingModule(testBed.resetTestingModule as never, testBed as never);\n    coreDefineProperty(testBed, 'ngMocksFasterInstalled', true);\n  }\n\n  return hooks;\n};\n","import { getTestBed } from '@angular/core/testing';\n\nexport default (): void => {\n  const testBed: any = getTestBed();\n  if (testBed.shouldTearDownTestingModule !== undefined && testBed.shouldTearDownTestingModule()) {\n    testBed.tearDownTestingModule();\n  }\n  testBed._instantiated = false;\n  testBed._moduleFactory = undefined;\n  testBed._testModuleRef = null;\n};\n","import { ComponentFixture, getTestBed, TestBed } from '@angular/core/testing';\n\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport mockHelperFasterInstall from './mock-helper.faster-install';\nimport mockHelperFlushTestBed from './mock-helper.flush-test-bed';\n\nconst resetFixtures = (id: never) => {\n  const activeFixtures: Array<ComponentFixture<any> & { ngMocksStackId?: any }> =\n    (getTestBed() as any)._activeFixtures || /* istanbul ignore next */ [];\n\n  let active = 0;\n  for (let i = activeFixtures.length - 1; i >= 0; i -= 1) {\n    if (!activeFixtures[i].ngMocksStackId || activeFixtures[i].ngMocksStackId === id) {\n      activeFixtures[i].ngMocksStackId = undefined;\n      activeFixtures[i].destroy();\n      activeFixtures.splice(i, 1);\n    } else {\n      active += 1;\n    }\n  }\n  if (active === 0) {\n    mockHelperFlushTestBed();\n  }\n};\n\nconst idAdd = (id: any) => {\n  const bulletStack: any[] = ngMocksUniverse.global.get('bullet:stack') ?? [];\n  bulletStack.push(id);\n  ngMocksUniverse.global.set('bullet:stack', bulletStack);\n  ngMocksUniverse.global.set('bullet:stack:id', id);\n};\nconst idRemove = (id: any) => {\n  const bulletStack: any[] = ngMocksUniverse.global.get('bullet:stack');\n  bulletStack.splice(bulletStack.indexOf(id), 1);\n  if (bulletStack.length > 0) {\n    ngMocksUniverse.global.set('bullet:stack:id', bulletStack[bulletStack.length - 1]);\n  } else {\n    ngMocksUniverse.global.delete('bullet:stack:id');\n  }\n\n  resetFixtures(id as never);\n};\n\nexport default () => {\n  mockHelperFasterInstall();\n\n  const idAll = {};\n  const idEach = {};\n\n  beforeAll(() => {\n    if (ngMocksUniverse.global.has('bullet:customized')) {\n      TestBed.resetTestingModule();\n    }\n    ngMocksUniverse.global.set('bullet', true);\n    idAdd(idAll);\n  });\n\n  beforeEach(() => {\n    idAdd(idEach);\n  });\n  afterEach(() => {\n    idRemove(idEach);\n  });\n\n  afterAll(() => {\n    idRemove(idAll);\n    ngMocksUniverse.global.delete('bullet');\n    if (ngMocksUniverse.global.has('bullet:reset')) {\n      TestBed.resetTestingModule();\n    }\n  });\n};\n","import collectDeclarations from '../resolve/collect-declarations';\n\nimport coreConfig from './core.config';\nimport { flatten } from './core.helpers';\nimport { AnyDeclaration } from './core.types';\nimport funcGetType from './func.get-type';\n\nconst iterator = <T = any>(\n  source: AnyDeclaration<T>,\n  callback: (source: AnyDeclaration<T>) => void,\n  scanned = new Set<any>(),\n): void => {\n  const meta = collectDeclarations(source);\n  for (const decorator of meta.decorators) {\n    for (const key of coreConfig.dependencies) {\n      if (!meta[decorator][key]) {\n        continue;\n      }\n      for (const def of flatten(meta[decorator][key])) {\n        const declaration = funcGetType(def);\n        if (!declaration || scanned.has(declaration)) {\n          continue;\n        }\n        scanned.add(declaration);\n        callback(declaration);\n        iterator(declaration, callback, scanned);\n      }\n    }\n  }\n};\n\nexport default iterator;\n","import ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport default () => {\n  ngMocksUniverse.cacheDeclarations.clear();\n  ngMocksUniverse.config.get('ngMocksDepsSkip')?.clear();\n};\n","import { AnyDeclaration } from '../common/core.types';\nimport funcIterateDeclaration from '../common/func.iterate-declaration';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport funcGlobalPrepare from './func.global-prepare';\n\nconst action = (source: AnyDeclaration<any>): void => {\n  ngMocksUniverse.getDefaults().set(source, ['exclude']);\n};\nexport default (source: AnyDeclaration<any>, recursively = false): void => {\n  funcGlobalPrepare();\n  action(source);\n\n  if (recursively) {\n    funcIterateDeclaration(source, action);\n  }\n};\n","import { AnyDeclaration } from '../common/core.types';\nimport funcIterateDeclaration from '../common/func.iterate-declaration';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport funcGlobalPrepare from './func.global-prepare';\n\nconst action = (source: AnyDeclaration<any>): void => {\n  ngMocksUniverse.getDefaults().set(source, ['keep']);\n};\nexport default (source: AnyDeclaration<any>, recursively = false): void => {\n  funcGlobalPrepare();\n  action(source);\n\n  if (recursively) {\n    funcIterateDeclaration(source, action);\n  }\n};\n","import { AnyDeclaration } from '../common/core.types';\nimport funcIterateDeclaration from '../common/func.iterate-declaration';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport funcGlobalPrepare from './func.global-prepare';\n\nconst action = (source: AnyDeclaration<any>): void => {\n  ngMocksUniverse.getDefaults().set(source, ['mock']);\n};\nexport default (source: AnyDeclaration<any>, recursively = false): void => {\n  funcGlobalPrepare();\n  action(source);\n\n  if (recursively) {\n    funcIterateDeclaration(source, action);\n  }\n};\n","import { AnyType } from '../common/core.types';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport funcGlobalPrepare from './func.global-prepare';\n\nexport default (source: AnyType<any>, destination: AnyType<any>): void => {\n  let fail = true;\n  if (isNgDef(source, 'm') && isNgDef(destination, 'm')) {\n    fail = false;\n  } else if (isNgDef(source, 'c') && isNgDef(destination, 'c')) {\n    fail = false;\n  } else if (isNgDef(source, 'd') && isNgDef(destination, 'd')) {\n    fail = false;\n  } else if (isNgDef(source, 'p') && isNgDef(destination, 'p')) {\n    fail = false;\n  }\n\n  if (fail) {\n    throw new Error('Cannot replace the declaration, both have to be a Module, a Component, a Directive or a Pipe');\n  }\n\n  funcGlobalPrepare();\n  ngMocksUniverse.getDefaults().set(source, ['replace', destination]);\n};\n","import { AnyDeclaration } from '../common/core.types';\nimport funcIterateDeclaration from '../common/func.iterate-declaration';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport funcGlobalPrepare from './func.global-prepare';\nimport mockHelperDefaultMock from './mock-helper.default-mock';\n\nconst action = (source: AnyDeclaration<any>): void => {\n  ngMocksUniverse.getDefaults().delete(source);\n  mockHelperDefaultMock(source);\n};\n\nexport default (source: AnyDeclaration<any>, recursively = false): void => {\n  funcGlobalPrepare();\n  action(source);\n\n  if (recursively) {\n    funcIterateDeclaration(source, action);\n  }\n};\n","import { TestModuleMetadata } from '@angular/core/testing';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport { flatten, mapKeys, mapValues } from '../common/core.helpers';\nimport coreReflectModuleResolve from '../common/core.reflect.module-resolve';\nimport funcGetType from '../common/func.get-type';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport { isNgInjectionToken } from '../common/func.is-ng-injection-token';\nimport { isNgModuleDefWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport { MockComponent } from '../mock-component/mock-component';\nimport { MockDirective } from '../mock-directive/mock-directive';\nimport { MockModule } from '../mock-module/mock-module';\nimport { MockPipe } from '../mock-pipe/mock-pipe';\nimport mockProvider from '../mock-service/mock-provider';\n\ntype Data = {\n  declarations: any[];\n  exclude: Set<any>;\n  imports: any[];\n  keep: Set<any>;\n  mock: Set<any>;\n  optional: Map<any, any>;\n  providers: any[];\n  skip: Set<any>;\n};\n\nconst skipDef = (def: any, skip: Set<any>, exclude: Set<any>): boolean => {\n  if (skip.has(def)) {\n    return true;\n  }\n  skip.add(def);\n\n  return exclude.has(def);\n};\n\nconst createMetaHandler = (\n  optional: Map<any, any>,\n  proto: any,\n  imports: any[],\n  declarations: any[],\n  providers: any[],\n): void => {\n  const def = optional.get(proto) || proto;\n\n  if (isNgDef(def, 'm')) {\n    imports.push(def);\n  } else if (isNgDef(def, 'c') || isNgDef(def, 'd')) {\n    declarations.push(def);\n  } else if (isNgDef(def, 'p')) {\n    declarations.push(def);\n    providers.push(def);\n  } else if (!isNgInjectionToken(def)) {\n    providers.push(def);\n  }\n};\n\nconst createMeta = ({ keep, skip, optional, exclude, imports, declarations, providers }: Data): TestModuleMetadata => {\n  for (const proto of keep) {\n    if (skip.has(proto) || exclude.has(proto) || optional.has(proto)) {\n      continue;\n    }\n    createMetaHandler(optional, proto, imports, declarations, providers);\n  }\n\n  return { declarations, imports, providers };\n};\n\nconst typeMap: Array<[any, string]> = [\n  ['m', 'module'],\n  ['c', 'component'],\n  ['d', 'directive'],\n  ['p', 'pipe'],\n];\n\nconst getType = (def: any, keep: Set<any>): string => {\n  if (isNgModuleDefWithProviders(def)) {\n    return 'module-with-providers';\n  }\n  for (const [flag, value] of typeMap) {\n    if (isNgDef(def, flag)) {\n      return flag === 'm' && keep.has(def) ? `${value}-keep` : value;\n    }\n  }\n\n  return '';\n};\n\nconst handleModuleWithProviders = (data: Data, def: any): void => {\n  if (data.skip.has(def.ngModule)) {\n    return;\n  }\n  data.skip.add(def.ngModule);\n  if (data.exclude.has(def.ngModule)) {\n    return;\n  }\n\n  data.imports.push(data.keep.has(def.ngModule) ? def : MockModule(def));\n};\n\nconst handleDeclaration = (data: Data, def: any, callback: any, bucket: any[]): void => {\n  if (skipDef(def, data.skip, data.exclude)) {\n    return;\n  }\n\n  bucket.push(data.keep.has(def) ? def : callback(def));\n};\n\nconst handleDestructuring = (data: Data, def: any, callback: any): void => {\n  if (skipDef(def, data.skip, data.exclude)) {\n    return;\n  }\n\n  const meta = coreReflectModuleResolve(def);\n  for (const toMock of flatten([meta.declarations, meta.imports])) {\n    callback(data, toMock);\n  }\n  for (const toMock of meta.providers ? flatten(meta.providers) : []) {\n    resolveProvider(data, toMock);\n  }\n};\n\nconst resolveProvider = ({ skip, keep, providers, exclude }: Data, def: any): void => {\n  const provider = funcGetType(def);\n  skip.add(provider);\n  if (exclude.has(provider)) {\n    return;\n  }\n\n  const providerDef = keep.has(provider) ? def : mockProvider(def);\n  if (providerDef) {\n    providers.push(providerDef);\n  }\n};\n\nconst resolveMap: Record<string, any> = {\n  component: MockComponent,\n  directive: MockDirective,\n  pipe: MockPipe,\n};\n\nconst resolveHandler = (data: Data, type: string, def: any, skipDestruction: boolean): void => {\n  if (type === 'module-with-providers') {\n    handleModuleWithProviders(data, def);\n  } else if (type === 'module-keep') {\n    handleDeclaration(data, def, MockModule, data.imports); // MockModule will not be called because the def is kept.\n  } else if (type === 'module' && skipDestruction) {\n    handleDeclaration(data, def, MockModule, data.imports);\n  } else if (type === 'module') {\n    handleDestructuring(data, def, resolve);\n  } else if (resolveMap[type]) {\n    handleDeclaration(data, def, resolveMap[type], data.declarations);\n  } else {\n    resolveProvider(data, def);\n  }\n};\n\nconst resolve = (data: Data, proto: any, skipDestruction = true): void => {\n  if (!proto) {\n    return;\n  }\n\n  const type = getType(proto, data.keep);\n  let def: any;\n\n  // an attempt to replace declarations.\n  if (type !== 'module-with-providers') {\n    const value = data.optional.get(proto);\n    if (value && value !== proto) {\n      def = value;\n      data.keep.add(def);\n    }\n  }\n  if (!def) {\n    def = proto;\n  }\n\n  resolveHandler(data, type, def, skipDestruction);\n};\n\nconst generateDataWithUniverse = (keep: Set<any>, mock: Set<any>, exclude: Set<any>, optional: Map<any, any>): void => {\n  for (const k of mapKeys(ngMocksUniverse.getDefaults())) {\n    const v = ngMocksUniverse.getBuildDeclaration(k);\n    if (keep.has(k) || mock.has(k) || exclude.has(k)) {\n      continue;\n    }\n    optional.set(k, v);\n\n    if (v === null) {\n      exclude.add(k);\n    } else if (v === undefined) {\n      mock.add(k);\n    } else if (k === v) {\n      keep.add(k);\n    }\n  }\n};\n\nconst generateData = (protoKeep: any, protoMock: any, protoExclude: any): Data => {\n  const keep = new Set(flatten(protoKeep || []));\n  const mock = new Set(flatten(protoMock || []));\n  const exclude = new Set(flatten(protoExclude || []));\n  const optional = new Map();\n  generateDataWithUniverse(keep, mock, exclude, optional);\n\n  return {\n    declarations: [],\n    exclude,\n    imports: [],\n    keep,\n    mock,\n    optional,\n    providers: [],\n    skip: new Set(),\n  };\n};\n\nexport default (keep: any, mock: any = null, exclude: any = null): TestModuleMetadata => {\n  const data: Data = generateData(keep, mock, exclude);\n\n  const resolutions = new Map();\n  ngMocksUniverse.config.set('ngMocksDepsResolution', resolutions);\n  for (const mockDef of mapValues(data.keep)) {\n    resolutions.set(mockDef, 'keep');\n  }\n  for (const mockDef of mapValues(data.exclude)) {\n    resolutions.set(mockDef, 'exclude');\n  }\n\n  ngMocksUniverse.config.set('mockNgDefResolver', new CoreDefStack());\n  for (const def of mapValues(data.mock)) {\n    resolutions.set(def, 'mock');\n    if (data.optional.has(def)) {\n      continue;\n    }\n    resolve(data, def, false);\n  }\n  const meta = createMeta(data);\n  ngMocksUniverse.config.delete('mockNgDefResolver');\n  ngMocksUniverse.config.delete('ngMocksDepsResolution');\n\n  return meta;\n};\n","import mockHelperAttributes from './mock-helper.attributes';\n\nexport default (...args: any[]) => mockHelperAttributes('input', 'inputs', ...args);\n","import mockHelperAttributes from './mock-helper.attributes';\n\nexport default (...args: any[]) => mockHelperAttributes('output', 'outputs', ...args);\n","import coreConfig from '../common/core.config';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport default (): void => {\n  ngMocksUniverse.builtDeclarations = new Map();\n  ngMocksUniverse.builtProviders = new Map();\n  ngMocksUniverse.cacheDeclarations = new Map();\n  ngMocksUniverse.cacheProviders = new Map();\n  ngMocksUniverse.config = new Map();\n  ngMocksUniverse.configInstance = new Map();\n  ngMocksUniverse.flags = new Set(coreConfig.flags);\n  ngMocksUniverse.touches = new Set();\n};\n","import { QueryList, TemplateRef, ViewContainerRef } from '@angular/core';\n\nimport funcIsMock from '../../common/func.is-mock';\nimport { MockConfig } from '../../common/mock';\n\nconst getValVcr = (entryPoint: MockConfig): Array<[any, ViewContainerRef]> => {\n  const result: Array<[any, ViewContainerRef]> = [];\n\n  for (const key of entryPoint.__ngMocksConfig.queryScanKeys || /* istanbul ignore next */ []) {\n    const value = (entryPoint as any)[key];\n    const vcr = (entryPoint as any)[`__ngMocksVcr_${key}`];\n\n    const scanValue = value instanceof QueryList ? value.toArray() : [value];\n    const scanVcr = vcr instanceof QueryList ? vcr.toArray() : [vcr];\n\n    for (let index = 0; index < scanValue.length; index += 1) {\n      result.push([scanValue[index], scanVcr[index]]);\n    }\n  }\n\n  return result;\n};\n\nconst handleDirective = (\n  entryPoint: {\n    __template?: TemplateRef<any>;\n    __vcr?: ViewContainerRef;\n  },\n  isExpectedTemplate: (tpl: TemplateRef<any>) => boolean,\n  callback: (vcr: ViewContainerRef, tpl: TemplateRef<any>) => boolean,\n): boolean => {\n  return (\n    !!entryPoint.__template &&\n    !!entryPoint.__vcr &&\n    isExpectedTemplate(entryPoint.__template) &&\n    callback(entryPoint.__vcr, entryPoint.__template)\n  );\n};\n\nconst isRightTemplate = (\n  localVcr: ViewContainerRef | undefined,\n  localValue: any,\n  isExpectedTemplate: (tpl: TemplateRef<any>) => boolean,\n): boolean => {\n  return !!localVcr && localValue instanceof TemplateRef && isExpectedTemplate(localValue);\n};\n\nconst findDeep = (\n  entryPoint: object,\n  isExpectedTemplate: (tpl: TemplateRef<any>) => boolean,\n  callback: (vcr: ViewContainerRef, tpl: TemplateRef<any>) => boolean,\n): boolean => {\n  if (!funcIsMock(entryPoint)) {\n    throw new Error('Only instances of mock declarations are accepted');\n  }\n\n  // structural directive\n  if (handleDirective(entryPoint, isExpectedTemplate, callback)) {\n    return true;\n  }\n\n  for (const [localValue, localVcr] of getValVcr(entryPoint)) {\n    if (funcIsMock(localValue) && findDeep(localValue, isExpectedTemplate, callback)) {\n      return true;\n    }\n    if (isRightTemplate(localVcr, localValue, isExpectedTemplate)) {\n      return callback(localVcr, localValue);\n    }\n  }\n\n  return false;\n};\n\nexport default ((): typeof findDeep => findDeep)();\n","import { TemplateRef } from '@angular/core';\n\nimport coreInjector from '../../common/core.injector';\nimport funcIsMock from '../../common/func.is-mock';\n\nexport default (param: any): TemplateRef<any> => {\n  if (param instanceof TemplateRef) {\n    return param;\n  }\n  if (funcIsMock(param) && param.__template) {\n    return param.__template;\n  }\n\n  const injector = param?.nativeNode && param.injector;\n  if (injector) {\n    const template = coreInjector(TemplateRef, injector);\n\n    if (template) {\n      return template;\n    }\n  }\n\n  const error = new Error(\n    'Unknown template has been passed, only TemplateRef or a mock structural directive are supported',\n  );\n  (error as any).param = param;\n\n  throw error;\n};\n","import funcFindDeep from './func.find-deep';\nimport funcParseTemplate from './func.parse-template';\n\nexport default (instance: object, param?: object) => {\n  const template = param ? funcParseTemplate(param) : undefined;\n\n  let result = false;\n  funcFindDeep(\n    instance,\n    tpl => {\n      if (!template) {\n        return true;\n      }\n\n      return tpl.elementRef.nativeElement === template.elementRef.nativeElement;\n    },\n    vcr => {\n      vcr.clear();\n      result = true;\n\n      return false;\n    },\n  );\n\n  if (!result) {\n    throw new Error('Cannot find path to the TemplateRef');\n  }\n};\n","import funcFindDeep from './func.find-deep';\nimport funcParseTemplate from './func.parse-template';\n\nexport default (instance: object, param: object, $implicit?: any, variables?: Record<keyof any, any>) => {\n  const template = funcParseTemplate(param);\n\n  const result = funcFindDeep(\n    instance,\n    tpl => tpl.elementRef.nativeElement === template.elementRef.nativeElement,\n    (vcr, tpl) => {\n      const context = {\n        ...variables,\n        $implicit,\n      };\n      vcr.clear();\n      vcr.createEmbeddedView(tpl, context).detectChanges();\n\n      return true;\n    },\n  );\n\n  if (!result) {\n    throw new Error('Cannot find path to the TemplateRef');\n  }\n};\n","import { Type } from '../../common/core.types';\nimport crawlByAttribute from '../crawl/crawl-by-attribute';\nimport crawlByAttributeValue from '../crawl/crawl-by-attribute-value';\nimport crawlByDeclaration from '../crawl/crawl-by-declaration';\nimport crawlById from '../crawl/crawl-by-id';\n\nexport default (selector: string | Type<any> | [string] | [string, any] | any) => {\n  if (typeof selector === 'string') {\n    return crawlById(selector);\n  }\n  if (Array.isArray(selector) && selector.length === 1 && typeof selector[0] === 'string') {\n    return crawlByAttribute(selector[0]);\n  }\n  if (Array.isArray(selector) && selector.length === 2 && typeof selector[0] === 'string') {\n    return crawlByAttributeValue(selector[0], selector[1]);\n  }\n  if (typeof selector === 'function') {\n    return crawlByDeclaration(selector);\n  }\n\n  throw new Error('Unknown selector');\n};\n","import { TemplateRef } from '@angular/core';\n\nimport coreInjector from '../../common/core.injector';\nimport { MockedDebugNode } from '../../mock-render/types';\nimport detectTextNode from '../crawl/detect-text-node';\n\nexport default (\n    result: Array<TemplateRef<any>>,\n    detector: (node: MockedDebugNode) => boolean,\n    limit = 0,\n  ): ((node: MockedDebugNode) => boolean) =>\n  node => {\n    try {\n      const instance = !detectTextNode(node) && detector(node) ? coreInjector(TemplateRef, node.injector) : undefined;\n      if (instance) {\n        result.push(instance);\n      }\n    } catch {\n      // nothing to do\n    }\n\n    return !!limit && result.length === limit;\n  };\n","export default (value: any): boolean => {\n  if (typeof value === 'string') {\n    return true;\n  }\n  if (Array.isArray(value) && typeof value[0] === 'string') {\n    return true;\n  }\n  if (typeof value === 'function') {\n    return true;\n  }\n\n  return false;\n};\n","import { TemplateRef } from '@angular/core';\n\nimport nestedCheck from '../crawl/nested-check';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\n\nimport detectCrawler from './detect-crawler';\nimport detectTemplateRef from './detect-template-ref';\nimport funcIsValidTemplateRefSelector from './func.is-valid-template-ref-selector';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nexport default (...args: any[]) => {\n  const [el, sel, notFoundValue] = funcParseFindArgs(args, funcIsValidTemplateRefSelector, defaultNotFoundValue);\n\n  const result: Array<TemplateRef<any>> = [];\n  const detector = detectCrawler(sel);\n  nestedCheck(mockHelperFind(funcGetLastFixture(), el, undefined), undefined, detectTemplateRef(result, detector, 1));\n  if (result.length > 0) {\n    return result[0];\n  }\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n\n  throw new Error(`Cannot find a TemplateRef via ngMocks.findTemplateRef(${funcParseFindArgsName(sel)})`);\n};\n","import { TemplateRef } from '@angular/core';\n\nimport nestedCheck from '../crawl/nested-check';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\n\nimport detectCrawler from './detect-crawler';\nimport detectTemplateRef from './detect-template-ref';\nimport funcIsValidTemplateRefSelector from './func.is-valid-template-ref-selector';\n\nexport default (...args: any[]): Array<TemplateRef<any>> => {\n  const [el, sel] = funcParseFindArgs(args, funcIsValidTemplateRefSelector);\n\n  const result: Array<TemplateRef<any>> = [];\n  const detector = detectCrawler(sel);\n  nestedCheck(mockHelperFind(funcGetLastFixture(), el, undefined), undefined, detectTemplateRef(result, detector));\n\n  return result;\n};\n","import coreConfig from '../common/core.config';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport mockHelperCrawl from './crawl/mock-helper.crawl';\nimport mockHelperReveal from './crawl/mock-helper.reveal';\nimport mockHelperRevealAll from './crawl/mock-helper.reveal-all';\nimport mockHelperChange from './cva/mock-helper.change';\nimport mockHelperTouch from './cva/mock-helper.touch';\nimport mockHelperClick from './events/mock-helper.click';\nimport mockHelperEvent from './events/mock-helper.event';\nimport mockHelperTrigger from './events/mock-helper.trigger';\nimport mockHelperFind from './find/mock-helper.find';\nimport mockHelperFindAll from './find/mock-helper.find-all';\nimport mockHelperFindInstance from './find-instance/mock-helper.find-instance';\nimport mockHelperFindInstances from './find-instance/mock-helper.find-instances';\nimport mockHelperFormatHtml from './format/mock-helper.format-html';\nimport mockHelperFormatText from './format/mock-helper.format-text';\nimport mockHelperAutoSpy from './mock-helper.auto-spy';\nimport mockHelperConsoleIgnore from './mock-helper.console-ignore';\nimport mockHelperConsoleThrow from './mock-helper.console-throw';\nimport mockHelperDefaultConfig from './mock-helper.default-config';\nimport mockHelperDefaultMock from './mock-helper.default-mock';\nimport mockHelperFaster from './mock-helper.faster';\nimport mockHelperFlushTestBed from './mock-helper.flush-test-bed';\nimport mockHelperGet from './mock-helper.get';\nimport mockHelperGlobalExclude from './mock-helper.global-exclude';\nimport mockHelperGlobalKeep from './mock-helper.global-keep';\nimport mockHelperGlobalMock from './mock-helper.global-mock';\nimport mockHelperGlobalReplace from './mock-helper.global-replace';\nimport mockHelperGlobalWipe from './mock-helper.global-wipe';\nimport mockHelperGuts from './mock-helper.guts';\nimport mockHelperInput from './mock-helper.input';\nimport mockHelperOutput from './mock-helper.output';\nimport mockHelperReset from './mock-helper.reset';\nimport mockHelperStub from './mock-helper.stub';\nimport mockHelperStubMember from './mock-helper.stub-member';\nimport mockHelperHide from './render/mock-helper.hide';\nimport mockHelperRender from './render/mock-helper.render';\nimport mockHelperFindTemplateRef from './template-ref/mock-helper.find-template-ref';\nimport mockHelperFindTemplateRefs from './template-ref/mock-helper.find-template-refs';\n\nconst flagNames = ['onMockBuilderMissingDependency', 'onMockInstanceRestoreNeed', 'onTestBedFlushNeed'] as const;\n\nexport default {\n  autoSpy: mockHelperAutoSpy,\n  change: mockHelperChange,\n  click: mockHelperClick,\n  config: (config: {\n    mockRenderCacheSize?: number | null;\n    onMockBuilderMissingDependency?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n    onMockInstanceRestoreNeed?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n    onTestBedFlushNeed?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n  }) => {\n    const flags = ngMocksUniverse.global.get('flags');\n    for (const flag of flagNames) {\n      if (config[flag] === null) {\n        flags[flag] = coreConfig[flag];\n      } else if (config[flag] !== undefined) {\n        flags[flag] = config[flag];\n      }\n    }\n    if (config.mockRenderCacheSize === null) {\n      ngMocksUniverse.global.delete('mockRenderCacheSize');\n    } else if (config.mockRenderCacheSize !== undefined) {\n      ngMocksUniverse.global.set('mockRenderCacheSize', config.mockRenderCacheSize);\n    }\n  },\n  crawl: mockHelperCrawl,\n  defaultConfig: mockHelperDefaultConfig,\n  defaultMock: mockHelperDefaultMock,\n  event: mockHelperEvent,\n  faster: mockHelperFaster,\n  find: mockHelperFind,\n  findAll: mockHelperFindAll,\n  findInstance: mockHelperFindInstance,\n  findInstances: mockHelperFindInstances,\n  findTemplateRef: mockHelperFindTemplateRef,\n  findTemplateRefs: mockHelperFindTemplateRefs,\n  flushTestBed: mockHelperFlushTestBed,\n  formatHtml: mockHelperFormatHtml,\n  formatText: mockHelperFormatText,\n  get: mockHelperGet,\n  globalExclude: mockHelperGlobalExclude,\n  globalKeep: mockHelperGlobalKeep,\n  globalMock: mockHelperGlobalMock,\n  globalReplace: mockHelperGlobalReplace,\n  globalWipe: mockHelperGlobalWipe,\n  guts: mockHelperGuts,\n  hide: mockHelperHide,\n  ignoreOnConsole: mockHelperConsoleIgnore,\n  input: mockHelperInput,\n  output: mockHelperOutput,\n  render: mockHelperRender,\n  reset: mockHelperReset,\n  reveal: mockHelperReveal,\n  revealAll: mockHelperRevealAll,\n  stub: mockHelperStub,\n  stubMember: mockHelperStubMember,\n  throwOnConsole: mockHelperConsoleThrow,\n  touch: mockHelperTouch,\n  trigger: mockHelperTrigger,\n};\n","/* eslint-disable max-lines */\n\nimport { DebugNode, EventEmitter, InjectionToken, Injector, Provider, TemplateRef } from '@angular/core';\nimport { ComponentFixture, TestModuleMetadata } from '@angular/core/testing';\n\nimport { AnyDeclaration, AnyType, DebugNodeSelector, Type } from '../common/core.types';\nimport { NgModuleWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport { IMockBuilderConfig } from '../mock-builder/types';\nimport { MockedDebugElement, MockedDebugNode } from '../mock-render/types';\nimport { CustomMockFunction, MockedFunction } from '../mock-service/types';\n\nimport { FORMAT_SET, FORMAT_SINGLE } from './format/types';\nimport mockHelperObject from './mock-helper.object';\n\n/**\n * ngMocks provides a lot of tools to simply testing.\n *\n * @see https://ng-mocks.sudo.eu/api/ngMocks\n */\nexport const ngMocks: {\n  /**\n   * ngMocks.autoSpy installs proper spies instead of empty functions.\n   *\n   * @see https://ng-mocks.sudo.eu/extra/auto-spy\n   */\n  autoSpy(type: 'jasmine' | 'jest' | 'default' | 'reset'): void;\n\n  /**\n   * ngMocks.autoSpy installs proper spies instead of empty functions.\n   *\n   * @see https://ng-mocks.sudo.eu/extra/auto-spy\n   */\n  autoSpy(type: CustomMockFunction): void;\n\n  /**\n   * ngMocks.defaultConfig sets the default config of declarations for MockBuilder.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/defaultConfig\n   */\n  defaultConfig<T>(token: string | AnyDeclaration<T>, config?: IMockBuilderConfig): void;\n\n  /**\n   * ngMocks.defaultMock sets default customizations of mock tokens.\n   * It helps to avoid repetitions from test to test.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/defaultMock\n   */\n  defaultMock<T>(\n    token: InjectionToken<T>,\n    handler?: (value: undefined | T, injector: Injector) => undefined | Partial<T>,\n    config?: IMockBuilderConfig,\n  ): void;\n\n  /**\n   * ngMocks.defaultMock sets default customizations of mock string tokens.\n   * It helps to avoid repetitions from test to test.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/defaultMock\n   */\n  defaultMock<T = any>(\n    token: string,\n    handler?: (value: undefined | T, injector: Injector) => undefined | Partial<T>,\n    config?: IMockBuilderConfig,\n  ): void;\n\n  /**\n   * ngMocks.defaultMock sets default customizations of mock declarations.\n   * It helps to avoid repetitions from test to test.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/defaultMock\n   */\n  defaultMock<T>(\n    def: AnyType<T>,\n    handler?: (value: T, injector: Injector) => void | Partial<T>,\n    config?: IMockBuilderConfig,\n  ): void;\n\n  /**\n   * ngMocks.defaultMock sets default customizations of mock declarations and tokens.\n   * It helps to avoid repetitions from test to test.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/defaultMock\n   */\n  defaultMock<T = any>(\n    defs: Array<AnyDeclaration<T>>,\n    handler?: (value: undefined | T, injector: Injector) => undefined | Partial<T>,\n    config?: IMockBuilderConfig,\n  ): void;\n\n  /**\n   * ngMocks.globalExclude configures which declarations, providers and tokens\n   * should be excluded from mocks.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/globalExclude\n   *\n   * ```ts\n   * ngMocks.globalExclude(TranslationModule);\n   * ```\n   */\n  globalExclude(source: AnyDeclaration<any>, recursively?: boolean): void;\n\n  /**\n   * ngMocks.globalKeep configures which declarations, providers and tokens\n   * should not be mocked and will stay as they are in mocks.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/globalKeep\n   *\n   * ```ts\n   * ngMocks.globalKeep(TranslationModule);\n   * ```\n   */\n  globalKeep(source: AnyDeclaration<any>, recursively?: boolean): void;\n\n  /**\n   * ngMocks.globalMock configures which declarations, providers and tokens\n   * should be mocked in kept declarations.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/globalMock\n   *\n   * ```ts\n   * ngMocks.globalMock(TranslationModule);\n   * ```\n   */\n  globalMock(source: AnyDeclaration<any>, recursively?: boolean): void;\n\n  /**\n   * ngMocks.globalReplace configures which declarations, providers and tokens\n   * should be substituted in mocks.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/globalReplace\n   *\n   * ```ts\n   * ngMocks.globalReplace(BrowserAnimationsModule, NoopAnimationsModule);\n   * ```\n   */\n  globalReplace(source: AnyType<any>, destination: AnyType<any>): void;\n\n  /**\n   * ngMocks.globalWipe resets all customizations of ngMocks.global* and mgMocks.default* functions.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/globalWipe\n   *\n   * ```ts\n   * ngMocks.globalWipe(TranslationModule);\n   * ngMocks.globalWipe(BrowserAnimationsModule);\n   * ```\n   */\n  globalWipe(source: AnyDeclaration<any>, recursively?: boolean): void;\n\n  /**\n   * ngMocks.change triggers ControlValueAccessor update.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/change\n   */\n  change(elSelector: DebugNodeSelector, value: any, methodName?: string): void;\n\n  /**\n   * ngMocks.touch triggers ControlValueAccessor touch.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/touch\n   */\n  touch(elSelector: DebugNode | DebugNodeSelector, methodName?: string): void;\n\n  /**\n   * ngMocks.click properly simulates a click on an element.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/click\n   */\n  click(elSelector: HTMLElement | DebugNodeSelector, payload?: Partial<MouseEvent>): void;\n\n  /**\n   * ngMocks.trigger lets trigger custom events on DebugElements.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/trigger\n   *\n   * ```ts\n   * ngMocks.trigger(el, new CustomEvent('my-event'));\n   * ```\n   */\n  trigger(elSelector: DebugNodeSelector, event: Event): void;\n\n  /**\n   * ngMocks.trigger lets trigger custom events on DebugElements.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/trigger\n   *\n   * ```ts\n   * ngMocks.trigger(el, 'click');\n   * ngMocks.trigger(el, 'keydown.control.shift.z');\n   * ```\n   */\n  trigger(\n    elSelector: HTMLElement | DebugNodeSelector,\n    event: string,\n    payload?: Partial<UIEvent | KeyboardEvent | MouseEvent | TouchEvent>,\n  ): void;\n\n  /**\n   * ngMocks.event builds correct event objects.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/event\n   */\n  event(\n    event: string,\n    init?: EventInit,\n    overrides?: Partial<UIEvent | KeyboardEvent | MouseEvent | TouchEvent | Event>,\n  ): Event;\n\n  /**\n   * ngMocks.render renders a templateRef or DebugElement.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/render\n   *\n   * ```ts\n   * ngMocks.header(component, headerEl);\n   * ```\n   */\n  render(\n    instance: object,\n    template: TemplateRef<any> | DebugNode,\n    $implicit?: any,\n    variables?: Record<keyof any, any>,\n  ): void;\n\n  /**\n   * ngMocks.render renders a structural directive.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/render\n   *\n   * ```ts\n   * ngMocks.render(component, directiveInstance);\n   * ```\n   */\n  render(instance: object, directive: object, $implicit?: any, variables?: Record<keyof any, any>): void;\n\n  /**\n   * ngMocks.hide hides a rendered templateRef or DebugElement.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/hide\n   *\n   * ```ts\n   * ngMocks.hide(component, headerEl);\n   * ```\n   */\n  hide(instance: object, tpl?: TemplateRef<any> | DebugNode): void;\n\n  /**\n   * ngMocks.hide hides a rendered structural directive.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/hide\n   *\n   * ```ts\n   * ngMocks.hide(component, directiveInstance);\n   * ```\n   */\n  hide(instance: object, directive: object): void;\n\n  /**\n   * ngMocks.input allows to get an input value without knowing\n   * which component / directive it belongs to.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/input\n   *\n   * ```ts\n   * const input = ngMocks.input('app-component', 'version');\n   * ```\n   */\n  input<T = any>(elSelector: DebugNodeSelector, input: string): T;\n\n  /**\n   * ngMocks.input allows to get an input value without knowing\n   * which component / directive it belongs to, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/input\n   *\n   * ```ts\n   * const input = ngMocks.input('app-component', 'version', undefined);\n   * ```\n   */\n  input<T = any, D = undefined>(elSelector: DebugNodeSelector, input: string, notFoundValue: D): D | T;\n\n  /**\n   * ngMocks.output allows to get an output emitter without knowing\n   * which component / directive it belongs to.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/output\n   *\n   * ```ts\n   * const outputEmitter = ngMocks.output('app-component', 'update');\n   * ```\n   */\n  output<T = any>(elSelector: DebugNodeSelector, output: string): EventEmitter<T>;\n\n  /**\n   * ngMocks.output allows to get an output emitter without knowing\n   * which component / directive it belongs to, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/output\n   *\n   * ```ts\n   * const outputEmitter = ngMocks.output('app-component', 'update', undefined);\n   * ```\n   */\n  output<T = any, D = undefined>(elSelector: DebugNodeSelector, output: string, notFoundValue: D): D | EventEmitter<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement of a particular component,\n   * and returns the first found.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(MyComponent);\n   * ```\n   */\n  find<T>(component: Type<T>): MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement of a particular component\n   * starting from an element, and returns the first found.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(fixture.debugElement, MyComponent);\n   * ```\n   */\n  find<T>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    component: Type<T>,\n  ): MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement of a particular component,\n   * and returns the first found, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(MyComponent, undefined);\n   * ```\n   */\n  find<T, D>(component: Type<T>, notFoundValue: D): D | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement of a particular component\n   * starting from an element, and returns the first found, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(fixture, MyComponent, undefined);\n   * ```\n   */\n  find<T, D>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    component: Type<T>,\n    notFoundValue: D,\n  ): D | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement based on css selector,\n   * and returns the first found.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find('.header');\n   * const el = ngMocks.find('[data-key=5]');\n   * const el = ngMocks.find(['data-key', 5]);\n   * ```\n   */\n  find<T = any>(cssSelector: string | [string] | [string, string | number]): MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement based on css selector\n   * starting from an element, and returns the first found.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(fixture.debugElement, '.header');\n   * const el = ngMocks.find(fixture, '[data-key=5]');\n   * const el = ngMocks.find(debugElement, ['data-key', 5]);\n   * ```\n   */\n  find<T = any>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    cssSelector: string | [string] | [string, string | number],\n  ): MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement based on css selector,\n   * and returns the first found, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find('.header', undefined);\n   * const el = ngMocks.find('[data-key=5]', null);\n   * const el = ngMocks.find(['data-key', 5], null);\n   * ```\n   */\n  find<T = any, D = undefined>(\n    cssSelector: string | [string] | [string, string | number],\n    notFoundValue: D,\n  ): D | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement based on css selector\n   * starting from an element, and returns the first found, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(fixture.debugElement, '.header', undefined);\n   * const el = ngMocks.find(fixture, '[data-key=5]', null);\n   * const el = ngMocks.find(debugElement, ['data-key', 5], null);\n   * ```\n   */\n  find<T = any, D = undefined>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    cssSelector: string | [string] | [string, string | number],\n    notFoundValue: D,\n  ): D | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.findAll searches for all DebugElements of a particular component,\n   * and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findAll\n   *\n   * ```ts\n   * const all = ngMocks.findAll(MyComponent);\n   * ```\n   */\n  findAll<T>(component: Type<T>): Array<MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.findAll searches for all DebugElements of a particular component\n   * starting from an element, and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findAll\n   *\n   * ```ts\n   * const all = ngMocks.findAll(fixture.debugElement, MyComponent);\n   * ```\n   */\n  findAll<T>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    component: Type<T>,\n  ): Array<MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.findAll searches for all DebugElements based on css selector,\n   * and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findAll\n   *\n   * ```ts\n   * const all = ngMocks.findAll('.header');\n   * const all = ngMocks.findAll('[data-key=5]');\n   * const all = ngMocks.findAll(['data-key', 5]);\n   * ```\n   */\n  findAll<T = any>(cssSelector: string | [string] | [string, string | number]): Array<MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.findAll searches for all DebugElements based on css selector\n   * starting from an element, and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findAll\n   *\n   * ```ts\n   * const all = ngMocks.findAll(fixture.debugElement, '.header');\n   * const all = ngMocks.findAll(fixture, '[data-key=5]');\n   * const all = ngMocks.findAll(debugElement, ['data-key', 5]);\n   * ```\n   */\n  findAll<T = any>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    cssSelector: string | [string] | [string, string | number],\n  ): Array<MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal(HeaderComponent);\n   * ```\n   */\n  reveal<T>(selector: AnyType<T>): MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template\n   * starting from an element.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal('header', HeaderComponent);\n   * ```\n   */\n  reveal<T>(elSelector: DebugNodeSelector, selector: AnyType<T>): MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal(['tpl', 'header']);\n   * ```\n   */\n  reveal<T = any>(selector: string | [string] | [string, any]): MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template\n   * starting from an element.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal('header', ['tpl', 'header']);\n   * ```\n   */\n  reveal<T = any>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any],\n  ): MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template,\n   * otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal(HeaderComponent, undefined);\n   * ```\n   */\n  reveal<T, D>(selector: AnyType<T>, notFoundValue: D): D | MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template\n   * starting from an element, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal('sidebar', HeaderComponent, undefined);\n   * ```\n   */\n  reveal<T, D>(\n    elSelector: DebugNodeSelector,\n    selector: AnyType<T>,\n    notFoundValue: D,\n  ): D | MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template,\n   * otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal(['tpl', 'header'], undefined);\n   * ```\n   */\n  reveal<T = any, D = undefined>(\n    selector: string | [string] | [string, any],\n    notFoundValue: D,\n  ): D | MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template\n   * starting from an element, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal('sidebar', ['tpl', 'header'], undefined);\n   * ```\n   */\n  reveal<T = any, D = undefined>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any],\n    notFoundValue: D,\n  ): D | MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.revealAll allows finding all DebugNodes which belong to ng-container or ng-template.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/revealAll\n   *\n   * ```ts\n   * const ngContainers = ngMocks.revealAll(HeaderComponent);\n   * ```\n   */\n  revealAll<T>(selector: AnyType<T>): Array<MockedDebugNode<T> | MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.reveal allows finding all DebugNodes which belong to ng-container or ng-template.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/revealAll\n   *\n   * ```ts\n   * const ngContainers = ngMocks.revealAll(['tpl', 'header']);\n   * ```\n   */\n  revealAll<T = any>(selector: string | [string] | [string, any]): Array<MockedDebugNode<T> | MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.reveal allows finding all DebugNodes which belong to ng-container or ng-template\n   * starting from an element.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/revealAll\n   *\n   * ```ts\n   * const ngContainers = ngMocks.revealAll('sidebar', HeaderComponent);\n   * ```\n   */\n  revealAll<T>(elSelector: DebugNodeSelector, selector: AnyType<T>): Array<MockedDebugNode<T> | MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.reveal allows finding all DebugNodes which belong to ng-container or ng-template\n   * starting from an element.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/revealAll\n   *\n   * ```ts\n   * const ngContainers = ngMocks.revealAll('sidebar', ['tpl', 'header']);\n   * ```\n   */\n  revealAll<T = any>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any],\n  ): Array<MockedDebugNode<T> | MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.get tries to get an instance of declaration, provider or token\n   * from the element which is matching a selector.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/get\n   *\n   * ```ts\n   * const myComponent = ngMocks.get('my-component', MyComponent);\n   * const myDirective = ngMocks.get('my-component', MyDirective);\n   * ```\n   */\n  get<T>(elSelector: DebugNodeSelector, provider: AnyDeclaration<T>): T;\n\n  /**\n   * ngMocks.get tries to get an instance of declaration, provider or token\n   * from the element which is matching a selector, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/get\n   *\n   * ```ts\n   * const myComponent = ngMocks.get('my-component', MyComponent, undefined);\n   * const myDirective = ngMocks.get('my-component', MyDirective, null);\n   * ```\n   */\n  get<T, D>(elSelector: DebugNodeSelector, provider: AnyDeclaration<T>, notFoundValue: D): D | T;\n\n  /**\n   * ngMocks.get tries to get an instance of provider or token for TestBed.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/get\n   *\n   * ```ts\n   * const myComponent = ngMocks.get(MyComponent);\n   * const myDirective = ngMocks.get(MyDirective);\n   * ```\n   */\n  get<T>(provider: AnyDeclaration<T>): T;\n\n  /**\n   * ngMocks.findInstance searches for an instance of declaration, provider or token,\n   * and returns the first one.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstance\n   *\n   * ```ts\n   * const component = ngMocks.findInstance(SidebarComponent);\n   * const service = ngMocks.findInstance(AuthService);\n   * const config = ngMocks.findInstance(APP_CONFIG);\n   * ```\n   */\n  findInstance<T>(instanceClass: AnyDeclaration<T>): T;\n\n  /**\n   * ngMocks.findInstance searches for an instance of declaration, provider or token\n   * starting from an element, and returns the first one.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstance\n   *\n   * ```ts\n   * const component = ngMocks.findInstance(fixture, SidebarComponent);\n   * const service = ngMocks.findInstance('header', AuthService);\n   * const config = ngMocks.findInstance(debugElement, APP_CONFIG);\n   * ```\n   */\n  findInstance<T>(elSelector: DebugNodeSelector, instanceClass: AnyDeclaration<T>): T;\n\n  /**\n   * ngMocks.findInstance searches for an instance of declaration, provider or token,\n   * and returns the first one, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstance\n   *\n   * ```ts\n   * const component = ngMocks.findInstance(SidebarComponent, undefined);\n   * const service = ngMocks.findInstance(AuthService, null);\n   * const config = ngMocks.findInstance(APP_CONFIG, false);\n   */\n  findInstance<T, D>(instanceClass: AnyDeclaration<T>, notFoundValue: D): D | T;\n\n  /**\n   * ngMocks.findInstance searches for an instance of declaration, provider or token\n   * starting from an element, and returns the first one, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstance\n   *\n   * ```ts\n   * const component = ngMocks.findInstance(fixture, SidebarComponent, undefined);\n   * const service = ngMocks.findInstance('header', AuthService, null);\n   * const config = ngMocks.findInstance(debugElement, APP_CONFIG, false);\n   * ```\n   */\n  findInstance<T, D>(elSelector: DebugNodeSelector, instanceClass: AnyDeclaration<T>, notFoundValue: D): D | T;\n\n  /**\n   * ngMocks.findInstances searches for all instances of declaration, provider or token,\n   * and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstances\n   *\n   * ```ts\n   * const components = ngMocks.findInstances(SidebarComponent);\n   * const services = ngMocks.findInstances(AuthService);\n   * const configs = ngMocks.findInstances(APP_CONFIG);\n   * ```\n   */\n  findInstances<T>(instanceClass: AnyDeclaration<T>): T[];\n\n  /**\n   * ngMocks.findInstances searches for all instances of declaration, provider or token\n   * starting from an element, and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstances\n   *\n   * ```ts\n   * const components = ngMocks.findInstances(fixture, SidebarComponent);\n   * const services = ngMocks.findInstances('header', AuthService);\n   * const configs = ngMocks.findInstances(debugElement, APP_CONFIG);\n   * ```\n   */\n  findInstances<T>(elSelector: DebugNodeSelector, instanceClass: AnyDeclaration<T>): T[];\n\n  /**\n   * ngMocks.findTemplateRef searches for a TemplateRef which is matching the selector,\n   * and returns the first found, otherwise the notFoundValue.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRef\n   *\n   * ```ts\n   * const templateRef = ngMocks.findTemplateRef('sidebar', StructuralDirective, undefined);\n   * ```\n   */\n  findTemplateRef<T = any, D = undefined>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any] | AnyType<any>,\n    notFoundValue: D,\n  ): D | TemplateRef<T>;\n\n  /**\n   * ngMocks.findTemplateRef searches for a TemplateRef which is matching the selector,\n   * and returns the first found.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRef\n   *\n   * ```ts\n   * const templateRef = ngMocks.findTemplateRef('sidebar', StructuralDirective);\n   * ```\n   */\n  findTemplateRef<T = any>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any] | AnyType<any>,\n  ): TemplateRef<T>;\n\n  /**\n   * ngMocks.findTemplateRef searches for a TemplateRef which is matching the selector,\n   * and returns the first found, otherwise the notFoundValue.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRef\n   *\n   * ```ts\n   * const templateRef = ngMocks.findTemplateRef(['mat-row'], null);\n   * ```\n   */\n  findTemplateRef<T = any, D = undefined>(\n    selector: string | [string] | [string, any] | AnyType<any>,\n    notFoundValue: D,\n  ): D | TemplateRef<T>;\n\n  /**\n   * ngMocks.findTemplateRef searches for a TemplateRef which is matching the selector,\n   * and returns the first found.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRef\n   *\n   * ```ts\n   * const templateRef = ngMocks.findTemplateRef(['mat-row']);\n   * ```\n   */\n  findTemplateRef<T = any>(selector: string | [string] | [string, any] | AnyType<any>): TemplateRef<T>;\n\n  /**\n   * ngMocks.findTemplateRefs searches for all TemplateRefs which is matching the selector\n   * starting from an element, and returns an array of them.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRefs\n   *\n   * ```ts\n   * const templateRefs = ngMocks.findTemplateRefs('header', StructuralDirective);\n   * ```\n   */\n  findTemplateRefs<T = any>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any] | AnyType<any>,\n  ): Array<TemplateRef<T>>;\n\n  /**\n   * ngMocks.findTemplateRefs searches for all TemplateRefs which is matching the selector,\n   * and returns an array of them.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRefs\n   *\n   * ```ts\n   * const templateRefs = ngMocks.findTemplateRefs(['mat-row']);\n   * ```\n   */\n  findTemplateRefs<T = any>(selector: string | [string] | [string, any] | AnyType<any>): Array<TemplateRef<T>>;\n\n  /**\n   * ngMocks.crawl correctly crawls through Angular DOM with respect of TemplateRefs and ng-containers.\n   * Usually, it's used internally.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/crawl\n   */\n  crawl(\n    elSelector: DebugNodeSelector,\n    callback: (\n      node: MockedDebugNode | MockedDebugElement,\n      parent?: MockedDebugNode | MockedDebugElement,\n    ) => boolean | void,\n    includeTextNodes?: boolean,\n  ): void;\n\n  /**\n   * ngMocks.stub lets replace a method, getter or setter with a dummy callback.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/stub\n   *\n   * ```ts\n   * ngMocks.stub(instance, 'save'); // save is an empty callback now.\n   * ngMocks.stub(instance, 'user', 'get'); // getter is an empty callback now.\n   * ngMocks.stub(instance, 'user', 'set'); // setter is an empty callback now.\n   * ```\n   */\n  stub<T = MockedFunction, I = any>(instance: I, name: keyof I, style?: 'get' | 'set'): T;\n\n  /**\n   * ngMocks.stub lets apply partial customizations to an instance.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/stub\n   *\n   * ```ts\n   * ngMocks.stub(instance, {\n   *   save: () => undefined,\n   *   user: null,\n   * });\n   * ```\n   */\n  stub<I extends object>(instance: I, overrides: Partial<I>): I;\n\n  /**\n   * ngMocks.stubMember lets inject spies it to getters of properties of an instance.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/stubMember\n   *\n   * ```ts\n   * ngMocks.stubMember(instance, 'user', jasmine.createSpy(), 'get')\n   *   .and.returnValue(null);\n   * ```\n   */\n  stubMember<T extends object, K extends keyof T, S extends () => T[K]>(\n    instance: T,\n    name: K,\n    stub: S,\n    encapsulation: 'get',\n  ): S;\n\n  /**\n   * ngMocks.stubMember lets inject spies it to setters of properties of an instance.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/stubMember\n   *\n   * ```ts\n   * ngMocks.stubMember(instance, 'user', jasmine.createSpy(), 'set')\n   *   .and.throwError('setter is forbidden');\n   * ```\n   */\n  stubMember<T extends object, K extends keyof T, S extends (value: T[K]) => void>(\n    instance: T,\n    name: K,\n    stub: S,\n    encapsulation: 'set',\n  ): S;\n\n  /**\n   * ngMocks.stubMember lets inject spies it to an instance.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/stubMember\n   *\n   * ```ts\n   * ngMocks.stubMember(instance, 'save', jasmine.createSpy());\n   * ngMocks.stubMember(instance, 'user', null);\n   * ```\n   */\n  stubMember<T extends object, K extends keyof T, S extends T[K]>(instance: T, name: K, stub: S): S;\n\n  /**\n   * ngMocks.guts provides a simple way to configure complex mocks.\n   * Please check documentation.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/guts\n   */\n  guts(\n    keep: AnyDeclaration<any> | Provider | Array<AnyDeclaration<any> | Provider> | null | undefined,\n    mock?:\n      | AnyDeclaration<any>\n      | NgModuleWithProviders\n      | Provider\n      | Array<AnyDeclaration<any> | NgModuleWithProviders | Provider>\n      | null\n      | undefined,\n    exclude?: AnyDeclaration<any> | Array<AnyDeclaration<any>> | null | undefined,\n  ): TestModuleMetadata;\n\n  /**\n   * ngMocks.faster lets reuse the same TestBed between tests instead of resetting it.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/faster\n   */\n  faster(): void;\n\n  /**\n   * ignoreOnConsole suppresses any log calls, other methods can be suppressed too.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/ignoreOnConsole\n   */\n  ignoreOnConsole(...args: Array<keyof typeof console>): void;\n\n  /**\n   * Thanks Ivy, it does not throw an error, and we have to use injector.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/throwOnConsole\n   */\n  throwOnConsole(...args: Array<keyof typeof console>): void;\n\n  /**\n   * ngMocks.formatHtml normalizes html for a DebugElement, fixture or html string.\n   * It removes redundant spaces, comments etc.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/formatHtml\n   *\n   * ```ts\n   * const html = ngMocks.formatHTML(fixture);\n   * const html = ngMocks.formatHTML(debugElement);\n   * const html = ngMocks.formatHTML('<div>   </div>');\n   * ```\n   */\n  formatHtml(html: FORMAT_SINGLE, outer?: boolean): string;\n\n  /**\n   * ngMocks.formatHtml normalizes html for an array of DebugElements, fixtures or html strings.\n   * It removes redundant spaces, comments etc.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/formatHtml\n   *\n   * const [html1, html2] = ngMocks.formatHTML([fixture1, fixture2]);\n   * const htmlStrings = ngMocks.formatHTML(debugElements);\n   */\n  formatHtml(html: FORMAT_SET, outer?: boolean): string[];\n\n  /**\n   * ngMocks.formatText normalizes text for a DebugElement, fixture or html string.\n   * It removes tags, redundant spaces, comments etc.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/formatText\n   *\n   * ```ts\n   * const txt = ngMocks.formatText(fixture);\n   * const txt = ngMocks.formatText(debugElement);\n   * const txt = ngMocks.formatText('<div>   </div>');\n   * ```\n   */\n  formatText(text: FORMAT_SINGLE, outer?: boolean): string;\n\n  /**\n   * ngMocks.formatText normalizes text for an array of DebugElements, fixtures or html strings.\n   * It removes tags, redundant spaces, comments etc.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/formatText\n   *\n   * const [txt1, txt2] = ngMocks.formatText([fixture1, fixture2]);\n   * const txtStrings = ngMocks.formatText(debugElements);\n   */\n  formatText(text: FORMAT_SET, outer?: boolean): string[];\n\n  /**\n   * ngMocks.flushTestBed resets TestBed.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/flushTestBed\n   */\n  flushTestBed(): void;\n\n  /**\n   * ngMocks.reset resets cache of ng-mocks.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reset\n   */\n  reset(): void;\n\n  /**\n   * ngMocks.config lets customize default behavior of error reporting.\n   */\n  config(config: {\n    mockRenderCacheSize?: number | null;\n    onMockBuilderMissingDependency?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n    onMockInstanceRestoreNeed?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n    onTestBedFlushNeed?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n  }): void;\n} = mockHelperObject;\n","import {\n  ClassProvider,\n  ExistingProvider,\n  FactoryProvider,\n  InjectionToken,\n  Provider,\n  StaticClassProvider,\n  ValueProvider,\n} from '@angular/core';\n\nimport { AnyDeclaration, AnyType } from '../common/core.types';\nimport funcImportExists from '../common/func.import-exists';\nimport mockHelperStub from '../mock-helper/mock-helper.stub';\nimport helperUseFactory from '../mock-service/helper.use-factory';\nimport { MockService } from '../mock-service/mock-service';\n\nconst defaultValue = {};\n\n/**\n * MockProviders creates an array of mock providers out of passed as parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: MockProviders(\n *     Dep1Service,\n *     Dep2Service,\n *   ),\n * });\n * ```\n */\nexport function MockProviders(...providers: Array<AnyDeclaration<any>>): FactoryProvider[] {\n  return providers.map((provider: any) => MockProvider(provider, defaultValue));\n}\n\n/**\n * MockProvider creates a mock provider out of passed an arbitrary service.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(Dep1Service),\n *     MockProvider(Dep2Service, {\n *       prop: true,\n *       func: () => 'mock',\n *     }),\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I extends object>(instance: AnyType<I>, overrides?: Partial<I>): FactoryProvider;\n\n/**\n * MockProvider creates a mock provider out of passed an arbitrary token.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(APP_ID),\n *     MockProvider(WEB_SOCKET, {\n *       prop: true,\n *       func: () => 'mock',\n *     }),\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I>(provider: InjectionToken<I>, useValue?: Partial<I>): FactoryProvider;\n\n/**\n * MockProvider creates a mock provider out of passed an arbitrary string token.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider('web_socket', {\n *       prop: true,\n *       func: () => 'mock',\n *     }),\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I = any>(provider: string, useValue?: Partial<I>): FactoryProvider;\n\n/**\n * MockProvider generates useValue based on passed parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider#useValue\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(AuthService, {isLoggedIn: true}, 'useValue'),\n *     MockProvider(APP_ROUTES, 5, 'useValue', true), // multi flag\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I>(\n  provider: AnyDeclaration<I>,\n  value: ValueProvider['useValue'],\n  style: 'useValue',\n  multi?: ValueProvider['multi'],\n): ValueProvider;\n\n/**\n * MockProvider generates useExisting based on passed parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider#useExisting\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(AuthService, MockAuthService, 'useExisting', true),\n *     MockProvider(APP_ROUTES, MOCK_ROUTES, 'useExisting', true), // multi flag\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I>(\n  provider: AnyDeclaration<I>,\n  value: ExistingProvider['useExisting'],\n  style: 'useExisting',\n  multi?: ExistingProvider['multi'],\n): ExistingProvider;\n\n/**\n * MockProvider generates useClass based on passed parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider#useClass\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(AuthService, MockAuthService, 'useClass', [ctorDep1, ctorDep2]),\n *     MockProvider(UserService, MockUserService, 'useClass', {\n *       multi: true, // multi flag\n *       deps: [ctorDep1, ctorDep2],\n *     }),\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I>(\n  provider: AnyDeclaration<I>,\n  value: StaticClassProvider['useClass'],\n  style: 'useClass',\n  multiDeps?:\n    | StaticClassProvider['multi']\n    | StaticClassProvider['deps']\n    | {\n        multi?: StaticClassProvider['multi'];\n        deps?: StaticClassProvider['deps'];\n      },\n): ClassProvider;\n\n/**\n * MockProvider generates useFactory based on passed parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider#useFactory\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(AuthService, (dep1, dep2) => {\n *       // ...\n *     }, 'useFactory', [ctorDep1, ctorDep2]),\n *     MockProvider(UserService, (dep1, dep2) => {\n *       // ...\n *     }, 'useFactory', {\n *       multi: true, // multi flag\n *       deps: [ctorDep1, ctorDep2],\n *     }),\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I>(\n  provider: AnyDeclaration<I>,\n  value: FactoryProvider['useFactory'],\n  style: 'useFactory',\n  multiDeps?:\n    | FactoryProvider['multi']\n    | FactoryProvider['deps']\n    | {\n        multi?: FactoryProvider['multi'];\n        deps?: FactoryProvider['deps'];\n      },\n): FactoryProvider;\n\nexport function MockProvider(\n  provide: any,\n  overrides: any = defaultValue,\n  style?: 'useValue' | 'useExisting' | 'useClass' | 'useFactory',\n  flags:\n    | boolean\n    | any[]\n    | {\n        deps?: any[];\n        multi?: boolean;\n      } = {},\n): Provider {\n  funcImportExists(provide, 'MockProvider');\n\n  const { deps, multi } =\n    typeof flags === 'boolean'\n      ? { deps: undefined, multi: flags }\n      : Array.isArray(flags)\n        ? {\n            deps: flags,\n            multi: undefined,\n          }\n        : flags;\n\n  if (style) {\n    return {\n      provide,\n      [style]: overrides,\n      deps,\n      multi,\n    };\n  }\n\n  return helperUseFactory(\n    provide,\n    () => MockService(provide),\n    value => {\n      if (overrides === defaultValue) {\n        return value;\n      }\n      if (!value) {\n        return overrides;\n      }\n\n      return mockHelperStub(value, overrides);\n    },\n  );\n}\n","import { Injector, ViewContainerRef } from '@angular/core';\nimport { getTestBed, MetadataOverride, TestBed, TestBedStatic, TestModuleMetadata } from '@angular/core/testing';\n\nimport funcExtractTokens from '../mock-builder/func.extract-tokens';\nimport { MockBuilder } from '../mock-builder/mock-builder';\nimport getOverrideDef from '../mock-builder/promise/get-override-def';\nimport { ngMocks } from '../mock-helper/mock-helper';\nimport mockHelperFasterInstall from '../mock-helper/mock-helper.faster-install';\nimport { MockProvider } from '../mock-provider/mock-provider';\nimport helperCreateClone from '../mock-service/helper.create-clone';\n\nimport coreConfig from './core.config';\nimport coreDefineProperty from './core.define-property';\nimport { flatten, mapEntries, mapValues } from './core.helpers';\nimport coreInjector from './core.injector';\nimport coreReflectMeta from './core.reflect.meta';\nimport coreReflectModuleResolve from './core.reflect.module-resolve';\nimport coreReflectProvidedIn from './core.reflect.provided-in';\nimport { NG_MOCKS, NG_MOCKS_ROOT_PROVIDERS, NG_MOCKS_TOUCHES } from './core.tokens';\nimport { AnyType, dependencyKeys } from './core.types';\nimport { getSourceOfMock } from './func.get-source-of-mock';\nimport funcGetType from './func.get-type';\nimport { isMockNgDef } from './func.is-mock-ng-def';\nimport { isNgDef } from './func.is-ng-def';\nimport { isNgModuleDefWithProviders } from './func.is-ng-module-def-with-providers';\nimport ngMocksUniverse from './ng-mocks-universe';\n\nconst applyOverride = (def: any, override: any) => {\n  if (isNgDef(def, 'c')) {\n    TestBed.overrideComponent(def, override);\n  } else if (isNgDef(def, 'd')) {\n    TestBed.overrideDirective(def, override);\n  } else if (isNgDef(def, 'm')) {\n    TestBed.overrideModule(def, override);\n  }\n  if (isNgDef(def, 't')) {\n    TestBed.overrideProvider(def, override);\n  } else if (isNgDef(def, 'i')) {\n    TestBed.overrideProvider(def, override);\n  }\n};\n\nconst applyOverrides = (overrides: Map<AnyType<any>, [MetadataOverride<any>, MetadataOverride<any>]>): void => {\n  for (const [def, [override, original]] of mapEntries(overrides)) {\n    (TestBed as any).ngMocksOverrides.set(def, {\n      ...original,\n      override,\n    });\n    applyOverride(def, override);\n  }\n};\n\n// Thanks Ivy and its TestBed.override - it does not clean up leftovers.\nconst applyNgMocksOverrides = (testBed: TestBedStatic & { ngMocksOverrides?: Map<any, any> }): void => {\n  if (testBed.ngMocksOverrides?.size) {\n    ngMocks.flushTestBed();\n    for (const [def, original] of mapEntries(testBed.ngMocksOverrides)) {\n      applyOverride(def, original);\n    }\n  }\n  testBed.ngMocksOverrides = undefined;\n};\n\nconst initTestBed = () => {\n  if (!(TestBed as any).ngMocksSelectors) {\n    coreDefineProperty(TestBed, 'ngMocksSelectors', new Map());\n  }\n  // istanbul ignore else\n  if (!(TestBed as any).ngMocksOverrides) {\n    coreDefineProperty(TestBed, 'ngMocksOverrides', new Map());\n  }\n};\n\nconst generateTouches = (moduleDef: Partial<Record<dependencyKeys, any>>, touches: Set<any>): void => {\n  for (const key of coreConfig.dependencies) {\n    for (const item of moduleDef[key] ? flatten(moduleDef[key]) : []) {\n      const def = funcGetType(item);\n      if (isNgModuleDefWithProviders(item)) {\n        generateTouches(item, touches);\n      }\n      if (touches.has(def)) {\n        continue;\n      }\n      touches.add(def);\n      if (typeof def !== 'function') {\n        continue;\n      }\n\n      if (!Object.prototype.hasOwnProperty.call(def, '__ngMocksTouches')) {\n        const local = new Set<any>();\n        const meta = coreReflectMeta(def);\n        coreDefineProperty(def, '__ngMocksTouches', local, false);\n        if (meta) {\n          generateTouches(meta, local);\n        }\n      }\n\n      mapValues(def.__ngMocksTouches, touches);\n    }\n  }\n};\n\nconst defineTouches = (testBed: TestBed, moduleDef: TestModuleMetadata, knownTouches?: Set<any>) => {\n  let touches = knownTouches;\n\n  if (!touches && ngMocksUniverse.getDefaults().size > 0) {\n    touches = funcExtractTokens(\n      (testBed as any)._providers || /* istanbul ignore next Ivy part */ (testBed as any)._compiler?.providers,\n    ).touches;\n    if (!touches) {\n      touches = new Set();\n      moduleDef.providers = moduleDef.providers || [];\n      moduleDef.providers.push({ provide: NG_MOCKS_TOUCHES, useValue: touches });\n    }\n    generateTouches(moduleDef, touches);\n  }\n\n  return touches;\n};\n\nconst applyPlatformOverrideDef = (def: any) => {\n  const ngModule = funcGetType(def);\n  if ((TestBed as any).ngMocksOverrides.has(ngModule)) {\n    return;\n  }\n\n  const original = coreReflectModuleResolve(ngModule);\n  const set = getOverrideDef(original);\n  if (set) {\n    (TestBed as any).ngMocksOverrides.set(ngModule, { set: original });\n    TestBed.overrideModule(ngModule, { set });\n  }\n};\n\nconst applyPlatformOverridesBasedOnProvidedIn = (provide: any, touches: Set<any>) => {\n  const providedIn = coreReflectProvidedIn(provide);\n  if (!providedIn) {\n    return;\n  }\n  // knownTouches present from MockBuilder and we can rely on it,\n  // otherwise we have to override the provider always.\n  if (typeof providedIn !== 'string' && !touches.has(providedIn)) {\n    return;\n  }\n  (TestBed as any).ngMocksOverrides.set(provide, {});\n  TestBed.overrideProvider(provide, MockProvider(provide as never));\n};\n\nconst applyPlatformOverridesBasedOnDefaults = (touches: Set<any>) => {\n  for (const [provide, [config]] of mapEntries(ngMocksUniverse.getDefaults())) {\n    if (config !== 'mock') {\n      continue;\n    }\n    if (!isNgDef(provide, 'i') && !isNgDef(provide, 't')) {\n      continue;\n    }\n    if (touches.has(provide)) {\n      continue;\n    }\n    if ((TestBed as any).ngMocksOverrides.has(provide)) {\n      continue;\n    }\n    applyPlatformOverridesBasedOnProvidedIn(provide, touches);\n  }\n};\n\nconst applyPlatformOverrides = (testBed: TestBed, touches: Set<any>) => {\n  // istanbul ignore else\n  if ((TestBed as any).ngMocksOverrides) {\n    const backup = ngMocksUniverse.touches;\n    ngMocksUniverse.touches = touches;\n    for (const def of flatten(testBed.ngModule || /* istanbul ignore next */ [])) {\n      applyPlatformOverrideDef(def);\n    }\n    applyPlatformOverridesBasedOnDefaults(touches);\n    ngMocksUniverse.touches = backup;\n  }\n};\n\nconst configureTestingModule =\n  (\n    original: TestBedStatic['configureTestingModule'],\n    instance: TestBedStatic,\n  ): TestBedStatic['configureTestingModule'] =>\n  (moduleDef: TestModuleMetadata) => {\n    initTestBed();\n\n    const useMockBuilder =\n      typeof moduleDef === 'object' &&\n      !!moduleDef &&\n      (!moduleDef.providers || moduleDef.providers.indexOf(MockBuilder) === -1);\n    // 0b10 - mock exist\n    // 0b01 - real exist\n    let hasMocks = 0;\n    const mockBuilder: Array<[any, any, boolean]> = [];\n    for (const key of useMockBuilder ? ['imports', 'declarations'] : []) {\n      for (const declaration of flatten(moduleDef[key as never]) as any[]) {\n        if (!declaration) {\n          continue;\n        }\n        mockBuilder.push([\n          isNgModuleDefWithProviders(declaration)\n            ? {\n                ngModule: getSourceOfMock(declaration.ngModule),\n                providers: declaration.providers,\n              }\n            : getSourceOfMock(declaration),\n          isNgModuleDefWithProviders(declaration) ? declaration.ngModule : declaration,\n          isMockNgDef(funcGetType(declaration)),\n        ]);\n        hasMocks |= mockBuilder[mockBuilder.length - 1][2] ? 0b10 : 0b01;\n      }\n    }\n    // We should do magic only then both mock and real exist.\n    let finalModuleDef = hasMocks === 0b11 ? undefined : moduleDef;\n    if (!finalModuleDef) {\n      let builder = MockBuilder(NG_MOCKS_ROOT_PROVIDERS);\n\n      for (const [source, def, isMock] of mockBuilder) {\n        const transform = def.prototype.__ngMocksConfig?.transform;\n        const options = {\n          export: !isNgDef(source, 'm'),\n          exportAll: false,\n          onRoot: true,\n        };\n        builder =\n          isMock && transform\n            ? builder.mock(source, transform, options)\n            : isMock\n              ? builder.mock(source, options)\n              : builder.keep(source, options);\n      }\n\n      finalModuleDef = builder.build();\n      finalModuleDef = {\n        ...moduleDef,\n        ...finalModuleDef,\n        providers: [...(moduleDef.providers ?? []), ...(finalModuleDef.providers as never)],\n      };\n    }\n\n    const testBed = getTestBed();\n\n    const providers = funcExtractTokens(finalModuleDef.providers);\n    const { mocks, overrides } = providers;\n    // touches are important,\n    // therefore we are trying to fetch them from the known providers.\n    const touches = defineTouches(testBed, finalModuleDef, providers.touches);\n\n    if (mocks) {\n      ngMocks.flushTestBed();\n    }\n\n    // istanbul ignore else\n    if (overrides) {\n      applyOverrides(overrides);\n    }\n    // _testModuleRef exists only after the 1st call,\n    // so we shouldn't override platform again.\n    if (touches && !(testBed as any)._instantiated && !(testBed as any)._testModuleRef) {\n      applyPlatformOverrides(testBed, touches);\n    }\n\n    return original.call(instance, finalModuleDef);\n  };\n\nconst resetTestingModule =\n  (original: TestBedStatic['resetTestingModule'], instance: TestBedStatic): TestBedStatic['resetTestingModule'] =>\n  () => {\n    ngMocksUniverse.global.delete('builder:config');\n    ngMocksUniverse.global.delete('builder:module');\n    (TestBed as any).ngMocksSelectors = undefined;\n    applyNgMocksOverrides(TestBed);\n\n    return original.call(instance);\n  };\n\n// Monkey-patching ViewContainerRef.createComponent to replace dynamic imports with mocked declarations.\nconst patchVcrInstance = (vcrInstance: ViewContainerRef) => {\n  if (!(ViewContainerRef as any).ngMocksOverridesPatched) {\n    coreDefineProperty(ViewContainerRef, 'ngMocksOverridesPatched', true);\n\n    // istanbul ignore else\n    if (vcrInstance.createComponent) {\n      const createComponent = vcrInstance.createComponent;\n      const patchedCreateComponent = helperCreateClone(\n        createComponent,\n        undefined,\n        undefined,\n        function (component: any, ...createComponentArgs: any[]) {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          const thisVrc: ViewContainerRef = this;\n          const map = coreInjector(NG_MOCKS, thisVrc.injector);\n\n          return createComponent.apply(thisVrc, [map?.get(component) ?? component, ...createComponentArgs] as any);\n        },\n      );\n\n      coreDefineProperty(vcrInstance.constructor.prototype, 'createComponent', patchedCreateComponent, true);\n      coreDefineProperty(vcrInstance, 'createComponent', patchedCreateComponent, true);\n    }\n  }\n};\n\nconst createComponent =\n  (original: TestBedStatic['createComponent'], instance: TestBedStatic): TestBedStatic['createComponent'] =>\n  component => {\n    const fixture = original.call(instance, component);\n    try {\n      const vcr = fixture.debugElement.injector.get(ViewContainerRef);\n      patchVcrInstance(vcr);\n    } catch {\n      // nothing to do\n    }\n\n    return fixture as never;\n  };\n\nconst viewContainerInstall = () => {\n  const vcr: any = ViewContainerRef;\n\n  // istanbul ignore else\n  if (!vcr.ngMocksOverridesInstalled) {\n    const ngElementId = vcr.__NG_ELEMENT_ID__;\n\n    // istanbul ignore else\n    if (ngElementId) {\n      coreDefineProperty(\n        vcr,\n        '__NG_ELEMENT_ID__',\n        helperCreateClone(ngElementId, undefined, undefined, (...ngElementIdArgs: any[]) => {\n          const vcrInstance = ngElementId.apply(ngElementId, ngElementIdArgs);\n          patchVcrInstance(vcrInstance);\n\n          return vcrInstance;\n        }),\n        true,\n      );\n    }\n    coreDefineProperty(TestBed, 'createComponent', createComponent(TestBed.createComponent as never, TestBed as never));\n\n    coreDefineProperty(ViewContainerRef, 'ngMocksOverridesInstalled', true);\n  }\n};\n\n// this function monkey-patches Angular injectors.\nconst installInjector = (injector: Injector & { __ngMocksInjector?: any }): Injector => {\n  // skipping the matched injector\n  if (injector.constructor.prototype.__ngMocksInjector || !injector.constructor.prototype.get) {\n    return injector;\n  }\n\n  // marking the injector as patched\n  coreDefineProperty(injector.constructor.prototype, '__ngMocksInjector', true);\n  const injectorGet = injector.constructor.prototype.get;\n\n  // patch\n  injector.constructor.prototype.get = helperCreateClone(\n    injectorGet,\n    undefined,\n    undefined,\n    function (token: any, ...argsGet: any) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const binding: any = this;\n\n      // Here we can implement custom logic how to inject token,\n      // for example, replace with a provider def we need.\n\n      const result = injectorGet.call(binding, token, ...argsGet);\n      // If the result is an injector, we should patch it too.\n      if (\n        result &&\n        typeof result === 'object' &&\n        typeof result.constructor === 'function' &&\n        typeof result.constructor.name === 'string' &&\n        result.constructor.name.slice(-8) === 'Injector'\n      ) {\n        installInjector(result);\n      }\n\n      return result;\n    },\n  );\n\n  return injector;\n};\n\nconst install = () => {\n  // istanbul ignore else\n  if (!(TestBed as any).ngMocksOverridesInstalled) {\n    const hooks = mockHelperFasterInstall();\n    viewContainerInstall();\n\n    // istanbul ignore else\n    if (hooks.before.indexOf(configureTestingModule) === -1) {\n      hooks.before.push(configureTestingModule);\n    }\n    // istanbul ignore else\n    if (hooks.after.indexOf(resetTestingModule) === -1) {\n      hooks.after.push(resetTestingModule);\n    }\n\n    coreDefineProperty(TestBed, 'ngMocksOverridesInstalled', true);\n    const injectorCreate = Injector.create;\n    Injector.create = helperCreateClone(injectorCreate, undefined, undefined, (...argsCreate: any) =>\n      installInjector(injectorCreate.apply(Injector, argsCreate)),\n    );\n    try {\n      // force install of our injector.\n      Injector.create({ length: 0, providers: [] } as never);\n    } catch {\n      // nothing to do.\n    }\n  }\n};\n\ninstall();\n","import { PipeTransform } from '@angular/core';\n\nimport { MockedComponent } from '../mock-component/types';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockedModule } from '../mock-module/types';\nimport { MockedPipe } from '../mock-pipe/types';\n\nimport { Type } from './core.types';\nimport { isNgDef } from './func.is-ng-def';\n\n/**\n * Checks whether a declaration is the mock class of a module.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockedNgDefOf\n *\n * ```ts\n * isMockedNgDefOf(MockModule, RealModule, 'm'); // returns true\n * isMockedNgDefOf(MockModule, ArbitraryModule, 'm'); // returns false\n * isMockedNgDefOf(MockModule, ArbitraryClass, 'm'); // returns false\n * ```\n */\nexport function isMockedNgDefOf<T>(declaration: any, type: Type<T>, ngType: 'm'): declaration is Type<MockedModule<T>>;\n\n/**\n * Checks whether a declaration is the mock class of a component.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockedNgDefOf\n *\n * ```ts\n * isMockedNgDefOf(MockComponent, RealComponent, 'c'); // returns true\n * isMockedNgDefOf(MockComponent, ArbitraryComponent, 'c'); // returns false\n * isMockedNgDefOf(MockComponent, ArbitraryClass, 'c'); // returns false\n * ```\n */\nexport function isMockedNgDefOf<T>(\n  declaration: any,\n  type: Type<T>,\n  ngType: 'c',\n): declaration is Type<MockedComponent<T>>;\n\n/**\n * Checks whether a declaration is the mock class of a directive.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockedNgDefOf\n *\n * ```ts\n * isMockedNgDefOf(MockDirective, RealDirective, 'd'); // returns true\n * isMockedNgDefOf(MockDirective, ArbitraryDirective, 'd'); // returns false\n * isMockedNgDefOf(MockDirective, ArbitraryClass, 'd'); // returns false\n * ```\n */\nexport function isMockedNgDefOf<T>(\n  declaration: any,\n  type: Type<T>,\n  ngType: 'd',\n): declaration is Type<MockedDirective<T>>;\n\n/**\n * Checks whether a declaration is the mock class of a pipe.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockedNgDefOf\n *\n * ```ts\n * isMockedNgDefOf(MockPipe, RealPipe, 'p'); // returns true\n * isMockedNgDefOf(MockPipe, ArbitraryPipe, 'p'); // returns false\n * isMockedNgDefOf(MockPipe, ArbitraryClass, 'p'); // returns false\n * ```\n */\nexport function isMockedNgDefOf<T extends PipeTransform>(\n  declaration: any,\n  type: Type<T>,\n  ngType: 'p',\n): declaration is Type<MockedPipe<T>>;\n\n/**\n * Checks whether a declaration is the mock class of a thing.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockedNgDefOf\n *\n * ```ts\n * isMockedNgDefOf(MockPipe, RealPipe); // returns true\n * isMockedNgDefOf(MockComponent, ArbitraryComponent); // returns false\n * isMockedNgDefOf(MockPipe, ArbitraryClass); // returns false\n * ```\n */\nexport function isMockedNgDefOf<T>(declaration: any, type: Type<T>): declaration is Type<T>;\n\nexport function isMockedNgDefOf<T>(declaration: any, type: Type<T>, ngType?: any): declaration is Type<T> {\n  return (\n    typeof declaration === 'function' && declaration.mockOf === type && (ngType ? isNgDef(declaration, ngType) : true)\n  );\n}\n","import { MockedComponent } from '../mock-component/types';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockedModule } from '../mock-module/types';\nimport { MockedPipe } from '../mock-pipe/types';\n\nimport coreInjector from './core.injector';\nimport { NG_MOCKS } from './core.tokens';\nimport { AnyType, Type } from './core.types';\nimport funcGetName from './func.get-name';\nimport { isMockedNgDefOf } from './func.is-mocked-ng-def-of';\nimport ngMocksUniverse from './ng-mocks-universe';\n\nconst getMock = (declaration: any, source: any, mocks?: Map<any, any>) => {\n  if (mocks && !mocks.has(source)) {\n    throw new Error(`There is no mock for ${funcGetName(source)}`);\n  }\n  let mock = mocks ? mocks.get(source) : undefined;\n  if (mock === source) {\n    mock = undefined;\n  }\n\n  // If we are not in the MockBuilder env we can rely on the current cache.\n  if (!mock && source !== declaration) {\n    mock = declaration;\n  } else if (!mock && ngMocksUniverse.cacheDeclarations.has(source)) {\n    mock = ngMocksUniverse.cacheDeclarations.get(source);\n  }\n\n  return mock;\n};\n\n/**\n * Returns the mock class of a mock module based on a mock module or a source module.\n * It works in runtime if the module has been mocked.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getMockedNgDefOf\n *\n * ```ts\n * getMockedNgDefOf(RealModule, 'm'); // returns MockModule\n * getMockedNgDefOf(MockModule, 'm'); // returns MockModule\n * getMockedNgDefOf(ArbitraryClass, 'm'); // throws\n * ```\n */\nexport function getMockedNgDefOf<T>(declaration: AnyType<T>, type: 'm'): Type<MockedModule<T>>;\n\n/**\n * Returns the mock class of a mock component based on a mock component or a source component.\n * It works in runtime if the component has been mocked.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getMockedNgDefOf\n *\n * ```ts\n * getMockedNgDefOf(RealComponent, 'c'); // returns MockComponent\n * getMockedNgDefOf(MockComponent, 'c'); // returns MockComponent\n * getMockedNgDefOf(ArbitraryClass, 'c'); // throws\n * ```\n */\nexport function getMockedNgDefOf<T>(declaration: AnyType<T>, type: 'c'): Type<MockedComponent<T>>;\n\n/**\n * Returns the mock class of a mock directive based on a mock directive or a source directive.\n * It works in runtime if the directive has been mocked.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getMockedNgDefOf\n *\n * ```ts\n * getMockedNgDefOf(RealDirective, 'd'); // returns MockDirective\n * getMockedNgDefOf(MockDirective, 'd'); // returns MockDirective\n * getMockedNgDefOf(ArbitraryClass, 'd'); // throws\n * ```\n */\nexport function getMockedNgDefOf<T>(declaration: AnyType<T>, type: 'd'): Type<MockedDirective<T>>;\n\n/**\n * Returns the mock class of a mock pipe based on a mock pipe or a source pipe.\n * It works in runtime if the pipe has been mocked.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getMockedNgDefOf\n *\n * ```ts\n * getMockedNgDefOf(RealPipe, 'p'); // returns MockPipe\n * getMockedNgDefOf(MockPipe, 'p'); // returns MockPipe\n * getMockedNgDefOf(ArbitraryClass, 'p'); // throws\n * ```\n */\nexport function getMockedNgDefOf<T>(declaration: AnyType<T>, type: 'p'): Type<MockedPipe<T>>;\n\n/**\n * Returns the mock class of a thing based on a mock class or a source class.\n * It works in runtime if the thing has been mocked.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getMockedNgDefOf\n *\n * ```ts\n * getMockedNgDefOf(RealComponent); // returns MockComponent\n * getMockedNgDefOf(MockPipe); // returns MockPipe\n * getMockedNgDefOf(ArbitraryClass); // throws\n * ```\n */\nexport function getMockedNgDefOf<T>(declaration: AnyType<T>): Type<T>;\n\nexport function getMockedNgDefOf(declaration: any, type?: any): any {\n  const source = declaration.mockOf ?? declaration;\n  const mocks = coreInjector(NG_MOCKS);\n\n  const mock = getMock(declaration, source, mocks);\n  if (mock && !type) {\n    return mock;\n  }\n  if (mock && type && isMockedNgDefOf(mock, source, type)) {\n    return mock;\n  }\n\n  throw new Error(`There is no mock for ${funcGetName(source)}`);\n}\n","import { PipeTransform } from '@angular/core';\n\nimport { MockedComponent } from '../mock-component/types';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockedModule } from '../mock-module/types';\nimport { MockedPipe } from '../mock-pipe/types';\n\nimport { Type } from './core.types';\nimport funcIsMock from './func.is-mock';\nimport { isNgDef } from './func.is-ng-def';\n\n/**\n * Checks whether the instance derives from a mock module.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockOf\n *\n * ```ts\n * isMockOf(moduleInstance, RealModule, 'm'); // returns true\n * isMockOf(moduleInstance, ArbitraryClass, 'm'); // returns false\n * ```\n */\nexport function isMockOf<T>(instance: any, declaration: Type<T>, ngType: 'm'): instance is MockedModule<T>;\n\n/**\n * Checks whether the instance derives from a mock component.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockOf\n *\n * ```ts\n * isMockOf(componentInstance, RealComponent, 'c'); // returns true\n * isMockOf(componentInstance, ArbitraryClass, 'c'); // returns false\n * ```\n */\nexport function isMockOf<T>(instance: any, declaration: Type<T>, ngType: 'c'): instance is MockedComponent<T>;\n\n/**\n * Checks whether the instance derives from a mock directive.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockOf\n *\n * ```ts\n * isMockOf(directiveInstance, RealDirective, 'd'); // returns true\n * isMockOf(directiveInstance, ArbitraryClass, 'd'); // returns false\n * ```\n */\nexport function isMockOf<T>(instance: any, declaration: Type<T>, ngType: 'd'): instance is MockedDirective<T>;\n\n/**\n * Checks whether the instance derives from a mock pipe.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockOf\n *\n * ```ts\n * isMockOf(pipeInstance, RealPipe, 'p'); // returns true\n * isMockOf(pipeInstance, ArbitraryClass, 'p'); // returns false\n * ```\n */\nexport function isMockOf<T extends PipeTransform>(\n  instance: any,\n  declaration: Type<T>,\n  ngType: 'p',\n): instance is MockedPipe<T>;\n\n/**\n * Checks whether the instance derives from a mock type.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockOf\n *\n * ```ts\n * isMockOf(componentInstance, RealComponent); // returns true\n * isMockOf(pipeInstance, RealPipe); // returns true\n * isMockOf(pipeInstance, ArbitraryClass); // returns false\n * ```\n */\nexport function isMockOf<T>(instance: any, declaration: Type<T>): instance is T;\n\nexport function isMockOf<T>(instance: any, declaration: Type<T>, ngType?: any): instance is T {\n  return (\n    funcIsMock(instance) &&\n    instance.constructor === declaration &&\n    (ngType ? isNgDef(instance.constructor, ngType) : isNgDef(instance.constructor))\n  );\n}\n","import funcIsMock from './func.is-mock';\nimport { MockValidator } from './mock-control-value-accessor';\n\n/**\n * isMockValidator helps to assert that an instance is a mock Validator\n * to perform validationChange simulations.\n * Usually, it is used in if statements.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockValidator\n */\nexport const isMockValidator = <T>(value: T): value is T & MockValidator => {\n  if (!funcIsMock(value)) {\n    return false;\n  }\n\n  return !!(value as any).__ngMocksConfig.isValidator;\n};\n","import funcGetName from '../common/func.get-name';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport default (checkReset: Array<[any, any, any?]>) => {\n  const showError: string[] = [];\n\n  // istanbul ignore next: because of the installed global scope switcher we cannot test this part\n  while (checkReset.length > 0) {\n    const [declaration, config] = checkReset.pop() || /* istanbul ignore next */ [];\n    if (config === ngMocksUniverse.configInstance.get(declaration)) {\n      showError.push(typeof declaration === 'function' ? funcGetName(declaration) : declaration);\n    }\n  }\n\n  // istanbul ignore if: because of the installed global scope switcher we cannot test this part\n  if (showError.length > 0) {\n    const globalFlags = ngMocksUniverse.global.get('flags');\n    const errorMessage = [\n      `MockInstance: side effects have been detected (${showError.join(', ')}).`,\n      'Forgot to add MockInstance.scope() or to call MockInstance.restore()?',\n    ].join(' ');\n    if (globalFlags.onMockInstanceRestoreNeed === 'warn') {\n      console.warn(errorMessage);\n    } else if (globalFlags.onMockInstanceRestoreNeed === 'throw') {\n      throw new Error(errorMessage);\n    }\n  }\n};\n","import { InjectionToken, Injector } from '@angular/core';\n\nimport { AnyDeclaration, AnyType } from '../common/core.types';\nimport funcImportExists from '../common/func.import-exists';\nimport ngMocksStack, { NgMocksStack } from '../common/ng-mocks-stack';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport mockInstanceForgotReset from './mock-instance-forgot-reset';\n\nlet currentStack: NgMocksStack;\nngMocksStack.subscribePush(state => {\n  currentStack = state;\n});\nngMocksStack.subscribePop((state, stack) => {\n  for (const declaration of state.mockInstance || /* istanbul ignore next */ []) {\n    if (ngMocksUniverse.configInstance.has(declaration)) {\n      const universeConfig = ngMocksUniverse.configInstance.get(declaration);\n      universeConfig.overloads.pop();\n      ngMocksUniverse.configInstance.set(declaration, {\n        ...universeConfig,\n      });\n    }\n  }\n  currentStack = stack[stack.length - 1];\n});\n\ninterface MockInstanceArgs {\n  accessor?: 'get' | 'set';\n  data?: any;\n  key?: string;\n  value?: any;\n}\n\nconst parseMockInstanceArgs = (args: any[]): MockInstanceArgs => {\n  const set: MockInstanceArgs = {};\n\n  if (typeof args[0] === 'string') {\n    set.key = args[0];\n    set.value = args[1];\n    set.accessor = args[2];\n  } else {\n    set.value = args[0];\n    if (set.value && typeof set.value === 'object') {\n      set.value = set.value.init;\n    }\n  }\n\n  return set;\n};\n\nconst checkReset: Array<[any, any, any?]> = [];\nlet checkCollect = false;\n\n// istanbul ignore else: maybe a different runner is used\nif (typeof beforeEach !== 'undefined') {\n  beforeEach(() => (checkCollect = true));\n  beforeEach(() => mockInstanceForgotReset(checkReset));\n  afterEach(() => (checkCollect = false));\n}\n\nconst mockInstanceConfig = <T>(\n  declaration: AnyDeclaration<T>,\n  name: string | undefined,\n  stub: any,\n  encapsulation?: 'get' | 'set',\n) => {\n  const config = ngMocksUniverse.configInstance.has(declaration) ? ngMocksUniverse.configInstance.get(declaration) : {};\n  const overloads = config.overloads || [];\n  overloads.push([name, stub, encapsulation]);\n  config.overloads = overloads;\n  ngMocksUniverse.configInstance.set(declaration, {\n    ...config,\n  });\n  const mockInstances = currentStack.mockInstance ?? [];\n  mockInstances.push(declaration);\n  currentStack.mockInstance = mockInstances;\n\n  if (checkCollect) {\n    checkReset.push([declaration, ngMocksUniverse.configInstance.get(declaration), currentStack]);\n  }\n\n  return stub;\n};\n\n/**\n * This signature of MockInstance lets customize the getter of a property.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(ArbitraryComponent, 'currentUser$', () => mockUser$, 'get');\n * MockInstance(ArbitraryService, 'enabled', () => false, 'get');\n * ```\n */\nexport function MockInstance<T extends object, K extends keyof T, S extends () => T[K]>(\n  instance: AnyType<T>,\n  name: K,\n  stub: S,\n  encapsulation: 'get',\n): S;\n\n/**\n * This signature of MockInstance lets customize the setters of a property.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * const currentUserSetterSpy = jasmine.createSpy();\n * MockInstance(ArbitraryComponent, 'currentUser', currentUserSetterSpy, 'set');\n *\n * let relServiceEnabled: boolean;\n * MockInstance(ArbitraryService, 'enabled', value => relServiceEnabled = value, 'set');\n * ```\n */\nexport function MockInstance<T extends object, K extends keyof T, S extends (value: T[K]) => void>(\n  instance: AnyType<T>,\n  name: K,\n  stub: S,\n  encapsulation: 'set',\n): S;\n\n/**\n * This signature of MockInstance lets customize the properties and methods.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(ArbitraryComponent, 'onInit', onInitSpy);\n * MockInstance(ArbitraryDirective, 'onDestroy', () => {});\n * MockInstance(ArbitraryService, 'currentDate', new Date());\n * MockInstance(ArbitraryModule, 'currentUser', mockUser);\n * ```\n */\nexport function MockInstance<T extends object, K extends keyof T, S extends T[K]>(\n  instance: AnyType<T>,\n  name: K,\n  stub: S,\n): S;\n\n/**\n * This signature of MockInstance lets customize tokens with a callback.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(webSocketToken, () => mockWebSocket);\n * ```\n */\nexport function MockInstance<T>(\n  declaration: InjectionToken<T>,\n  init?: (instance: T | undefined, injector: Injector | undefined) => Partial<T> | Array<Partial<T>>,\n): void;\n\n/**\n * This signature of MockInstance lets customize tokens with a callback.\n *\n * @deprecated please pass the callback directly instead of config.\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(webSocketToken, {\n *   init: () => mockWebSocket,\n * });\n * ```\n */\nexport function MockInstance<T>(\n  declaration: InjectionToken<T>,\n  config?: {\n    init?: (instance: T | undefined, injector: Injector | undefined) => Partial<T> | Array<Partial<T>>;\n  },\n): void;\n\n/**\n * This signature of MockInstance lets customize the instances of mock classes with a callback.\n * You can return a shape or change the instance.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(ArbitraryComponent, (instance, injector) => {\n *   instance.enabled = true;\n *   instance.db = injector.get(DatabaseService);\n * });\n * MockInstance(ArbitraryDirective, () => {\n *   return {\n *     someProperty: true,\n *   };\n * });\n * ```\n */\nexport function MockInstance<T>(\n  declaration: AnyType<T>,\n  init?: (instance: T, injector: Injector | undefined) => void | Partial<T> | Array<Partial<T>>,\n): void;\n\n/**\n * This signature of MockInstance lets customize the instances of mock classes with a callback.\n * You can return a shape or change the instance.\n *\n * @deprecated please pass the callback directly instead of config.\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(ArbitraryComponent, {\n *   init: (instance, injector) => {\n *     instance.enabled = true;\n *     instance.db = injector.get(DatabaseService);\n *   },\n * });\n * MockInstance(ArbitraryDirective, {\n *   init: () => {\n *     return {\n *       someProperty: true,\n *     };\n *   },\n * });\n * ```\n */\nexport function MockInstance<T>(\n  declaration: AnyType<T>,\n  config?: {\n    init?: (instance: T, injector: Injector | undefined) => void | Partial<T> | Array<Partial<T>>;\n  },\n): void;\n\nexport function MockInstance<T>(declaration: AnyDeclaration<T>, ...args: any[]) {\n  funcImportExists(declaration, 'MockInstance');\n\n  if (args.length > 0) {\n    const { key, value, accessor } = parseMockInstanceArgs(args);\n\n    return mockInstanceConfig(declaration, key, value, accessor);\n  }\n\n  const config = ngMocksUniverse.configInstance.get(declaration) || /* istanbul ignore next */ {};\n\n  ngMocksUniverse.configInstance.set(declaration, {\n    ...config,\n    overloads: [],\n  });\n\n  // When we are calling MockInstance without a config we need to reset it from the checks too.\n  for (let i = checkReset.length - 1; i >= 0; i -= 1) {\n    if (checkReset[i][0] === declaration && checkReset[i][2] === currentStack) {\n      checkReset.splice(i, 1);\n    }\n  }\n}\n\n/**\n * Interface describes how to configure scopes for MockInstance.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance#customization-scopes\n */\n// istanbul ignore next: issue in istanbul https://github.com/istanbuljs/nyc/issues/1209\nexport namespace MockInstance {\n  /**\n   * Creates a scope which remembers all future customizations of MockInstance.\n   * It allows to reset them afterwards.\n   *\n   * @see https://ng-mocks.sudo.eu/api/MockInstance#remember\n   */\n  export function remember() {\n    ngMocksStack.stackPush();\n  }\n\n  /**\n   * Resets all changes in the current scope.\n   *\n   * @see https://ng-mocks.sudo.eu/api/MockInstance#restore\n   */\n  export function restore() {\n    ngMocksStack.stackPop();\n  }\n\n  /**\n   * Creates a local scope in `beforeEach` and `afterEach`.\n   * If `suite` has been passed, then `beforeAll` and `afterAll` are used.\n   *\n   * @see https://ng-mocks.sudo.eu/api/MockInstance#scope\n   */\n  export function scope(scope: 'all' | 'suite' | 'case' = 'case') {\n    if (scope === 'all' || scope === 'suite') {\n      beforeAll(MockInstance.remember);\n      afterAll(MockInstance.restore);\n    }\n    if (scope === 'all' || scope === 'case') {\n      beforeEach(MockInstance.remember);\n      afterEach(MockInstance.restore);\n    }\n  }\n}\n\n/**\n * MockReset resets everything what has been configured in MockInstance.\n * Please consider using MockInstance.scope() instead,\n * which respects customizations between tests.\n *\n * https://ng-mocks.sudo.eu/api/MockInstance#resetting-customization\n * https://ng-mocks.sudo.eu/api/MockInstance#scope\n */\nexport function MockReset() {\n  ngMocksUniverse.configInstance.clear();\n}\n","import { Type } from '../common/core.types';\nimport errorJestMock from '../common/error.jest-mock';\nimport funcGetName from '../common/func.get-name';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport { MockComponent } from '../mock-component/mock-component';\nimport { MockedComponent } from '../mock-component/types';\nimport { MockDirective } from '../mock-directive/mock-directive';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockPipe } from '../mock-pipe/mock-pipe';\nimport { MockedPipe } from '../mock-pipe/types';\n\n/**\n * MockDeclarations creates an array of mock declaration classes out of declarations passed as parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockComponent\n * @see https://ng-mocks.sudo.eu/api/MockDirective\n * @see https://ng-mocks.sudo.eu/api/MockPipe\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: MockDeclarations(\n *     Dep1Component,\n *     Dep2Directive,\n *     Dep3Pipe,\n *   ),\n * });\n * ```\n */\nexport function MockDeclarations(...declarations: Array<Type<any>>): Array<Type<any>> {\n  return declarations.map(MockDeclaration);\n}\n\n/**\n * MockDeclaration creates a mock declaration class out of an arbitrary declaration.\n *\n * @see https://ng-mocks.sudo.eu/api/MockComponent\n * @see https://ng-mocks.sudo.eu/api/MockDirective\n * @see https://ng-mocks.sudo.eu/api/MockPipe\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: [\n *     MockDeclaration(Dep1Component),\n *     MockDeclaration(Dep2Directive),\n *     MockDeclaration(Dep3Pipe),\n *   ],\n * });\n * ```\n */\nexport function MockDeclaration<T>(declaration: Type<T>): Type<MockedPipe<T> | MockedDirective<T> | MockedComponent<T>>;\n\nexport function MockDeclaration<T>(\n  declaration: Type<T>,\n): Type<MockedPipe<T> | MockedDirective<T> | MockedComponent<T>> {\n  if (isNgDef(declaration, 'p')) {\n    return MockPipe(declaration);\n  }\n  if (isNgDef(declaration, 'c')) {\n    return MockComponent(declaration);\n  }\n  if (isNgDef(declaration, 'd')) {\n    return MockDirective(declaration);\n  }\n\n  errorJestMock(declaration);\n  throw new Error(\n    [\n      'MockDeclaration does not know how to mock',\n      typeof declaration === 'function' ? funcGetName(declaration) : declaration,\n    ].join(' '),\n  );\n}\n","import coreReflectPipeResolve from '../common/core.reflect.pipe-resolve';\nimport { DirectiveIo } from '../common/core.types';\nimport funcDirectiveIoParse from '../common/func.directive-io-parse';\nimport { isNgDef } from '../common/func.is-ng-def';\n\nconst generateTemplateAttrWrap = (prop: string, type: 'i' | 'o') => (type === 'i' ? `[${prop}]` : `(${prop})`);\n\nconst generateTemplateAttrWithParams = (prop: string, type: 'i' | 'o'): string => {\n  let tpl = ` ${generateTemplateAttrWrap(prop, type)}=\"`;\n  tpl += type === 'i' ? prop : `__ngMocksOutput('${prop}', $event)`;\n  tpl += '\"';\n\n  return tpl;\n};\n\nconst generateTemplateAttr = (bindings: null | undefined | any[], attr: Array<DirectiveIo>, type: 'i' | 'o') => {\n  // unprovided params for inputs should render empty placeholders\n  if (!bindings && type === 'o') {\n    return '';\n  }\n\n  let mockTemplate = '';\n  const keys = bindings ?? attr;\n  for (const definition of attr) {\n    const { name, alias } = funcDirectiveIoParse(definition);\n\n    mockTemplate += keys.indexOf(alias || name) === -1 ? '' : generateTemplateAttrWithParams(alias || name, type);\n  }\n\n  return mockTemplate;\n};\n\nexport default (declaration: any, { selector, bindings, inputs, outputs }: any): string => {\n  let mockTemplate = '';\n\n  // istanbul ignore else\n  if (typeof declaration === 'string') {\n    mockTemplate = declaration;\n  } else if (isNgDef(declaration, 'p') && bindings && bindings.indexOf('$implicit') !== -1) {\n    mockTemplate = `{{ $implicit | ${coreReflectPipeResolve(declaration).name} }}`;\n  } else if (selector) {\n    mockTemplate += `<${selector}`;\n    mockTemplate += generateTemplateAttr(bindings, inputs, 'i');\n    mockTemplate += generateTemplateAttr(bindings, outputs, 'o');\n    mockTemplate += `></${selector}>`;\n  }\n\n  return mockTemplate;\n};\n","import { Component, Directive } from '@angular/core';\n\nimport coreConfig from '../common/core.config';\nimport coreDefineProperty from '../common/core.define-property';\nimport { Type } from '../common/core.types';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport helperDefinePropertyDescriptor from '../mock-service/helper.define-property-descriptor';\n\nimport funcGenerateTemplate from './func.generate-template';\n\nconst generateWrapperOutput =\n  (instance: any) =>\n  (prop: keyof any, event: any): void => {\n    if (typeof instance[prop] === 'function') {\n      return instance[prop](event);\n    }\n    if (instance[prop] && typeof instance[prop] === 'object' && typeof instance[prop].emit === 'function') {\n      return instance[prop].emit(event);\n    }\n    if (instance[prop] && typeof instance[prop] === 'object' && typeof instance[prop].next === 'function') {\n      return instance[prop].next(event);\n    }\n\n    instance[prop] = event;\n  };\n\nconst generateWrapperComponent = ({ bindings, options, inputs }: any) => {\n  class MockRenderComponent {\n    public constructor() {\n      coreDefineProperty(this, '__ngMocksOutput', generateWrapperOutput(this));\n\n      // The getter helps to remove the __ngContext__ attribute from <mock-render> tag.\n      // It helps with snapshot assertions.\n      // @see https://github.com/help-me-mom/ng-mocks/issues/3811\n      let ngContext = 0;\n      helperDefinePropertyDescriptor(this, '__ngContext__', {\n        get: () => ngContext,\n        set: (newValue: any) => (ngContext = newValue),\n        enumerable: false,\n      });\n\n      if (!bindings) {\n        for (const input of inputs || []) {\n          let value: any = null;\n          helperDefinePropertyDescriptor(this, input, {\n            get: () => value,\n            set: (newValue: any) => (value = newValue),\n          });\n        }\n      }\n    }\n  }\n\n  // A16: adding unique property.\n  coreDefineProperty(MockRenderComponent.prototype, `__ngMocks_index_${ngMocksUniverse.index()}`, undefined, false);\n  Component(options)(MockRenderComponent);\n\n  return MockRenderComponent;\n};\n\nconst generateWrapperDirective = ({ selector, options }: any) => {\n  class MockRenderDirective {}\n  Directive({\n    selector,\n    standalone: false,\n    providers: options.providers,\n  })(MockRenderDirective);\n\n  return MockRenderDirective;\n};\n\nconst getCache = () => {\n  const caches: Array<Type<any> & Record<'cacheKey', any[]>> = ngMocksUniverse.config.get('MockRenderCaches') ?? [];\n  if (caches.length === 0) {\n    ngMocksUniverse.config.set('MockRenderCaches', caches);\n  }\n\n  return caches;\n};\n\nconst checkCache = (caches: Array<Type<any> & Record<'cacheKey', any[]>>, cacheKey: any[]): undefined | Type<any> => {\n  for (const cache of caches) {\n    if (cache.cacheKey.length !== cacheKey.length) {\n      continue;\n    }\n    let isValid = true;\n    for (let i = 0; i < cacheKey.length; i += 1) {\n      if (cache.cacheKey[i] !== cacheKey[i]) {\n        isValid = false;\n        break;\n      }\n    }\n    if (isValid) {\n      return cache;\n    }\n  }\n\n  return undefined;\n};\n\nexport default (\n  template: any,\n  meta: Directive,\n  bindings: undefined | null | any[],\n  flags: Record<keyof any, any>,\n): Type<any> => {\n  const caches = getCache();\n\n  // nulls help to detect defaults\n  const cacheKey = [\n    template,\n    ...(bindings ?? [null]),\n    ...(flags.providers ?? [null]),\n    ...(flags.viewProviders ?? [null]),\n  ];\n  let ctor = checkCache(caches, cacheKey);\n  if (ctor) {\n    return ctor;\n  }\n\n  const inputs = meta.inputs ? [...meta.inputs] : [];\n  const outputs = meta.outputs ? [...meta.outputs] : [];\n  if (meta.hostDirectives) {\n    for (const hostDirective of meta.hostDirectives) {\n      if (typeof hostDirective !== 'object' || !hostDirective.directive) {\n        continue;\n      }\n\n      if (hostDirective.inputs) {\n        inputs.push(...hostDirective.inputs);\n      }\n      if (hostDirective.outputs) {\n        outputs.push(...hostDirective.outputs);\n      }\n    }\n  }\n\n  const mockTemplate = funcGenerateTemplate(template, { selector: meta.selector, inputs, outputs, bindings });\n  const options: Component = {\n    providers: flags.providers,\n    selector: 'mock-render',\n    template: mockTemplate,\n    viewProviders: flags.viewProviders,\n    standalone: false,\n  };\n\n  ctor = generateWrapperComponent({ ...meta, bindings, options });\n  coreDefineProperty(ctor, 'cacheKey', cacheKey);\n  coreDefineProperty(ctor, 'tpl', mockTemplate);\n\n  if (meta.selector && options.providers) {\n    const dir = generateWrapperDirective({ ...meta, bindings, options });\n    coreDefineProperty(ctor, 'providers', dir);\n  }\n\n  caches.unshift(ctor as any);\n  caches.splice(ngMocksUniverse.global.get('mockRenderCacheSize') ?? coreConfig.mockRenderCacheSize);\n\n  return ctor;\n};\n","import coreDefineProperty from '../common/core.define-property';\nimport helperDefinePropertyDescriptor from '../mock-service/helper.define-property-descriptor';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nconst createPropertyGet = (key: keyof any & string, reader: Record<keyof any, any>, source: Record<keyof any, any>) => {\n  const handler = () => {\n    if (typeof source[key] === 'function') {\n      if (reader[`__ngMocks_${key}__origin`] !== source[key]) {\n        const clone = helperMockService.createClone(source[key], reader, source);\n        coreDefineProperty(reader, `__ngMocks_${key}`, clone);\n        coreDefineProperty(reader, `__ngMocks_${key}__origin`, source[key]);\n      }\n\n      return reader[`__ngMocks_${key}`];\n    }\n\n    return source[key];\n  };\n  coreDefineProperty(handler, '__ngMocksProxy', true);\n\n  return handler;\n};\n\nconst createPropertySet = (key: keyof any & string, reader: Record<keyof any, any>, source: Record<keyof any, any>) => {\n  const handler = (newValue: any) => {\n    if (reader[`__ngMocks_${key}`]) {\n      reader[`__ngMocks_${key}`] = undefined;\n    }\n    if (reader[`__ngMocks_${key}__origin`]) {\n      reader[`__ngMocks_${key}__origin`] = undefined;\n    }\n    source[key] = newValue;\n  };\n  coreDefineProperty(handler, '__ngMocksProxy', true);\n\n  return handler;\n};\n\nconst extractAllKeys = (instance: object) => [\n  ...helperMockService.extractPropertiesFromPrototype(Object.getPrototypeOf(instance)),\n  ...helperMockService.extractMethodsFromPrototype(Object.getPrototypeOf(instance)),\n  ...Object.keys(instance),\n];\n\nconst extractOwnKeys = (instance: object) => [...Object.getOwnPropertyNames(instance), ...Object.keys(instance)];\n\nexport default (\n  reader: Record<keyof any, any>,\n  source: Record<keyof any, any> | undefined,\n  extra: string[],\n  force = false,\n): void => {\n  if (!source) {\n    return;\n  }\n  coreDefineProperty(reader, '__ngMocks__source', source);\n  const exists = extractOwnKeys(reader);\n  const fields = [...extractAllKeys(source), ...extra];\n  for (const key of fields) {\n    if (!force && exists.indexOf(key) !== -1) {\n      continue;\n    }\n    helperDefinePropertyDescriptor(reader, key, {\n      get: createPropertyGet(key, reader, source),\n      set: createPropertySet(key, reader, source),\n    });\n    exists.push(key);\n  }\n};\n","import { Component, Directive } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\n\nimport { extendClass } from '../common/core.helpers';\nimport coreReflectDirectiveResolve from '../common/core.reflect.directive-resolve';\nimport { AnyType } from '../common/core.types';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport { isStandalone } from '../common/func.is-standalone';\n\nconst registerTemplateMiddleware = (template: AnyType<any>, meta: Directive): void => {\n  const child = extendClass(template);\n\n  const alias = {\n    provide: template,\n    useExisting: child,\n  };\n  meta.providers = [...(meta.providers || []), alias];\n\n  // https://github.com/help-me-mom/ng-mocks/issues/1876\n  // We need to apply overrides to our cloned declaration.\n  let set: any = {};\n  try {\n    const ngMocksOverrides: Map<any, any> = (TestBed as any).ngMocksOverrides;\n    const { override } = ngMocksOverrides.get(template);\n    set = { ...override.set };\n    set.providers = set.providers ? [...set.providers, alias] : meta.providers;\n  } catch {\n    // nothing to do\n  }\n\n  (isNgDef(template, 'c') ? Component : Directive)({\n    ...meta,\n    ...set,\n  })(child);\n  TestBed.configureTestingModule({\n    [isStandalone(child) ? 'imports' : 'declarations']: [child],\n  });\n};\n\nexport default (template: AnyType<any>): Directive => {\n  if (!isNgDef(template, 'c') && !isNgDef(template, 'd')) {\n    return {};\n  }\n\n  const meta = coreReflectDirectiveResolve(template);\n  const override: Directive = {};\n  for (const key of Object.keys(meta)) {\n    override[key as never] = meta[key as never];\n  }\n\n  if (override.selector && /[\\s,[\\]]/.test(override.selector)) {\n    override.selector = '';\n  }\n\n  if (!override.selector) {\n    // istanbul ignore next\n    override.selector = (TestBed as any).ngMocksSelectors?.get(template) || '';\n    if (!override.selector) {\n      override.selector = `ng-mocks-${template.name}`;\n      registerTemplateMiddleware(template, override);\n      // istanbul ignore else\n      if ((TestBed as any).ngMocksSelectors) {\n        (TestBed as any).ngMocksSelectors.set(template, override.selector);\n      }\n    }\n  }\n\n  return override;\n};\n","import { DebugElement, Directive, InjectionToken } from '@angular/core';\nimport { getTestBed, ModuleTeardownOptions, TestBed, TestModuleMetadata } from '@angular/core/testing';\n\nimport coreDefineProperty from '../common/core.define-property';\nimport { getInjection } from '../common/core.helpers';\nimport { AnyDeclaration, AnyType, Type } from '../common/core.types';\nimport funcGetName from '../common/func.get-name';\nimport funcImportExists from '../common/func.import-exists';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport ngMocksStack from '../common/ng-mocks-stack';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport { ngMocks } from '../mock-helper/mock-helper';\nimport helperDefinePropertyDescriptor from '../mock-service/helper.define-property-descriptor';\nimport { MockService } from '../mock-service/mock-service';\n\nimport funcCreateWrapper from './func.create-wrapper';\nimport funcInstallPropReader from './func.install-prop-reader';\nimport funcReflectTemplate from './func.reflect-template';\nimport { IMockRenderFactoryOptions, MockedComponentFixture } from './types';\n\nexport interface MockRenderFactory<C = any, F extends keyof any = keyof C> {\n  bindings: keyof F;\n  configureTestBed: () => void;\n  declaration: AnyType<never>;\n  <T extends Record<F, any>>(params?: Partial<T>, detectChanges?: boolean): MockedComponentFixture<C, T>;\n}\n\nconst renderDeclaration = (fixture: any, template: any, params: any): void => {\n  fixture.point =\n    fixture.debugElement.children[0] &&\n    fixture.debugElement.children[0].nativeElement.nodeName !== '#text' &&\n    fixture.debugElement.children[0].nativeElement.nodeName !== '#comment'\n      ? fixture.debugElement.children[0]\n      : fixture.debugElement;\n  if (isNgDef(template, 'd')) {\n    helperDefinePropertyDescriptor(fixture.point, 'componentInstance', {\n      get: () => ngMocks.get(fixture.point, template),\n    });\n  } else if (isNgDef(template, 'p')) {\n    helperDefinePropertyDescriptor(fixture.point, 'componentInstance', {\n      get: () => ngMocks.findInstance(fixture.point, template),\n    });\n  }\n  tryWhen(!params, () => funcInstallPropReader(fixture.componentInstance, fixture.point.componentInstance, []));\n};\n\nconst renderInjection = (fixture: any, template: any, params: any): void => {\n  let instance: any;\n  try {\n    instance = getInjection(template);\n  } catch (error) {\n    if (isNgDef(template, 'p')) {\n      throw new Error(\n        [\n          `Cannot render ${funcGetName(template)}.`,\n          'Did you forget to set $implicit param, or add the pipe to providers?',\n          'https://ng-mocks.sudo.eu/guides/pipe',\n        ].join(' '),\n      );\n    }\n    throw error;\n  }\n  if (params) {\n    ngMocks.stub(instance, params);\n  }\n  fixture.point = MockService(DebugElement, {\n    childNodes: [],\n    children: [],\n    componentInstance: instance,\n    nativeElement: MockService(HTMLElement),\n  });\n  funcInstallPropReader(fixture.componentInstance, fixture.point.componentInstance, [], true);\n};\n\nconst tryWhen = (flag: boolean, callback: () => void) => {\n  if (!flag) {\n    return;\n  }\n  try {\n    // ivy throws Error: Expecting instance of DOM Element\n    callback();\n  } catch {\n    // nothing to do\n  }\n};\n\nconst fixtureMessage = [\n  'Forgot to flush TestBed?',\n  'MockRender cannot be used without a reset after TestBed.get / TestBed.inject / TestBed.createComponent and another MockRender in the same test.',\n  'If you want to mock a service before rendering, consider usage of MockRenderFactory or MockInstance.',\n  'To flush TestBed, add a call of ngMocks.flushTestBed() before the call of MockRender, or pass `reset: true` to MockRender options.',\n].join(' ');\n\nconst handleFixtureError = (e: any) => {\n  const error = new Error(fixtureMessage);\n  coreDefineProperty(error, 'parent', e);\n  throw error;\n};\n\nconst flushTestBed = (flags: Record<string, any>): void => {\n  const globalFlags = ngMocksUniverse.global.get('flags');\n  const testBed: any = getTestBed();\n  if (flags.reset || (!testBed._instantiated && !testBed._testModuleRef)) {\n    ngMocks.flushTestBed();\n  } else if (globalFlags.onTestBedFlushNeed !== 'throw' && (testBed._instantiated || testBed._testModuleRef)) {\n    if (globalFlags.onTestBedFlushNeed === 'warn') {\n      console.warn(fixtureMessage);\n    }\n    ngMocks.flushTestBed();\n  }\n};\n\nconst generateFactoryInstall =\n  (ctor: AnyType<any> & { providers?: AnyType<any> }, options: IMockRenderFactoryOptions) => () => {\n    const testBed: TestBed & {\n      _compiler?: {\n        declarations?: Array<AnyType<any>>;\n      };\n      _declarations?: Array<AnyType<any>>;\n      declarations?: Array<AnyType<any>>;\n      _instanceTeardownOptions?: ModuleTeardownOptions | undefined;\n    } = getTestBed();\n    // istanbul ignore next\n    const existing = testBed._compiler?.declarations || testBed.declarations || testBed._declarations;\n    if (!existing || existing.indexOf(ctor) === -1) {\n      flushTestBed(options);\n      try {\n        const declarations: Array<AnyType<any>> = [];\n        if (ctor.providers) {\n          declarations.push(ctor.providers);\n        }\n        declarations.push(ctor);\n        const moduleDef: TestModuleMetadata = {\n          declarations,\n        };\n        (moduleDef as any).teardown = testBed._instanceTeardownOptions;\n        TestBed.configureTestingModule(moduleDef);\n      } catch (error) {\n        handleFixtureError(error);\n      }\n    }\n  };\n\nconst generateFactory = (\n  componentCtor: Type<any> & { tpl?: string },\n  bindings: undefined | null | string[],\n  template: any,\n  options: IMockRenderFactoryOptions,\n) => {\n  const result = (params: any, detectChanges?: boolean) => {\n    result.configureTestBed();\n    const fixture: any = TestBed.createComponent(componentCtor);\n\n    funcInstallPropReader(fixture.componentInstance, params ?? {}, bindings ?? []);\n    coreDefineProperty(fixture, 'ngMocksStackId', ngMocksUniverse.global.get('bullet:stack:id'));\n\n    if (detectChanges === undefined || detectChanges) {\n      fixture.detectChanges();\n    }\n\n    if (\n      typeof template === 'string' ||\n      isNgDef(template, 'c') ||\n      isNgDef(template, 'd') ||\n      (componentCtor.tpl && isNgDef(template, 'p'))\n    ) {\n      renderDeclaration(fixture, template, params);\n    } else {\n      renderInjection(fixture, template, params);\n    }\n\n    return fixture;\n  };\n  result.declaration = componentCtor;\n  result.bindings = bindings;\n  result.configureTestBed = generateFactoryInstall(componentCtor, options);\n\n  return result;\n};\n\n/**\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent>(\n  template: InjectionToken<MComponent>,\n  bindings?: undefined | null,\n  options?: IMockRenderFactoryOptions,\n): MockRenderFactory<MComponent, never>;\n\n/**\n * MockRenderFactory is a delayed version of MockRender.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent>(\n  template: AnyType<MComponent>,\n  bindings: undefined | null,\n  options?: IMockRenderFactoryOptions,\n): MockRenderFactory<MComponent, keyof MComponent>;\n\n/**\n * MockRenderFactory is a delayed version of MockRender.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent, TKeys extends keyof any>(\n  template: AnyType<MComponent>,\n  bindings: TKeys[],\n  options?: IMockRenderFactoryOptions,\n): MockRenderFactory<MComponent, TKeys>;\n\n/**\n * MockRenderFactory is a delayed version of MockRender.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent, TKeys extends keyof any = keyof any>(\n  template: AnyType<MComponent>,\n  bindings: TKeys[],\n  options?: IMockRenderFactoryOptions,\n): MockRenderFactory<MComponent, TKeys>;\n\n/**\n * Without params we should not autocomplete any keys of any types.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent>(\n  template: AnyType<MComponent>,\n): MockRenderFactory<MComponent, keyof MComponent>;\n\n/**\n * An empty string does not have point.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory(template: ''): MockRenderFactory<void, never>;\n\n/**\n * Without params we should not autocomplete any keys of any types.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent = void>(template: string): MockRenderFactory<MComponent>;\n\n/**\n * MockRenderFactory is a delayed version of MockRender.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent = void, TKeys extends keyof any = keyof any>(\n  template: string,\n  bindings: TKeys[],\n  options?: IMockRenderFactoryOptions,\n): MockRenderFactory<MComponent, TKeys>;\n\nexport function MockRenderFactory<MComponent, TKeys extends string>(\n  template: string | AnyDeclaration<MComponent>,\n  bindings?: undefined | null | TKeys[],\n  options: IMockRenderFactoryOptions = {},\n): any {\n  funcImportExists(template, 'MockRender');\n\n  const meta: Directive = typeof template === 'string' || isNgDef(template, 't') ? {} : funcReflectTemplate(template);\n  const componentCtor: any = funcCreateWrapper(template, meta, bindings, options);\n  const factory = generateFactory(componentCtor, bindings, template, options);\n  if (ngMocksStack.current().level !== 'root' && options.configureTestBed !== false) {\n    factory.configureTestBed();\n  }\n\n  return factory;\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { AnyDeclaration, AnyType } from '../common/core.types';\n\nimport { MockRenderFactory } from './mock-render-factory';\nimport { IMockRenderOptions, MockedComponentFixture } from './types';\n\n/**\n * This signature of MockRender lets create an empty fixture.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender(): MockedComponentFixture<void, void>;\n\n/**\n * This signature of MockRender lets create a fixture to access a token.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent>(\n  template: InjectionToken<MComponent>,\n  params?: undefined | null,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, void>;\n\n/**\n * This signature of MockRender lets create a fixture to access a component without parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent>(\n  template: AnyType<MComponent>,\n  params: undefined | null,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, MComponent>;\n\n/**\n * This signature of MockRender lets create a fixture with parameters to access a component.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent, TComponent extends object>(\n  template: AnyType<MComponent>,\n  params: TComponent,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, TComponent>;\n\n/**\n * This signature of MockRender lets create a fixture with parameters to access a component.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent, TComponent extends object = Record<keyof any, any>>(\n  template: AnyType<MComponent>,\n  params: TComponent,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, TComponent>;\n\n/**\n * This signature of MockRender without params should not autocomplete any keys of any types.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent>(template: AnyType<MComponent>): MockedComponentFixture<MComponent, MComponent>;\n\n/**\n * This signature of MockRender without params should not autocomplete any keys of any types.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent = void>(template: string): MockedComponentFixture<MComponent>;\n\n/**\n * This signature of MockRender lets create a fixture based on string template.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent = void>(\n  template: string,\n  params: undefined | null,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, void>;\n\n/**\n * This signature of MockRender lets create a fixture with parameters to access a string based template.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent = void, TComponent extends Record<keyof any, any> = Record<keyof any, any>>(\n  template: string,\n  params: TComponent,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, TComponent>;\n\n/**\n * This signature of MockRender lets create a fixture with parameters to access a string based template.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent, TComponent extends Record<keyof any, any> = Record<keyof any, any>>(\n  template: string,\n  params: TComponent,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, TComponent>;\n\nexport function MockRender<MComponent, TComponent extends Record<keyof any, any>>(\n  template?: string | AnyDeclaration<MComponent>,\n  params?: TComponent,\n  flags: boolean | IMockRenderOptions = true,\n): any {\n  const tpl = arguments.length === 0 ? '' : template;\n  const bindings = params && typeof params === 'object' ? Object.keys(params) : params;\n  const options = typeof flags === 'boolean' ? { detectChanges: flags } : { ...flags };\n  const factory = (MockRenderFactory as any)(tpl, bindings, options);\n\n  return factory(params, options.detectChanges);\n}\n"],"names":["instance","prop","desc","Object","defineProperty","sourceDesc","configurable","undefined","get","set","writable","value","service","prototype","getPrototypeOf","descriptor","getOwnPropertyDescriptor","globalMap","key","ngMocksUniverse","global","has","Map","builtDeclarations","builtProviders","cacheDeclarations","cacheProviders","config","configInstance","flags","Set","touches","onMockBuilderMissingDependency","onMockInstanceRestoreNeed","onTestBedFlushNeed","getOverrides","getDefaults","getConfigMock","def","defValue","getResolution","getBuildDeclaration","mode","replacement","hasBuildDeclaration","isExcludedDef","resolution","isProvidedDef","indexValue","index","window","g","isNgInjectionToken","token","ngMetadataName","property","enumerable","definePropertyDescriptor","param","name","alias","split","map","v","trim","override","style","mock","correctInstance","applyOverrides","skipProps","createClone","push","getOwnPropertyNames","keys","indexOf","hasOwnProperty","call","isNgType","declaration","type","decorators","length","offset","isModuleCheck","ngType","isComponentCheck","isDirectiveCheck","isPipeCheck","isInjectableCheck","isNgDef","isModule","isComponent","isDirective","isPipe","isInjectable","provide","__forward_ref__","mockRenderCacheSize","neverMockModule","neverMockProvidedFunction","neverMockToken","dependencies","provider","ngModule","directive","sanitizerMethods","extraMethods","DomSanitizer","Sanitizer","result","method","bindFrom","bindTo","args","apply","this","normalizePrimitivesMap","handleProvider","useFactory","multi","add","mockProvider","useValue","check","normalizePrimitives","createValueProvider","useClass","createClassProvider","isNeverMockFunction","toString","isNeverMockToken","existing","child","applyMissingClassProperties","createFactoryProvider","createMockProvider","required","skipName","getTestBedInjection","getInjection","testBed","getTestBed","inject","flatten","values","Array","isArray","mapKeys","forEach","_","mapValues","destination","mapEntries","extractDependencyArray","deps","flag","extractDependency","dep","extendClassicClass","base","glb","ngMocksParent","eval","ngMocksResult","MockMiddleware","extendClass","parameters","applyCallbackToken","init","overrides","Injector","injector","configGlobal","callbacks","inst","callback","applyCallback","encapsulation","__ngMocksProxy","module","exports","y","x","__webpack_require__","d","__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__","isNgModuleDefWithProviders","areEqualDefs","mockDef","providerDiffers","defDiffers","a","b","anyDiffers","resolutions","changed","change","parseProvider","isSuitableProvider","interceptor","useExisting","excludeInterceptors","isPreconfiguredDependency","mockOf","__internal","isPreconfiguredUseExisting","existingMock","createFromResolution","createPredefinedMockProvider","replaceWithMocks","pushDecorator","decorator","deleteIndex","splice","getAllKeys","props","parsePropMetadataParserFactoryProp","bindingPropertyName","normalizedDef","defName","defAlias","defRequired","unshift","parsePropMetadataParserInput","parsePropMetadataParserOutput","parsePropMetadataParserFactoryQueryChild","isViewQuery","queries","selector","read","static","parsePropMetadataParserContentChild","parsePropMetadataParserViewChild","parsePropMetadataParserFactoryQueryChildren","descendants","emitDistinctChangesOnly","parsePropMetadataMap","ContentChild","ContentChildren","HostBinding","hostPropertyName","host","hostBindings","HostListener","eventName","hostListeners","Input","Output","ViewChild","ViewChildren","parsePropDecoratorsParserFactoryProp","parsePropDecoratorsParserInput","parsePropDecoratorsParserOutput","parsePropDecoratorsParserFactoryQuery","parsePropDecoratorsParserContent","parsePropDecoratorsParserView","parsePropDecoratorsMap","buildDeclaration","inputs","input","outputs","output","standalone","reflectionCapabilities","parse","__ngMocksDeclarations","parent","parentDeclarations","attributes","propDecorators","createDeclarations","__parameters__","attributeName","parseParameters","__annotations__","annotation","parseAnnotations","parseDecorators","parsePropDecorators","__prop__metadata__","parsePropMetadata","parseNgDef","Directive","Component","Pipe","overloads","stub","NG_MOCKS","InjectionToken","__ngMocksSkip","NG_MOCKS_TOUCHES","NG_MOCKS_OVERRIDES","NG_MOCKS_GUARDS","NG_MOCKS_RESOLVERS","NG_MOCKS_INTERCEPTORS","NG_MOCKS_ROOT_PROVIDERS","isAngularClass","proto","match","cls","clsCode","codePointAt","regEx","RegExp","guessClass","mockVariableMap","cache","createMockFromPrototype","prefix","mockFunction","constructor","setPrototypeOf","mockService","createMock","mockVariable","MockService","clear","mockName","original","func","customMockFunction","val","setValue","newSetValue","newValue","handleItemKeys","handleItemGetGuards","section","guards","guard","handleSection","updated","valueItem","handleArray","resolve","resolveUpdated","resolver","handleItem","ngMockshelperMockService","registerMockFunction","methods","extractMethodsFromPrototype","properties","extractPropertiesFromPrototype","extractPropertyDescriptor","accessType","parseArgs","detectedMockName","createName","generateMockDef","__ngMocks","__ngMocksSet","__ngMocksGet","resolveProvider","__WEBPACK_EXTERNAL_MODULE__angular_core_testing_89899de6__","badCharacters","_desc","replace","__webpack_module_cache__","moduleId","cachedModule","__webpack_modules__","definition","o","globalThis","Function","e","obj","r","Symbol","toStringTag","stackRoot","id","level","stack","current","listenersPush","listenersPop","stackPush","state","stackPop","pop","subscribePush","subscribePop","unsubscribePush","unsubscribePop","providers","mocks","getNgType","isStandalone","i","merge","MockBuilderStash","data","backup","restore","providedIn","ngInjectableDef","providerDef","Error","join","_isMockFunction","jest","arg","NgModule","getSourceOfMock","instanceDef","ngModuleDef","__set","exported","__WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__","AbstractControl","DefaultValueAccessor","FormControl","FormControlDirective","NG_ASYNC_VALIDATORS","NG_VALIDATORS","NG_VALUE_ACCESSOR","NgControl","NgModel","applyProxy","proxy","storage","MockControlValueAccessorProxy","target","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","writeValue","MockValidatorProxy","registerOnValidatorChange","validate","control","MockAsyncValidatorProxy","Promise","setValueAccessor","ngControl","valueAccessor","__ngMocksConfig","setControlValueAccessor","__ngMocksCtor","installValueAccessor","isControlValueAccessor","installValidator","validators","validator","isValidator","applyNgValueAccessor","_rawValidators","_rawAsyncValidators","applyOutputs","mockOutputs","EventEmitter","applyPrototype","applyMethods","applyProps","Mock","queryScanKeys","Optional","Self","LegacyControlValueAccessor","__simulateChange","__simulateTouch","__simulateValidatorChange","exclude","source","configInput","isInternalKey","cloneVcrQuery","query","ViewContainerRef","generateFinalQueries","final","scanKeys","processTokens","mockType","processOwnUseExisting","sourceType","processProvider","buildConfig","meta","params","hasResolver","options","exportAs","imports","skipExports","hostDirectives","viewProviders","delete","getType","funcName","isMockNgDef","component","fixtures","_activeFixtures","debugElement","__ngMocksResolutions","cacheFlag","hasNgMocksDepsResolution","vcrArgs","trArgs","TemplateRef","viewChildTemplate","isTemplateRefQuery","parts","contentChildSelector","indices","mixRenderPrepareVcr","cdr","vcrNgIf","trNgIf","createEmbeddedView","detectChanges","mixRenderReorderViews","viewContainer","views","view","destroy","viewIndex","move","mixRenderApplyContext","context","contextKey","markForCheck","mixRenderHandleViews","vcr","templates","templateRef","mixRender","$implicit","variables","QueryList","toArray","mixHideHandler","mixHide","changeDetector","ComponentMockBase","super","ngAfterViewInit","__rendered","render","block","__render","ChangeDetectorRef","decorateClass","template","MockComponents","components","MockComponent","DirectiveMockBase","element","__ngMocksInstall","ngOnInit","ElementRef","MockDirectives","directives","MockDirective","MockPipes","pipes","pipe","MockPipe","getMockClass","transformValue","transform","flagMock","flagKeep","flagReplace","flagNever","preProcessFlags","toggleSkipMockFlag","isRootModule","postProcessFlags","extractModuleAndProviders","ngModuleProviders","getExistingMockModule","detectMockModule","mockModule","getMockProviders","generateReturn","mockModuleProviders","MockModule","processDefMap","processDef","createResolveProvider","createResolveWithProviders","createResolveExisting","createResolveExcluded","createResolve","detectedDef","flatToExisting","filter","item","configureProcessMetaKeys","processMeta","mockModuleDef","cachePipe","skipMarkProviders","resolveDefForExport","correctExports","moduleConfig","export","exportAll","skipAddExports","addExports","declarations","skipMock","replaceDef","patchedOriginal","EntryComponentsModule","componentFactoryResolver","originCFR","resolveComponentFactory","ComponentFactoryResolver","IvyModule","entryComponents","entryModule","__WEBPACK_EXTERNAL_MODULE__angular_common_d12e0fe1__","skipResolution","skipSystem","DOCUMENT","skipByResolution","bucket","touched","buckets","concat","keepDef","size","parameter","defProviders","loModule","loProviders","skipDef","handleDef","extendedDef","isExportedOnRoot","configDef","cnfInstance","cnfDef","onRoot","returnModule","moveModulesUp","isA","isB","configDefault","processed","forgotten","defs","sort","originalDef","dependency","globalFlags","depName","errorMessages","defStr","errorMessage","console","warn","funcExtractDeps","recursive","field","itemType","excludeDef","shallow","createInstance","precise","deleteTouch","loDef","k","a1","a2","defaultMockValue","normaliseModule","generateProviderValue","defaultMock","MockBuilderPromise","beforeCC","stash","beforeCompileComponents","build","defStack","combineParams","MockBuilder","reject","then","catch","wipe","setConfigDef","finally","keep","setDefValue","fulfill","promise","TestBed","configureTestingModule","compileComponents","objectsDiffer","prototypeKeys","sourceKeys","compare","areEqualProviderDefs","thisDef","prototypeDef","prototypeDefs","thisDefs","MockBuilderPerformance","equalsTo","clone","cloneConfig","resetTestingModule","extensions","mockBuilderExtend","extend","nativeElement","nativeNode","findDebugElement","el","defaultNotFoundValue","sel","notFoundValue","__WEBPACK_EXTERNAL_MODULE__angular_platform_browser_bc6fa964__","By","css","node","nodeName","_tNode","elDef","defaultInjector","getVcr","getScanViewRefRootNodes","vrIndex","vr","rnIndex","rootNodes","scanViewRef","childNodes","rootNode","isDirect","children","childNode","childNodeParent","start","end","detectParent","expected","currentParent","childElDef","nestedCheck","includeTextNode","isSelector","isValidValue","selectors","attribute","getMeta","publicProviders","requiredAttributes","bindings","binding","nonMinifiedName","nodeIndex","collectSelectors","providerTokens","collectAttributesClassic","expectedAttributes","attr","collectAttributesIvy","attrs","step","getParentWithInjector","parentInjector","parentInstance","detectGatherFlag","gather","parentNode","isNotObject","shouldBeScanned","scanned","scan","nodes","normalize","gatherDefault","nodesLength","bindingStartIndex","detectContextByIndex","rootView","detectContext","__ngContext__","_lView","contextToNodes","lView","_debugContext","error","ngTempTokenPath","root","attrMatches","detectAttribute","attrDef","label","detectInClassic","detectInIvy","attrIndex","lViewValue","references","regExp","isCrawlByAttribute","isCrawlByAttributeValue","isCrawlById","isCrawlByTagName","isCrawlByDeclaration","slice","detector","isMockControlValueAccessor","innerHTML","preventBubble","customEvent","event","initParams","bubbles","cancelable","eventObj","document","createEvent","initCustomEvent","eventCtor","Event","CustomEvent","keyMap","alt","altKey","code","location","which","arrowdown","arrowleft","arrowright","arrowup","backspace","ctrlKey","enter","esc","metaKey","shift","shiftKey","space","tab","f","getCode","char","toUpperCase","applyPayload","payload","keyData","dot","eventPayload","Math","max","toEventObj","getNativeElement","disabled","dispatchEvent","message","formControlDirective","form","ngModel","triggerInput","handleKnown","update","emit","hasListener","listeners","some","listener","methodName","triggerTouch","markAsTouched","queryAll","fixture","elements","format","html","handlePrimitives","outer","innerOuter","nodeValue","textContent","wholeText","normalizeValue","normalizeText","text","getElementValue","outerHTML","calls","action","jasmine","createSpy","defaultMethods","factory","beforeEach","afterEach","propName","hooks","after","before","moduleDef","ngMocksFasterLock","ngMocksFasterInstalled","shouldTearDownTestingModule","tearDownTestingModule","_instantiated","_moduleFactory","_testModuleRef","resetFixtures","activeFixtures","active","ngMocksStackId","idAdd","bulletStack","idRemove","idAll","idEach","beforeAll","afterAll","iterator","recursively","fail","skip","createMetaHandler","optional","createMeta","typeMap","handleModuleWithProviders","handleDeclaration","handleDestructuring","toMock","resolveMap","resolveHandler","skipDestruction","generateDataWithUniverse","generateData","protoKeep","protoMock","protoExclude","getValVcr","entryPoint","scanValue","scanVcr","handleDirective","isExpectedTemplate","__template","__vcr","isRightTemplate","localVcr","localValue","findDeep","tpl","elementRef","limit","flagNames","autoSpy","click","crawl","defaultConfig","faster","find","findAll","findInstance","findInstances","findTemplateRef","findTemplateRefs","flushTestBed","formatHtml","formatText","globalExclude","globalKeep","globalMock","globalReplace","globalWipe","guts","hide","ignoreOnConsole","reset","reveal","revealAll","stubMember","throwOnConsole","touch","trigger","ngMocks","defaultValue","MockProviders","MockProvider","applyOverride","overrideComponent","overrideDirective","overrideModule","overrideProvider","ngMocksOverrides","applyNgMocksOverrides","initTestBed","ngMocksSelectors","generateTouches","local","__ngMocksTouches","defineTouches","knownTouches","_providers","_compiler","applyPlatformOverrideDef","applyPlatformOverridesBasedOnProvidedIn","applyPlatformOverridesBasedOnDefaults","applyPlatformOverrides","useMockBuilder","hasMocks","mockBuilder","finalModuleDef","builder","isMock","patchVcrInstance","vcrInstance","ngMocksOverridesPatched","createComponent","patchedCreateComponent","createComponentArgs","viewContainerInstall","ngMocksOverridesInstalled","ngElementId","__NG_ELEMENT_ID__","ngElementIdArgs","installInjector","__ngMocksInjector","injectorGet","argsGet","install","injectorCreate","create","argsCreate","isMockedNgDefOf","getMock","getMockedNgDefOf","isMockOf","isMockValidator","checkReset","showError","currentStack","mockInstance","universeConfig","parseMockInstanceArgs","accessor","checkCollect","mockInstanceConfig","mockInstances","MockInstance","MockReset","MockDeclarations","MockDeclaration","remember","scope","generateTemplateAttrWrap","generateTemplateAttrWithParams","generateTemplateAttr","mockTemplate","generateWrapperOutput","next","generateWrapperComponent","MockRenderComponent","ngContext","generateWrapperDirective","MockRenderDirective","getCache","caches","checkCache","cacheKey","isValid","ctor","hostDirective","dir","createPropertyGet","reader","handler","createPropertySet","extractAllKeys","extractOwnKeys","extra","force","exists","fields","registerTemplateMiddleware","test","renderDeclaration","point","tryWhen","componentInstance","renderInjection","DebugElement","HTMLElement","fixtureMessage","handleFixtureError","generateFactoryInstall","_declarations","teardown","_instanceTeardownOptions","generateFactory","componentCtor","configureTestBed","MockRenderFactory","MockRender","arguments"],"sourceRoot":""}