{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let CounterService = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class CounterService {\n    constructor() {\n      this.count = 0;\n      this.subject = new BehaviorSubject(this.count);\n    }\n    // Chaque BehaviorSubject est un Observable et un Observer.\n    // Nous voulons ne pas exposer l'observable à l'extérieur\n    // Nous transformons BehaviorSubject en un simple Observable.\n    getCount() {\n      return this.subject.asObservable();\n    }\n    increment() {\n      this.count++;\n      this.notify();\n    }\n    decrement() {\n      this.count--;\n      this.notify();\n    }\n    reset(newCount) {\n      this.count = newCount;\n      this.notify();\n    }\n    notify() {\n      this.subject.next(this.count);\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function CounterService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CounterService)();\n    }, this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CounterService,\n      factory: CounterService.ɵfac\n    }));\n  }\n  _staticBlock();\n  return CounterService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}