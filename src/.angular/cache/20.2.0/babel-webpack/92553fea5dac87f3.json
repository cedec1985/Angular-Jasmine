{"ast":null,"code":"/**\n * @license Angular v20.2.1\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { ɵgetDOM as _getDOM, DOCUMENT, PlatformLocation } from '@angular/common';\nimport { MockPlatformLocation } from '@angular/common/testing';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, createPlatformFactory, APP_ID, ɵinternalProvideZoneChangeDetection as _internalProvideZoneChangeDetection, ɵChangeDetectionScheduler as _ChangeDetectionScheduler, ɵChangeDetectionSchedulerImpl as _ChangeDetectionSchedulerImpl, NgModule } from '@angular/core';\nimport { TestComponentRenderer } from '@angular/core/testing';\nimport { platformBrowser, BrowserModule } from './browser.mjs';\nimport './dom_renderer.mjs';\n\n/**\n * A DOM based implementation of the TestComponentRenderer.\n */\nlet DOMTestComponentRenderer = /*#__PURE__*/(() => {\n  class DOMTestComponentRenderer extends TestComponentRenderer {\n    _doc;\n    constructor(_doc) {\n      super();\n      this._doc = _doc;\n    }\n    insertRootElement(rootElId, tagName = 'div') {\n      this.removeAllRootElementsImpl();\n      const rootElement = _getDOM().getDefaultDocument().createElement(tagName);\n      rootElement.setAttribute('id', rootElId);\n      this._doc.body.appendChild(rootElement);\n    }\n    removeAllRootElements() {\n      // Check whether the `DOCUMENT` instance retrieved from DI contains\n      // the necessary function to complete the cleanup. In tests that don't\n      // interact with DOM, the `DOCUMENT` might be mocked and some functions\n      // might be missing. For such tests, DOM cleanup is not required and\n      // we skip the logic if there are missing functions.\n      if (typeof this._doc.querySelectorAll === 'function') {\n        this.removeAllRootElementsImpl();\n      }\n    }\n    removeAllRootElementsImpl() {\n      const oldRoots = this._doc.querySelectorAll('[id^=root]');\n      for (let i = 0; i < oldRoots.length; i++) {\n        _getDOM().remove(oldRoots[i]);\n      }\n    }\n    static ɵfac = function DOMTestComponentRenderer_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || DOMTestComponentRenderer)(i0.ɵɵinject(DOCUMENT));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: DOMTestComponentRenderer,\n      factory: DOMTestComponentRenderer.ɵfac\n    });\n  }\n  return DOMTestComponentRenderer;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Platform for testing\n *\n * @publicApi\n */\nconst platformBrowserTesting = /*#__PURE__*/createPlatformFactory(platformBrowser, 'browserTesting');\n/**\n * NgModule for testing.\n *\n * @publicApi\n */\nlet BrowserTestingModule = /*#__PURE__*/(() => {\n  class BrowserTestingModule {\n    static ɵfac = function BrowserTestingModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || BrowserTestingModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: BrowserTestingModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [{\n        provide: APP_ID,\n        useValue: 'a'\n      }, _internalProvideZoneChangeDetection({}), {\n        provide: _ChangeDetectionScheduler,\n        useExisting: _ChangeDetectionSchedulerImpl\n      }, {\n        provide: PlatformLocation,\n        useClass: MockPlatformLocation\n      }, {\n        provide: TestComponentRenderer,\n        useClass: DOMTestComponentRenderer\n      }],\n      imports: [BrowserModule]\n    });\n  }\n  return BrowserTestingModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nexport { BrowserTestingModule, platformBrowserTesting };\n//# sourceMappingURL=testing.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}