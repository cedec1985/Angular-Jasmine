{"ast":null,"code":"/**\r\n * @license Angular v20.1.7\r\n * (c) 2010-2025 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\n\nexport { ActivatedRoute, ActivatedRouteSnapshot, ActivationEnd, ActivationStart, BaseRouteReuseStrategy, ChildActivationEnd, ChildActivationStart, ChildrenOutletContexts, DefaultTitleStrategy, DefaultUrlSerializer, EventType, GuardsCheckEnd, GuardsCheckStart, NavigationCancel, NavigationCancellationCode, NavigationEnd, NavigationError, NavigationSkipped, NavigationSkippedCode, NavigationStart, OutletContext, PRIMARY_OUTLET, ROUTER_CONFIGURATION, ROUTER_OUTLET_DATA, ROUTES, RedirectCommand, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RouteReuseStrategy, Router, RouterEvent, RouterOutlet, RouterState, RouterStateSnapshot, RoutesRecognized, Scroll, TitleStrategy, UrlHandlingStrategy, UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree, convertToParamMap, createUrlTreeFromSnapshot, defaultUrlMatcher, ɵEmptyOutletComponent, afterNextNavigation as ɵafterNextNavigation, loadChildren as ɵloadChildren } from './router2.mjs';\nexport { NoPreloading, PreloadAllModules, PreloadingStrategy, ROUTER_INITIALIZER, RouterLink, RouterLinkActive, RouterLink as RouterLinkWithHref, RouterModule, RouterPreloader, provideRouter, provideRoutes, withComponentInputBinding, withDebugTracing, withDisabledInitialNavigation, withEnabledBlockingInitialNavigation, withHashLocation, withInMemoryScrolling, withNavigationErrorHandler, withPreloading, withRouterConfig, withViewTransitions, ROUTER_PROVIDERS as ɵROUTER_PROVIDERS } from './router_module.mjs';\nimport { inject, Version } from '@angular/core';\nimport '@angular/common';\nimport 'rxjs';\nimport 'rxjs/operators';\nimport '@angular/platform-browser';\n\n/**\r\n * Maps an array of injectable classes with canMatch functions to an array of equivalent\r\n * `CanMatchFn` for use in a `Route` definition.\r\n *\r\n * Usage {@example router/utils/functional_guards.ts region='CanActivate'}\r\n *\r\n * @publicApi\r\n * @see {@link Route}\r\n */\nfunction mapToCanMatch(providers) {\n  return providers.map(provider => (...params) => inject(provider).canMatch(...params));\n}\n/**\r\n * Maps an array of injectable classes with canActivate functions to an array of equivalent\r\n * `CanActivateFn` for use in a `Route` definition.\r\n *\r\n * Usage {@example router/utils/functional_guards.ts region='CanActivate'}\r\n *\r\n * @publicApi\r\n * @see {@link Route}\r\n */\nfunction mapToCanActivate(providers) {\n  return providers.map(provider => (...params) => inject(provider).canActivate(...params));\n}\n/**\r\n * Maps an array of injectable classes with canActivateChild functions to an array of equivalent\r\n * `CanActivateChildFn` for use in a `Route` definition.\r\n *\r\n * Usage {@example router/utils/functional_guards.ts region='CanActivate'}\r\n *\r\n * @publicApi\r\n * @see {@link Route}\r\n */\nfunction mapToCanActivateChild(providers) {\n  return providers.map(provider => (...params) => inject(provider).canActivateChild(...params));\n}\n/**\r\n * Maps an array of injectable classes with canDeactivate functions to an array of equivalent\r\n * `CanDeactivateFn` for use in a `Route` definition.\r\n *\r\n * Usage {@example router/utils/functional_guards.ts region='CanActivate'}\r\n *\r\n * @publicApi\r\n * @see {@link Route}\r\n */\nfunction mapToCanDeactivate(providers) {\n  return providers.map(provider => (...params) => inject(provider).canDeactivate(...params));\n}\n/**\r\n * Maps an injectable class with a resolve function to an equivalent `ResolveFn`\r\n * for use in a `Route` definition.\r\n *\r\n * Usage {@example router/utils/functional_guards.ts region='Resolve'}\r\n *\r\n * @publicApi\r\n * @see {@link Route}\r\n */\nfunction mapToResolve(provider) {\n  return (...params) => inject(provider).resolve(...params);\n}\n\n/**\r\n * @module\r\n * @description\r\n * Entry point for all public APIs of the router package.\r\n */\n/**\r\n * @publicApi\r\n */\nconst VERSION = /*#__PURE__*/new Version('20.1.7');\nexport { VERSION, mapToCanActivate, mapToCanActivateChild, mapToCanDeactivate, mapToCanMatch, mapToResolve };\n//# sourceMappingURL=router.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}