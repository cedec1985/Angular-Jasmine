{"ast":null,"code":"/**\n * @license Angular v20.2.1\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpHeaders, HttpResponse, HttpErrorResponse, HttpStatusCode, HttpEventType, HttpBackend, REQUESTS_CONTRIBUTE_TO_STABILITY, HttpClientModule } from '../module.mjs';\nimport 'rxjs/operators';\nimport '../xhr.mjs';\n\n/**\n * Controller to be injected into tests, that allows for mocking and flushing\n * of requests.\n *\n * @publicApi\n */\nclass HttpTestingController {}\n\n/**\n * A mock requests that was received and is ready to be answered.\n *\n * This interface allows access to the underlying `HttpRequest`, and allows\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\n *\n * @publicApi\n */\nclass TestRequest {\n  request;\n  observer;\n  /**\n   * Whether the request was cancelled after it was sent.\n   */\n  get cancelled() {\n    return this._cancelled;\n  }\n  /**\n   * @internal set by `HttpClientTestingBackend`\n   */\n  _cancelled = false;\n  constructor(request, observer) {\n    this.request = request;\n    this.observer = observer;\n  }\n  /**\n   * Resolve the request by returning a body plus additional HTTP information (such as response\n   * headers) if provided.\n   * If the request specifies an expected body type, the body is converted into the requested type.\n   * Otherwise, the body is converted to `JSON` by default.\n   *\n   * Both successful and unsuccessful responses can be delivered via `flush()`.\n   */\n  flush(body, opts = {}) {\n    if (this.cancelled) {\n      throw new Error(`Cannot flush a cancelled request.`);\n    }\n    const url = this.request.urlWithParams;\n    const headers = opts.headers instanceof HttpHeaders ? opts.headers : new HttpHeaders(opts.headers);\n    body = _maybeConvertBody(this.request.responseType, body);\n    let statusText = opts.statusText;\n    let status = opts.status !== undefined ? opts.status : HttpStatusCode.Ok;\n    if (opts.status === undefined) {\n      if (body === null) {\n        status = HttpStatusCode.NoContent;\n        statusText ||= 'No Content';\n      } else {\n        statusText ||= 'OK';\n      }\n    }\n    if (statusText === undefined) {\n      throw new Error('statusText is required when setting a custom status.');\n    }\n    if (status >= 200 && status < 300) {\n      this.observer.next(new HttpResponse({\n        body,\n        headers,\n        status,\n        statusText,\n        url\n      }));\n      this.observer.complete();\n    } else {\n      this.observer.error(new HttpErrorResponse({\n        error: body,\n        headers,\n        status,\n        statusText,\n        url\n      }));\n    }\n  }\n  error(error, opts = {}) {\n    if (this.cancelled) {\n      throw new Error(`Cannot return an error for a cancelled request.`);\n    }\n    const headers = opts.headers instanceof HttpHeaders ? opts.headers : new HttpHeaders(opts.headers);\n    this.observer.error(new HttpErrorResponse({\n      error,\n      headers,\n      status: opts.status || 0,\n      statusText: opts.statusText || '',\n      url: this.request.urlWithParams\n    }));\n  }\n  /**\n   * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\n   * request.\n   */\n  event(event) {\n    if (this.cancelled) {\n      throw new Error(`Cannot send events to a cancelled request.`);\n    }\n    this.observer.next(event);\n  }\n}\n/**\n * Helper function to convert a response body to an ArrayBuffer.\n */\nfunction _toArrayBufferBody(body) {\n  if (typeof ArrayBuffer === 'undefined') {\n    throw new Error('ArrayBuffer responses are not supported on this platform.');\n  }\n  if (body instanceof ArrayBuffer) {\n    return body;\n  }\n  throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to a Blob.\n */\nfunction _toBlob(body) {\n  if (typeof Blob === 'undefined') {\n    throw new Error('Blob responses are not supported on this platform.');\n  }\n  if (body instanceof Blob) {\n    return body;\n  }\n  if (ArrayBuffer && body instanceof ArrayBuffer) {\n    return new Blob([body]);\n  }\n  throw new Error('Automatic conversion to Blob is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to JSON data.\n */\nfunction _toJsonBody(body, format = 'JSON') {\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error(`Automatic conversion to ${format} is not supported for ArrayBuffers.`);\n  }\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error(`Automatic conversion to ${format} is not supported for Blobs.`);\n  }\n  if (typeof body === 'string' || typeof body === 'number' || typeof body === 'object' || typeof body === 'boolean' || Array.isArray(body)) {\n    return body;\n  }\n  throw new Error(`Automatic conversion to ${format} is not supported for response type.`);\n}\n/**\n * Helper function to convert a response body to a string.\n */\nfunction _toTextBody(body) {\n  if (typeof body === 'string') {\n    return body;\n  }\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\n  }\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error('Automatic conversion to text is not supported for Blobs.');\n  }\n  return JSON.stringify(_toJsonBody(body, 'text'));\n}\n/**\n * Convert a response body to the requested type.\n */\nfunction _maybeConvertBody(responseType, body) {\n  if (body === null) {\n    return null;\n  }\n  switch (responseType) {\n    case 'arraybuffer':\n      return _toArrayBufferBody(body);\n    case 'blob':\n      return _toBlob(body);\n    case 'json':\n      return _toJsonBody(body);\n    case 'text':\n      return _toTextBody(body);\n    default:\n      throw new Error(`Unsupported responseType: ${responseType}`);\n  }\n}\n\n/**\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\n * and as the `HttpTestingController`.\n *\n * `HttpClientTestingBackend` works by keeping a list of all open requests.\n * As requests come in, they're added to the list. Users can assert that specific\n * requests were made and then flush them. In the end, a verify() method asserts\n * that no unexpected requests were made.\n *\n *\n */\nlet HttpClientTestingBackend = /*#__PURE__*/(() => {\n  class HttpClientTestingBackend {\n    /**\n     * List of pending requests which have not yet been expected.\n     */\n    open = [];\n    /**\n     * Used when checking if we need to throw the NOT_USING_FETCH_BACKEND_IN_SSR error\n     */\n    isTestingBackend = true;\n    /**\n     * Handle an incoming request by queueing it in the list of open requests.\n     */\n    handle(req) {\n      return new Observable(observer => {\n        const testReq = new TestRequest(req, observer);\n        this.open.push(testReq);\n        observer.next({\n          type: HttpEventType.Sent\n        });\n        return () => {\n          testReq._cancelled = true;\n        };\n      });\n    }\n    /**\n     * Helper function to search for requests in the list of open requests.\n     */\n    _match(match) {\n      if (typeof match === 'string') {\n        return this.open.filter(testReq => testReq.request.urlWithParams === match);\n      } else if (typeof match === 'function') {\n        return this.open.filter(testReq => match(testReq.request));\n      } else {\n        return this.open.filter(testReq => (!match.method || testReq.request.method === match.method.toUpperCase()) && (!match.url || testReq.request.urlWithParams === match.url));\n      }\n    }\n    /**\n     * Search for requests in the list of open requests, and return all that match\n     * without asserting anything about the number of matches.\n     */\n    match(match) {\n      const results = this._match(match);\n      results.forEach(result => {\n        const index = this.open.indexOf(result);\n        if (index !== -1) {\n          this.open.splice(index, 1);\n        }\n      });\n      return results;\n    }\n    /**\n     * Expect that a single outstanding request matches the given matcher, and return\n     * it.\n     *\n     * Requests returned through this API will no longer be in the list of open requests,\n     * and thus will not match twice.\n     */\n    expectOne(match, description) {\n      description ||= this.descriptionFromMatcher(match);\n      const matches = this.match(match);\n      if (matches.length > 1) {\n        throw new Error(`Expected one matching request for criteria \"${description}\", found ${matches.length} requests.`);\n      }\n      if (matches.length === 0) {\n        let message = `Expected one matching request for criteria \"${description}\", found none.`;\n        if (this.open.length > 0) {\n          // Show the methods and URLs of open requests in the error, for convenience.\n          const requests = this.open.map(describeRequest).join(', ');\n          message += ` Requests received are: ${requests}.`;\n        }\n        throw new Error(message);\n      }\n      return matches[0];\n    }\n    /**\n     * Expect that no outstanding requests match the given matcher, and throw an error\n     * if any do.\n     */\n    expectNone(match, description) {\n      description ||= this.descriptionFromMatcher(match);\n      const matches = this.match(match);\n      if (matches.length > 0) {\n        throw new Error(`Expected zero matching requests for criteria \"${description}\", found ${matches.length}.`);\n      }\n    }\n    /**\n     * Validate that there are no outstanding requests.\n     */\n    verify(opts = {}) {\n      let open = this.open;\n      // It's possible that some requests may be cancelled, and this is expected.\n      // The user can ask to ignore open requests which have been cancelled.\n      if (opts.ignoreCancelled) {\n        open = open.filter(testReq => !testReq.cancelled);\n      }\n      if (open.length > 0) {\n        // Show the methods and URLs of open requests in the error, for convenience.\n        const requests = open.map(describeRequest).join(', ');\n        throw new Error(`Expected no open requests, found ${open.length}: ${requests}`);\n      }\n    }\n    descriptionFromMatcher(matcher) {\n      if (typeof matcher === 'string') {\n        return `Match URL: ${matcher}`;\n      } else if (typeof matcher === 'object') {\n        const method = matcher.method || '(any)';\n        const url = matcher.url || '(any)';\n        return `Match method: ${method}, URL: ${url}`;\n      } else {\n        return `Match by function: ${matcher.name}`;\n      }\n    }\n    static ɵfac = function HttpClientTestingBackend_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HttpClientTestingBackend)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: HttpClientTestingBackend,\n      factory: HttpClientTestingBackend.ɵfac\n    });\n  }\n  return HttpClientTestingBackend;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction describeRequest(testRequest) {\n  const url = testRequest.request.urlWithParams;\n  const method = testRequest.request.method;\n  return `${method} ${url}`;\n}\nfunction provideHttpClientTesting() {\n  return [HttpClientTestingBackend, {\n    provide: HttpBackend,\n    useExisting: HttpClientTestingBackend\n  }, {\n    provide: HttpTestingController,\n    useExisting: HttpClientTestingBackend\n  }, {\n    provide: REQUESTS_CONTRIBUTE_TO_STABILITY,\n    useValue: false\n  }];\n}\n\n/**\n * Configures `HttpClientTestingBackend` as the `HttpBackend` used by `HttpClient`.\n *\n * Inject `HttpTestingController` to expect and flush requests in your tests.\n *\n * @publicApi\n *\n * @deprecated Add `provideHttpClientTesting()` to your providers instead.\n */\nlet HttpClientTestingModule = /*#__PURE__*/(() => {\n  class HttpClientTestingModule {\n    static ɵfac = function HttpClientTestingModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HttpClientTestingModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: HttpClientTestingModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [provideHttpClientTesting()],\n      imports: [HttpClientModule]\n    });\n  }\n  return HttpClientTestingModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nexport { HttpClientTestingModule, HttpTestingController, TestRequest, provideHttpClientTesting };\n//# sourceMappingURL=testing.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}