{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { increment, decrement, reset, saveSuccess, saveError } from '../actions/counter-actions';\nimport { of } from 'rxjs';\nimport { catchError, map, mergeMap, withLatestFrom } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"../services/services/counter-api-service\";\nexport let CounterEffects = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class CounterEffects {\n    constructor(actions$, store$, counterApiService) {\n      this.actions$ = actions$;\n      this.store$ = store$;\n      this.counterApiService = counterApiService;\n      this.saveOnChange$ = createEffect(() => this.actions$.pipe(ofType(increment, decrement, reset), withLatestFrom(this.store$), mergeMap(([_, state]) => this.counterApiService.saveCounter(state.counter).pipe(map(() => saveSuccess()), catchError(error => of(saveError({\n        error\n      })))))));\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function CounterEffects_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CounterEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i3.CounterApiService));\n    }, this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CounterEffects,\n      factory: CounterEffects.ɵfac\n    }));\n  }\n  _staticBlock();\n  return CounterEffects;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}