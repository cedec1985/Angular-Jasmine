{"ast":null,"code":"/**\r\n * @license Angular v20.1.7\r\n * (c) 2010-2025 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\n\n/**\r\n * Current injector value used by `inject`.\r\n * - `undefined`: it is an error to call `inject`\r\n * - `null`: `inject` can be called but there is no injector (limp-mode).\r\n * - Injector instance: Use the injector for resolution.\r\n */\nlet _currentInjector = undefined;\nfunction getCurrentInjector() {\n  return _currentInjector;\n}\nfunction setCurrentInjector(injector) {\n  const former = _currentInjector;\n  _currentInjector = injector;\n  return former;\n}\nfunction inject(token, options) {\n  const currentInjector = getCurrentInjector();\n  if (!currentInjector) {\n    throw new Error('Current injector is not set.');\n  }\n  if (!token.ɵprov) {\n    throw new Error('Token is not an injectable');\n  }\n  return currentInjector.retrieve(token, options);\n}\n\n/**\r\n * Value returned if the key-value pair couldn't be found in the context\r\n * hierarchy.\r\n */\nconst NOT_FOUND = /*#__PURE__*/Symbol('NotFound');\n/**\r\n * Error thrown when the key-value pair couldn't be found in the context\r\n * hierarchy. Context can be attached below.\r\n */\nclass NotFoundError extends Error {\n  name = 'ɵNotFound';\n  constructor(message) {\n    super(message);\n  }\n}\n/**\r\n * Type guard for checking if an unknown value is a NotFound.\r\n */\nfunction isNotFound(e) {\n  return e === NOT_FOUND || e?.name === 'ɵNotFound';\n}\nexport { NOT_FOUND, NotFoundError, getCurrentInjector, inject, isNotFound, setCurrentInjector };\n//# sourceMappingURL=not_found.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}